This is Info file vice.info, produced by Makeinfo version 1.68 from the
input file vice.texi.

START-INFO-DIR-ENTRY
* VICE: (vice).        VICE, the Versatile Commodore Emulator.
END-INFO-DIR-ENTRY

   VICE Manual

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.



File: vice.info,  Node: Module formats,  Prev: Emulator modules,  Up: Snapshot format

Module formats
--------------

   This section shows the basic module framework and the contents of the
different types of modules.

   The single chip modules contain the chip state, not the state of the
emulator.  We tried to make the format as implementation-independent as
possible, to allow reuse of snapshots in later versions of this
emulator, or even in other emulators.

* Menu:

* Module Terminology::
* Module framework::
* CPU 6502 module::
* CIA 6526 module::
* VIA 6522 module::
* PIA 6520 module::
* TPI 6525 module::
* SID 6581 module::
* ACIA 6551 module::
* VIC-I module::
* VIC-II module::
* CRTC module::
* C64 memory module::
* C128 memory module::
* VIC20 memory module::
* PET memory module::
* CBM-II memory module::


File: vice.info,  Node: Module Terminology,  Next: Module framework,  Prev: Module formats,  Up: Module formats

Terminology
...........

   In this section we use certain abbreviations to define the types of
the data saved in the snapshot.

`BYTE'
     8 bit integer.

`WORD'
     16 bit integer.  Saved with low-byte first, high-byte last.

`DWORD'
     32 bit integer.  Saved with low-word first, then high-word.  Each
     word saved with its low-byte first.

`ARRAY'
     Array of BYTE values.  Length depends on the description.

   The tables for the single modules state the type, name and
description of the data saved in the modules.  The data is saved in the
order it is in the tables, so no offset is given.


File: vice.info,  Node: Module framework,  Next: CPU 6502 module,  Prev: Module Terminology,  Up: Module formats

Module framework
................

   The VICE snapshot file starts with the magic string and includes the
fileformat version number.

Type    Name                          Description                          
19 BYTE MAGIC                         "VICE Snapshot File\032", padded     
                                      with 0                               
BYTE    VMAJOR                        fileformat major version number      
BYTE    VMINOR                        fileformat minor version number      
16 BYTE MACHINENAME                   Name of emulated machine, like       
                                      "PET", "CBM-II", "VIC20", "C64" or   
                                      "C128". zerobyte-padded.             

   The file header is followed by a number of different snapshot
modules.

   Each module has a header with the information given in the table
below.  The header includes two version numbers, VMAJOR and VMINOR.
Modules with the same VMAJOR should be able to be exchanged.  I.e.
higher VMINOR numbers only append to the data for lower VMINOR.  This
additional data is ignored by older restore routines.  The other way
around newer restore routines must accept the fewer info from lower
VMINOR dumps.  Changes in VMAJOR might introduce any incompatibility
you like, but that's what VMAJOR is for after all :-)

Type    Name                          Description                          
16 BYTE MODULENAME                    The name of the module in ASCII,     
                                      padded with 0 to 16 byte.            
BYTE    VMAJOR                        major version number                 
BYTE    VMINOR                        minor version number                 
DWORD   SIZE                          size of the module, not including    
                                      this header                          


File: vice.info,  Node: CPU 6502 module,  Next: CIA 6526 module,  Prev: Module framework,  Up: Module formats

CPU module
..........

   This module saves the core 6502 state.  You will find a clock value
there.  All other modules save their own clock values relative to this
value.  However, the drive modules save their clocks relative to their
appropriate CPUs of course.

   Warning: This module is still under construction and saves some
information that is not sure to be VICE-independent.  If in doubt, read
the source.

Type    Name                          Description                          
DWORD   CLK                           the current CPU clock value.  All    
                                      other clock values are relative to   
                                      this.                                
BYTE    AC                            Accumulator                          
BYTE    XR                            X index register                     
BYTE    YR                            Y index register                     
BYTE    SP                            Stack Pointer                        
WORD    PC                            Programm Counter                     
BYTE    ST                            Status Registers                     
DWORD   LASTOPCODE                    ?                                    
DWORD   IRQCLK                        absolute CLK when the IRQ line came  
                                      active                               
DOWRD   NMICLK                        absolute CLK when the NMI line came  
                                      active                               
DWORD   ?                             ?                                    
DWORD   ?                             ?                                    


File: vice.info,  Node: CIA 6526 module,  Next: VIA 6522 module,  Prev: CPU 6502 module,  Up: Module formats

CIA module
..........

   The CIA 6526 is an I/O port chip with 2 8-bit I/O ports, a shift
register, two timers, a Time of Day clock and interrupts.

   Version numbers: Major 1, Minor 1.

Type    Name                          Description                          
BYTE    ORA                           Output register A                    
BYTE    ORB                           Output register B                    
BYTE    DDRA                          Data direction register A            
BYTE    DDRB                          Data direction register B            
WORD    TAC                           Timer A counter value                
WORD    TBC                           Timer B counter value                
BYTE    TOD_TEN                       Time of Day - current tenth of       
                                      second                               
BYTE    TOD_SEC                       Time of Day - current seconds        
BYTE    TOD_MIN                       Time of Day - current minutes        
BYTE    TOD_HR                        Time of Day - current hours          
BYTE    SDR                           contents of shift register           
BYTE    IER                           mask of enabled interrupt masks      
BYTE    CRA                           Control register A                   
BYTE    CRB                           Control register B                   
WORD    TAL                           Timer A latch value                  
WORD    TBL                           Timer B latch value                  
BYTE    IFR                           mask of currently active interrupts  
BYTE    PBSTATE                       Bit 6/7 reflect the PB6/7 toggle     
                                      bit state.  Bit 2/3 reflect the      
                                      corresponding port bit state.        
BYTE    SRHBITS                       number of half-bits to still shift   
                                      in/out SDR                           
BYTE    ALARM_TEN                     Time of Day - alarm tenth of second  
BYTE    ALARM_SEC                     Time of Day - alarm seconds          
BYTE    ALARM_MIN                     Time of Day - alarm minutes          
BYTE    ALARM_HR                      Time of Day - alarm hours            
BYTE    READICR                       current clock minus the clock when   
                                      ICR was read last plus 128.          
BYTE    TODLATCHED                    Bit 0: 1= latched for reading, Bit   
                                      1: 2=stopped for writing             
BYTE    TODL_TEN                      Time of Day - latched tenth of       
                                      second                               
BYTE    TODL_SEC                      Time of Day - latched seconds        
BYTE    TODL_MIN                      Time of Day - latched minutes        
BYTE    TODL_HR                       Time of Day - latched hours          
DWORD   TOD_TICKS                     clk ticks till next tenth of second  
-       -                             The next items have been added in    
                                      V1.1                                 
WORD    TASTATE                       The state bits of the CIA timer A,   
                                      according to ciatimer.h              
WORD    TBSTATE                       The state bits of the CIA timer B,   
                                      according to ciatimer.h              

   The last two items have been added in CIA snapshot version 1.1 due
to the improved CIA emulation in the newer VICE versions.  Some state
bits correspond to the CIA state as described in the "A Software Model
of the CIA 6526" document by Wolfgang Lorenz, some are delayed
versions. For more read the source file `ciatimer.h'.


File: vice.info,  Node: VIA 6522 module,  Next: PIA 6520 module,  Prev: CIA 6526 module,  Up: Module formats

VIA module
..........

   The VIA 6522 is the predecessor of the CIA and also an I/O port chip
with 2 8-bit I/O ports, a shift register, two timers and interrupts.

   Version numbers: Major 1, Minor 0.

Type    Name                          Description                          
BYTE    ORA                           Output register A                    
BYTE    DDRA                          Data direction register A            
BYTE    ORB                           Output register B                    
BYTE    DDRB                          Data direction register B            
WORD    T1L                           Timer 1 Latch value                  
WORD    T1C                           Timer 1 counter value                
BYTE    T2L                           Timer 2 latch (8 bit as only lower   
                                      byte is used)                        
WORD    T2C                           Timer 2 counter value                
BYTE    RUNFL                         bit 7: timer 1 will generate IRQ on  
                                      underflow; bit 6: timer 2 will       
                                      generate IRQ on underflow            
BYTE    SR                            Shift register value                 
BYTE    ACR                           Auxiliary control register           
BYTE    PCR                           Peripheral control register          
BYTE    IFR                           active interrupts                    
BYTE    IER                           interrupt mask                       
BYTE    PB7                           bit 7 = pb7 state                    
BYTE    SRHBITS                       number of half-bits to shift out on  
                                      SR                                   
BYTE    CABSTATE                      bit 7: state of CA2 pin, bit 6:      
                                      state of CB2 pin                     
BYTE    ILA                           Port A Input Latch (see ACR bit 0)   
BYTE    ILB                           Port B Input Latch (see ACR bit 1)   


File: vice.info,  Node: PIA 6520 module,  Next: TPI 6525 module,  Prev: VIA 6522 module,  Up: Module formats

PIA module
..........

   The PIA 6520 is a chip with two I/O ports (Parallel Interface
Adapter) and four additional handshake lines.  The chip is pretty the
same for Port A and B, only that Port A implements handshake on read
operation and port B on write operation.

   Version numbers: Major 1, Minor 0.

Type    Name                          Description                          
UBYTE   ORA                           Output register A                    
UBYTE   DDRA                          Data Direction Register A            
UBYTE   CTRLA                         Control Register A                   
UBYTE   ORB                           Output register B                    
UBYTE   DDRB                          Data Direction Register B            
UBYTE   CTRLB                         Control Register B                   
UBYTE   CABSTATE                      Bit 7 = state of CA2, Bit 6 = state  
                                      of CB2                               


File: vice.info,  Node: TPI 6525 module,  Next: SID 6581 module,  Prev: PIA 6520 module,  Up: Module formats

TPI module
..........

   The TPI 6525 is a chip with three I/O ports (Tri-Port-Interface).
One of the ports can double as an interrupt prioritizer.  Therefore we
also have to save the states of the interrupt stack etc.

   Version numbers: Major 1, Minor 0.

Type    Name                          Description                          
BYTE    PRA                           Port A output register               
BYTE    PRB                           Port B output register               
BYTE    PRC                           Port C output register (doubles as   
                                      IRQ latch register)                  
BYTE    DDRA                          Port A data direction register       
BYTE    DDRB                          Port B data direction register       
BYTE    DDRC                          Port C data direction register       
                                      (doubles as IRQ mask register)       
BYTE    CR                            Control Register                     
BYTE    AIR                           Active interrupt register            
BYTE    STACK                         Interrupt stack - the interrupt      
                                      bits that are not (yet) served.      
BYTE    CABSTATE                      State of CA/CB pins.  Bit 7 = state  
                                      of CA, Bit 6 = state of CB           


File: vice.info,  Node: SID 6581 module,  Next: ACIA 6551 module,  Prev: TPI 6525 module,  Up: Module formats

SID module
..........

   TODO


File: vice.info,  Node: ACIA 6551 module,  Next: VIC-I module,  Prev: SID 6581 module,  Up: Module formats

ACIA module
...........

   The ACIA 6551 is an RS232 interface chip.  VICE emulates RS232
connections via `/dev/ttyS*' (Unix) or `COM:' (DOS/WIN - not yet?).
When saving a snapshot, those connections are of course lost.  The
state of the ACIA however is restored if possible.  I.e. if a connection
is already open when restoring the snapshot, this connection is used
instead.  If no connection is open, a carrier/DTR drop is emulated.

   Version numbers: Major 1, Minor 0.

Type    Name                          Description                          
BYTE    TDR                           Transmit Data Register               
BYTE    RDR                           Receiver Data Register               
BYTE    SR                            Status Register                      
BYTE    CMD                           Command Register                     
BYTE    CTRL                          Ctrl Register                        
BYTE    INTX                          0 = no data to tx; 1 = Data is       
                                      being transmitted; 2 = Data is       
                                      being transmitted while data in TDR  
                                      waiting to be put to internal        
                                      transmit register                    
DWORD   TICKS                         Clock ticks till the next TDR empty  
                                      interrupt                            


File: vice.info,  Node: VIC-I module,  Next: VIC-II module,  Prev: ACIA 6551 module,  Up: Module formats

VIC-I module
............

   TODO


File: vice.info,  Node: VIC-II module,  Next: CRTC module,  Prev: VIC-I module,  Up: Module formats

VIC-II module
.............

   TODO


File: vice.info,  Node: CRTC module,  Next: C64 memory module,  Prev: VIC-II module,  Up: Module formats

CRTC module
...........

   Warning: This module is still under construction.  Especially the
RASTERY and RASTERLINE values might be bogus.

Type    Name                          Description                          
BYTE    RASTERY                       The number of clock cycles from      
                                      rasterlines start                    
WORD    RASTERLINE                    The current rasterline               
WORD    ADDRMASK                      The address mask valid for the       
                                      CRTC.  All memory accesses are       
                                      masked with this value               
BYTE    HWFLAG                        Bit 0: 1= hardware cursor            
                                      available.  Bit 1: 1= number of      
                                      columns is doubled by external       
                                      hardware                             
20 BYTE REGISTERS                     register DUMP of the CRTC registers  
                                      0-19.                                
BYTE    CRSRSTATE                     Hardware cursor: Bits 0-3: frame     
                                      counter till next crsr line toggle.  
                                      Bit 7: 1= cursor line active         


File: vice.info,  Node: C64 memory module,  Next: C128 memory module,  Prev: CRTC module,  Up: Module formats

C64 memory module
.................

   The C64 memory module actually consists of two modules.  The
"C128MEM" module is mandatory and contains the RAM dump.  The "C64ROM"
module is optional and contains a dump of the ROM images.

   The size of the C64 memory modules differs with each different memory
configuration. The RAM configuration is saved in the snapshot, and
restored when the snapshot is loaded. The attached cartridges are not
yet(!) saved and not yet restored upon load.

   Version numbers: Major 0, Minor 0

   The C64MEM module

Type    Name                          Description                          
BYTE    CPUDATA                       CPU port data byte                   
BYTE    CPUDIR                        CPU port direction byte              
BYTE    EXROM                         state of the EXROM line (?)          
BYTE    GAME                          state of the GAME line (?)           
ARRAY   RAM                           64k RAM dump                         

   The C64ROM module

Type    Name                          Description                          
ARRAY   KERNAL                        8k dump of the kernal ROM            
ARRAY   BASIC                         8k dump of the basic ROM             
ARRAY   CHARGEN                       4k dump of the chargen ROM           


File: vice.info,  Node: C128 memory module,  Next: VIC20 memory module,  Prev: C64 memory module,  Up: Module formats

C128 memory module
..................

   The C128 memory module actually consists of two modules.  The
"C128MEM" module is mandatory and contains the RAM dump.  The "C128ROM"
module is optional and contains a dump of the ROM images.

   The size of the C128 memory modules differs with each different
memory configuration. The RAM configuration is saved in the snapshot,
and restored when the snapshot is loaded. The attached cartridges are
also restored upon load if they have been saved in the snapshot.

   Version numbers: Major 0, Minor 0

   The C128MEM module

Type    Name                          Description                          
12 BYTE MMU                           dump of the 12 MMU registers         
ARRAY   RAM                           128k RAM dump banks 0 and 1          

   The C128ROM module

Type    Name                          Description                          
ARRAY   KERNAL                        8k dump of the kernal ROM            
ARRAY   BASIC                         32k dump of the basic ROM            
ARRAY   EDITOR                        4k dump of the editor ROM            
ARRAY   4k CHARGEN                    dump of the chargen ROM              


File: vice.info,  Node: VIC20 memory module,  Next: PET memory module,  Prev: C128 memory module,  Up: Module formats

VIC20 memory module
...................

   The VIC20 memory module actually consists of two modules.  The
"VIC20MEM" module is mandatory and contains the RAM dump.  The
"VIC20ROM" module is optional and contains a dump of the ROM images.

   The size of the VIC20 memory modules differs with each different
memory configuration. The RAM configuration is saved in the snapshot,
and restored when the snapshot is loaded. The attached cartridges are
also restored upon load if they have been saved in the snapshot.

   Version numbers: Major 1, Minor 0

   The VIC20MEM module

Type    Name                          Description                          
BYTE    CONFIG                        Configuration register.  Bits        
                                      0,1,2,3,5 reflect if the             
                                      corresponding memory block is RAM    
                                      (bit=1) or not (bit=0).              
ARRAY   RAM0                          1k RAM dump $0000-$03ff              
ARRAY   RAM1                          4k RAM dump $1000-$1fff              
ARRAY   COLORRAM                      2k Color RAM, $9400-$9bff            
ARRAY   BLK0                          if CONFIG & 1 then: 3k RAM dump      
                                      $0400-$0fff                          
ARRAY   BLK1                          if CONFIG & 2 then: 8k RAM dump      
                                      $2000-$3fff                          
ARRAY   BLK2                          if CONFIG & 4 then: 8k RAM dump      
                                      $4000-$5fff                          
ARRAY   BLK3                          if CONFIG & 8 then: 8k RAM dump      
                                      $6000-$7fff                          
ARRAY   BLK5                          if CONFIG & 32 then: 8k RAM dump     
                                      $a000-$bfff                          

   The VIC20ROM module

Type    Name                          Description                          
BYTE    CONFIG                        Bit 0: 1= ROM block $2*** enabled.   
                                      Bit 1: 1= ROM block $3*** enabled.   
                                      Bit 4: 1= ROM block $6*** enabled.   
                                      Bit 5: 1= ROM block $7*** enabled.   
                                      Bit 6: 1= ROM block $A*** enabled.   
                                      Bit 7: 1= ROM block $B*** enabled.   
ARRAY   KERNAL                        8k KERNAL ROM image $e000-$ffff      
ARRAY   BASIC                         16k BASIC ROM image $c000-$dfff      
ARRAY   CHARGEN                       4k CHARGEN ROM image                 
ARRAY   BLK1A                         4k ROM image $2*** (if CONFIG & 1)   
ARRAY   BLK1B                         4k ROM image $3*** (if CONFIG & 2)   
ARRAY   BLK3A                         4k ROM image $6*** (if CONFIG & 16)  
ARRAY   BLK3B                         4k ROM image $7*** (if CONFIG & 32)  
ARRAY   BLK5A                         4k ROM image $A*** (if CONFIG & 64)  
ARRAY   BLK5B                         4k ROM image $B*** (if CONFIG & 128) 


File: vice.info,  Node: PET memory module,  Next: CBM-II memory module,  Prev: VIC20 memory module,  Up: Module formats

PET memory module
.................

   The PET memory module actually consists of two modules.  The
"PETMEM" module is mandatory and contains the RAM dump.  The "PETROM"
module is optional and contains a dump of the ROM images.

   The size of the PET memory modules differs with each different memory
configuration.  The RAM configuration is saved in the snapshot, and
restored when the snapshot is loaded.

   The PETMEM module

   Version numbers: Major 1, Minor 1

Type    Name                          Description                          
BYTE    CONFIG                        Configuration value. Bits 0-3: 0=    
                                      40 col PET without CRTC; 1= 40 col   
                                      PET with CRTC; 2 = 80 col PET (with  
                                      CRTC); 3= SuperPET; 4= 8096; 5=      
                                      8296. Bit 6: 1= RAM at $9***. Bit    
                                      7: 1= RAM at $A***.                  
BYTE    KEYBOARD                      Keyboard type. 0= UK business; 1=    
                                      Graphics; 2= German business         
BYTE    MEMSIZE                       memory size of low 32k in k          
                                      (possible values 4, 8, 16, 32)       
BYTE    CONF8X96                      Value of the 8x96 configuration      
                                      register                             
BYTE    SUPERPET                      SuperPET config. Bit 0: 1= $9***     
                                      RAM enabled. Bit 1: 1= RAM write     
                                      protected. Bit 2: 1= CTRL register   
                                      write protected. Bit 3: 0= DIAG pin  
                                      active. Bits 4-7: RAM block in use.  
ARRAY   RAM                           4-32k RAM (not 8296, size depends    
                                      on MEMSIZE)                          
ARRAY   VRAM                          2/4k RAM (not 8296, size depends on  
                                      CONFIG)                              
ARRAY   EXTRAM                        64k expansion RAM (SuperPET and      
                                      8096 only)                           
ARRAY   RAM                           128k RAM (8296 only)                 
-       -                             The following item has been added    
                                      in V1.1                              
BYTE    POSITIONAL                    bit 0=0 = symbolic keyboard          
                                      mapping, bit 0=1 = positional        
                                      mapping.                             

   The last item has been added in PETMEM snapshot version 1.1. It is
ignored by earlier restore routines (V1.0) and the V1.1 restore routines
do not change the current setting when reading a V1.0 snapshot.

   The PETROM module

   Version numbers: Major 1, Minor 0

Type    Name                          Description                          
BYTE    CONFIG                        Bit 0: 1= $9*** ROM included. Bit    
                                      1: 1= $A*** ROM included. Bit 2: 1=  
                                      $B*** ROM included. Bit 3: 1=        
                                      $e900-$efff ROM included             
ARRAY   KERNAL                        4k KERNAL ROM image $f000-$ffff      
ARRAY   EDITOR                        2k EDITOR ROM image $e000-$e7ff      
ARRAY   CHARGEN                       2k CHARGEN ROM image                 
ARRAY   ROM9                          4k $9*** ROM image (if CONFIG & 1)   
ARRAY   ROMA                          4k $A*** ROM image (if CONFIG & 2)   
ARRAY   ROMB                          4k $B*** ROM image (if CONFIG & 4)   
ARRAY   ROMC                          4k $C*** ROM image                   
ARRAY   ROMD                          4k $D*** ROM image                   
ARRAY   ROME9                         7 blocks $e900-$efff ROM image (if   
                                      CONFIG & 8)                          


File: vice.info,  Node: CBM-II memory module,  Prev: PET memory module,  Up: Module formats

CBM-II memory module
....................

   The CBM-II memory module actually consists of two modules.  The
"CBM2MEM" module is mandatory and contains the RAM dump.  The "CBM2ROM"
module is optional and contains a dump of the ROM images.

   The size of the CBM-II memory modules differs with each different
memory configuration.  The RAM configuration is saved in the snapshot,
and restored when the snapshot is loaded.

   Version numbers: Major 1, Minor 0

   The CBM2MEM module

Type    Name                          Description                          
UBYTE   MEMSIZE                       Memory size in 128k blocks (1=128k,  
                                      2=256k, 4=512k, 8=1024k)             
UBYTE   CONFIG                        Bit 0 = $f0800-$f0fff RAM, Bit 1 =   
                                      $f1000-$f1fff RAM, Bit 2 =           
                                      $f2000-$f3fff RAM, Bit 3 =           
                                      $f4000-$f5fff RAM, Bit 4 =           
                                      $f6000-$f7fff RAM, Bit 5 =           
                                      $fc000-$fcfff RAM                    
UBYTE   HWCONFIG                      Bit 0: 0 = CRTC, 1 = VIC-II video    
                                      chip (Basically the destinction      
                                      between C500 and C600/700)           
UBYTE   EXECBANK                      CPUs execution bank register         
UBYTE   INDBANK                       CPUs indirection bank register       
ARRAY   SYSRAM                        2k system RAM $f0000-$f07ff          
ARRAY   VIDEO                         2k video RAM $fd000-$fd7ff           
ARRAY   RAM                           RAM dump, size according to MEMSIZE  
ARRAY   RAM08                         if memsize < 1M and CONFIG & 1 : 2k  
                                      RAM $f0800-$f0fff                    
ARRAY   RAM1                          if memsize < 1M and CONFIG & 2 : 4k  
                                      RAM $f1000-$f1fff                    
ARRAY   RAM2                          if memsize < 1M and CONFIG & 4 : 8k  
                                      RAM $f2000-$f3fff                    
ARRAY   RAM4                          if memsize < 1M and CONFIG & 8 : 8k  
                                      RAM $f4000-$f5fff                    
ARRAY   RAM6                          if memsize < 1M and CONFIG & 16 :    
                                      8k RAM $f6000-$f7fff                 
ARRAY   RAMC                          if memsize < 1M and CONFIG & 32 :    
                                      4k RAM $fc000-$fcfff                 

   The RAM* arrays are only saved if the RAM itself is less than 1M.
If the memory size is 1M then those areas are taken from the bank 15
area of the normal RAM.

   The CBM2ROM module

Type    Name                          Description                          
UBYTE   CONFIG                        Bit 1: 1= $1*** ROM image included.  
                                      Bit 2: 1= $2000-$3fff ROM image      
                                      included. Bit 3: 1= $4000-$5fff ROM  
                                      image included. Bit 4: 1=            
                                      $6000-$7fff ROM image included.      
ARRAY   KERNAL                        8 KERNAL ROM image ($e000-$efff)     
ARRAY   BASIC                         BASIC ROM image ($8000-$bfff)        
ARRAY   CHARGEN                       4k CHARGEN ROM image                 
ARRAY   ROM1                          4k cartridge ROM image for $1***     
                                      (if CONFIG & 2)                      
ARRAY   ROM2                          8k cartridge ROM image for           
                                      $2000-$3fff (if CONFIG & 4)          
ARRAY   ROM4                          8k cartridge ROM image for           
                                      $4000-$5fff (if CONFIG & 8)          
ARRAY   ROM6                          8k cartridge ROM image for           
                                      $6000-$7fff (if CONFIG & 16)         


File: vice.info,  Node: Monitor,  Next: c1541,  Prev: Snapshots,  Up: Top

Monitor
*******

   Every VICE emulator has a complete built-in monitor, which can be
used to examine, disassemble and assemble machine language programs, as
well as debug them through breakpoints.  It can be activated by using
the "Activate monitor" command (left button menu).  Notice that you have
to run the emulator from a terminal emulation program (such as `rxvt'
or `xterm') in order to use the monitor.

   Warning: this version of the monitor is still under construction,
and some of the features are not fully working yet.

* Menu:

* Terminology::
* Machine state commands::
* Memory commands::
* Assembly commands::
* Checkpoint commands::
* General commands::
* Disk commands::
* Command file commands::
* Label commands::
* Miscellaneous commands::


File: vice.info,  Node: Terminology,  Next: Machine state commands,  Prev: Monitor,  Up: Monitor

Terminology
===========

`address_space'
     This refers to the range of memory locations and a set of
     registers.  This can be the addresses available to the computer's
     processor, the disk drive's processor or a specific memory
     configuration of one of the mentioned processors.

`register'
     One of the following: program counter (PC), stack pointer (SP),
     accumulator (A), X register (X), or Y register (Y).

`address'
     A specific memory location in the range $0000 to $FFFF.

`address_range'
     Two addresses.  If the second address is less than the first, the
     range is assumed to wraparound from $FFFF to $0000.  Both
     addresses must be in the same address space.

`address_opt_range'
     An address or an address range.

`prompt'
     The prompt has the format [x:y].  If x is -, memory reads from the
     monitor do not have side effects.  Otherwise, x is S.  The second
     part of the prompt, y, shows the default address space.

`checkpoint'
     The monitor has the ability to setup triggers that perform an
     action when a specified situation occurs.  There are three types
     of checkpoints; breakpoints, tracepoints and watchpoints.

`breakpoint'
     A breakpoint is triggered based on the program counter.  When it is
     triggered, the monitor is entered.

`tracepoint'
     Like breakpoints, a tracepoint is triggered based on the program
     counter.  Instead of entering the monitor, the program counter is
     printed and execution continues.

`watchpoint'
     Watchpoints are triggered by a read and/or write to an address.
     When a watchpoint is triggered, the monitor is entered.

`<...>'
     A data type.

`*'
     Zero or more occurrences.

`[...]'
     An optional argument.


File: vice.info,  Node: Machine state commands,  Next: Memory commands,  Prev: Terminology,  Up: Monitor

Machine state commands
======================

`goto <address>'
     Change the PC to address and continue execution.

`io'
     Nothing yet.  Will display VIC/VIA/CIA/SID registers.

`next [<count>]'
     Advance to the next instruction.  Subroutines are treated as a
     single instruction.

`registers [<reg_name> = <number> [, <reg_name> = <number>]*]'
     Assign respective registers.  With no parameters, display register
     values.

`return'
     Continues execution  and returns to the monitor just
     before(after?) the next RTS or RTI is executed.

`step [<count>]'
     Single step through instructions.  An optional count allows
     stepping more than a single instruction at a time.


File: vice.info,  Node: Memory commands,  Next: Assembly commands,  Prev: Machine state commands,  Up: Monitor

Memory commands
===============

`compare <address_range> <address>'
     Compare memory from the source specified by the address range to
     the destination specified by the address.  The regions may
     overlap.  Any values that miscompare are displayed using the
     default displaytype.

`fill <address_range> <data_list>'
     Fill memory in the specified address range with the data in
     <data_list>.  If the size of the address range is greater than the
     size of the data_list, the data_list is repeated.

`hunt <address_range> <data_list>'
     Hunt memory in the specified address range for the data in
     <data_list>.  If the data is found, the starting address of the
     match is displayed.  The entire range is searched for all possible
     matches.

`i <address_opt_range>'
     Display memory contents as PETSCII text.

`m [<data_type>] [<address_opt_range>]'
     Display the contents of memory.  If no datatype is given, the
     default is used.  If only one address is specified, the length of
     data displayed is based on the datatype.  If no addresses are
     given, the 'dot' address is used.

`mc [<data_type>] [<address_opt_range>]'
     Display the contents of memory as character data.  If only one
     address is specified, only one character is displayed.  If no
     addresses are given, the "dot" address is used.

`ms [<data_type>] [<address_opt_range>]'
     Display the contents of memory as sprite data.  If only one
     address is specified, only one sprite is displayed.  If no
     addresses are given, the "dot" address is used.

`move <address_range> <address>'
     Move memory from the source specified by the address range to the
     destination specified by the address.  The regions may overlap.

`> [<address>] <data_list>'
     Write the specified data at `address'.


File: vice.info,  Node: Assembly commands,  Next: Checkpoint commands,  Prev: Memory commands,  Up: Monitor

Assembly commands
=================

`a <address> [ <instruction> [: <instruction>]* ]'
     Assemble instructions to the specified address.  If only one
     instruction is specified, enter assembly mode (enter an empty line
     to exit assembly mode).

`d [<address> [<address>]]'
     Disassemble instructions.  If two addresses are specified, they
     are used as a start and end address.  If only one is specified, it
     is treated as the start address and a default number of
     instructions are disassembled.  If no addresses are specified, a
     default number of instructions are disassembled from the dot
     address.


File: vice.info,  Node: Checkpoint commands,  Next: General commands,  Prev: Assembly commands,  Up: Monitor

Checkpoint commands
===================

`break [<address> [if <cond_expr>] ]'
     This command allows setting a breakpoint or listing the current
     breakpoints.  If no address is given, the currently valid
     checkpoints are printed.  If an address is given, a breakpoint is
     set for that address and the breakpoint number is printed.  A
     conditional expression can also be specified for the breakpoint.
     For more information on conditions, see the CONDITION command.

`enable <checknum>'

`disable <checknum>'
     Each checkpoint can be enabled or disabled.  This command allows
     changing between these states.

`command <checknum> "<command>"'
     When checkpoint `checknum' is hit, the specified command is
     executed by the monitor.  Note that the `x' command is not yet
     supported as a command argument.

`condition <checknum> if <cond_expr>'
     Each time the specified checkpoint is examined, the condition is
     evaluated.  If it evalutes to true, the checkpoint is activated.
     Otherwise, it is ignores.  If registers are specified in the
     expression, the values used are those at the time the checkpoint
     is examined, not when the condition is set.

`delete <checknum>'
     Delete the specified checkpoint.

`ignore <checknum> [<count>]'
     Ignore a checkpoint a given number of crossings.  If no count is
     given, the default value is 1.

`trace [address [address]]'
     This command is similar to the `break' command except that it
     operates on tracepoints.  A tracepoint differs from a breakpoint
     by not stopping execution but simply printing the PC, giving the
     user an execution trace.  The second optional address can be used
     to specify the end of an range of addresses to be traced.

`watch [address [address]]'
     This command is similar to the previous two commands except that it
     operates on watchpoints.  A watchpoint differs from the others by
     stopping on a read and/or write to an address or range of
     addresses.  If no addresses are given, a list of all the
     watchpoints is printed.


File: vice.info,  Node: General commands,  Next: Disk commands,  Prev: Checkpoint commands,  Up: Monitor

General commands
================

`cd <directory>'
     Change the working directory.

`device [c:|d:]'
     Set the default memory device to either the computer (`c:') or the
     disk (`d:').

`radix [H|D|O|B]'
     Set the default radix to hex, decimal, octal, or binary.  With no
     argument, the current radix is printed.

`sidefx [on|off|toggle]'
     Control how monitor generated reads affect memory locations that
     have read side-effects.  If the argument is 'on' then reads may
     cause side-effects.  If the argument is 'off' then reads don't
     cause side-effects.  If the argument is 'toggle' then the current
     mode is switched.  No argument displays the current state.

`system <system command>'
     Nothing yet.


File: vice.info,  Node: Disk commands,  Next: Command file commands,  Prev: General commands,  Up: Monitor

Disk commands
=============

`br <track> <sector> [<address>]'
     Read the block at the specified track and sector.  If an address is
     specified, the data is loaded into memory.  If no address is
     given, the data is displayed using the default datatype.

`bw <track> <sector> <address>'
     Write a block of data at `address' to the specified track and
     sector of disk in drive 8.

`@<disk command>'
     Perform a disk command on the currently attached disk image on
     drive 8.  The specified disk command is sent to the drive's
     channel #15.

`load "<filename>" <address>'
     Load the specified file into memory at the specified address.

`save "<filename>" <address1> <address2>'
     Save the memory from address1 to address2 to the specified file.


File: vice.info,  Node: Command file commands,  Next: Label commands,  Prev: Disk commands,  Up: Monitor

Command file commands
=====================

`playback "<filename>"'
     Monitor commands from the specified file are read and executed.
     This command stops at the end of file or when a STOP command is
     read.

`record "<filename>"'
     After this command, all commands entered are written to the
     specified file until the STOP command is entered.

`stop'
     Stop recording commands.  See `record'.


File: vice.info,  Node: Label commands,  Next: Miscellaneous commands,  Prev: Command file commands,  Up: Monitor

Label commands
==============

`add_label <address> <label>'
     Map a given address to a label.  This label can be used when
     entering assembly code and is shown during disassembly.

`delete_label [<memspace>] <label>'
     Remove the specified label from the label tables.  If no memory
     space is checked, all tables are checked.

`load_labels [<memspace>] "<filename>"'
     Load a file containing a mapping of labels to addresses.  If no
     memory space is specified, the default readspace is used.

`save_labels [<memspace>] "<filename>"'
     Save labels to a file.  If no memory space is specified, all of the
     labels are saved.

`show_labels [<memspace>]'
     Display current label mappings.  If no memory space is specified,
     show all labels.


File: vice.info,  Node: Miscellaneous commands,  Prev: Label commands,  Up: Monitor

Miscellaneous commands
======================

`exit'
     Leave the monitor and return to execution.

`print <expression>'
     Evaluate the specified expression and output the result.

`quit'
     Exit the emulator immediately.

`~ <number>'
     Display the specified number in decimal, hex, octal and binary.


File: vice.info,  Node: c1541,  Next: File formats,  Prev: Monitor,  Up: Top

c1541
*****

   VICE is provided with a complete stand-alone disk image maintenance
utility, called `c1541'.

   You can either invoke it from the command line or from within one of
the VICE emulators, using the "Run c1541" command which will open a new
`xterm' window with a running `c1541' in it.

   The syntax is:

     c1541 [IMAGE1 [IMAGE2]] [COMMAND1 COMMAND2 ... COMMANDN]

   `IMAGE1' and `IMAGE2' are disk image names that can be attached
before `c1541' starts.  `c1541' can handle up to two disk images at the
same time by using two virtual built-in drives, numbered `8' and `9';
`IMAGE1' (if present) is always attached to drive `8', while `IMAGE2'
is attached to drive `9'.

   `COMMAND's specified on the command-line all begin with the minus
sign (`-'); if present, `c1541' executes them in the same order as they
are on the command line and returns a zero error code if they were
successful.  If any of the `COMMAND's fails, `c1541' stops and returns
a nonzero error code.

   If no `COMMAND's are specified at all, `c1541' enters interactive
mode, where you can type commands manually.  Commands in interactive
mode are the same as commands in batch mode, but do not require a
leading `-'.  As with the monitor, file name completion and command
line editing with history are provided via GNU `readline'.  Use the
command `quit' or press `C-d' to exit.

* Menu:

* c1541 file specification::
* c1541 quoting::
* c1541 commands and options::
* c1541 executing shell commands::


File: vice.info,  Node: c1541 file specification,  Next: c1541 quoting,  Prev: c1541,  Up: c1541

Specifying files in c1541
=========================

   When accessing CBM DOS files (i.e. files that reside on disk images),
c1541 uses a special syntax that lets you access files on both drive 8
and 9.  If you prepend the file name with `@8:' or `@9:', you will
specified that file is to be found or created on drive 8 and 9,
respectively.

   For instance,

     @8:somefile

   will name file named `somefile' on unit 8, while

     @9:somefile

   will name file named `somefile' on unit 9.


File: vice.info,  Node: c1541 quoting,  Next: c1541 commands and options,  Prev: c1541 file specification,  Up: c1541

Using quotes and backslashes
============================

   You can use quotes (`"') in a command to embed spaces into file
names.  For instance,

     read some file

   will read file `some' from the disk image and write it into the file
system as `file', while

     read "some file"

   will copy `some file' into the file system, with the name `some
file'.

   The backslash character (`\') has a special meaning too: it lets you
literally insert the following character no matter what it is.  For
example,

     read some\ file

   will copy file `some file' into the file system, while

     read some\ file this\"file

   will copy `some file' into the file system with name `this"file'
(with an embedded quote).

