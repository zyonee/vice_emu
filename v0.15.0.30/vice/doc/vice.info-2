This is Info file vice.info, produced by Makeinfo version 1.68 from the
input file vice.texi.

START-INFO-DIR-ENTRY
* VICE: (vice).        VICE, the Versatile Commodore Emulator.
END-INFO-DIR-ENTRY

   VICE Manual

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.


File: vice.info,  Node: Palette files,  Prev: Keymap files,  Up: System files

Palette files
=============

   "Palette files" are used to specify the colors used in the
emulators.  They are made up of lines like the following:

     RED GREEN BLUE DITHER

   where `RED', `GREEN' and `BLUE' are hexadecimal values ranging from
0 to FF and specifying the amount of red, green and blue you want for
each color and `DITHER' is a 4-bit hexadecimal number specifying the
pattern you want when rendering on a B/W display.

   You have to include as many lines as the number of colors the
emulated machine has, and the order of the lines must respect the one
used in the machine (so the N'th line must contain the specifications
for color N - 1 in the emulated machine).

   Lines starting with the `#' sign are completely ignored.  This is
useful for adding comments (such as color names) within the palette
file.

   For example, the default PET palette file (which has only two
colors, 0 for background and 1 for foreground), looks like the
following:

     #
     # VICE Palette file
     #
     # Syntax:
     # Red Green Blue Dither
     #
     
     # Background
     00 00 00 0
     
     # Foreground
     00 FF 00 F


File: vice.info,  Node: Basics,  Next: Settings and resources,  Prev: System files,  Up: Top

Basic operation
***************

   This section describes the basic things you can do once the emulator
has been fired up.

* Menu:

* Emulation window::            The window the emulator runs in.
* Menus::                       Using emulator menus.
* Help::                        Getting help if you are stuck.
* File Selector::               Selecting files interactively.
* Disk and tape images::        Using virtual disks and tapes.
* Reset::                       Resetting the virtual machines.


File: vice.info,  Node: Emulation window,  Next: Menus,  Prev: Basics,  Up: Basics

The emulation window
====================

   When the emulator is run, the screen of the emulated machine is
displayed in a standard X Window which we will call the "emulation
window".  This window will be updated in real time, displaying the same
contents that a real monitor or TV set would.

   Below the emulation window there is an area which is used to display
information about the state of the emulator; we will call this area the
"status bar".

   On the extreme left of the status bar, there is a "performance
meter".  This displays the current relative speed of the emulator (as a
percentage) and the update frequency (in frames per second).  All the
machines emulated are PAL, so the update frequency will be 50 frames
per second if your system is fast enough to allow emulation at the
speed of the real machine.

   On the extreme right of the status bar, there is a "drive status
indicator".  This is only visible if the hardware-level ("True") 1541
emulation is turned on.  In that case, the drive status indicator will
contain a rectangle emulating the drive LED and will display the current
track position of the drive's read/write head.


File: vice.info,  Node: Menus,  Next: Help,  Prev: Emulation window,  Up: Basics

Using the menus
===============

   It is possible to execute some commands and change emulation
parameters while the emulator is running: when the pointer is over the
emulation window, two menus are available by pressing either the left
or right mouse buttons.  The left mouse button will open the "command
menu" from which several emulation-related commands can be executed;
the right mouse button will open the "settings menu" from which
emulation parameters can be changed.  The basic difference between the
command and the settings menu is that, while commands have only effect
on the current session, settings can be saved and later used with the
"Save settings" and "Load settings" right-button menu items,
respectively.  "Restore default settings" restores the factory defaults.
*Note Settings and resources:: for more information about how settings
work in VICE.

   Sometimes commands can be reached via "shortcuts" or "hotkeys",
i.e., it is possible to execute them by pressing a sequence of keys
instead of going through the menu with the mouse.  Where shortcuts
exist, they are displayed in parentheses at the right edge of the menu
item.  In VICE, all shortcuts must begin with the <Meta> or <Alt> key.
So, for example, to attach a disk image to drive #8 (the corresponding
menu item displays "M-8"), you have to press the <Meta> (or <Alt>) and
then <8>.

   Note that no other key presses are passed on to the emulated machine
while either <Meta> or <Alt> are held down.


File: vice.info,  Node: Help,  Next: File Selector,  Prev: Menus,  Up: Basics

Getting help
============

   At any time, if you get stuck or do not remember how to perform a
certain action, you can use the "Browse manuals" command (left button
menu).  This will popup a browser and open the HTML version of this
documentation.  Notice that this requires VICE to be properly (and
fully) installed with a `make install'.

   The browser can be specified via the `HTMLBrowserCommand' string
resource (*note Settings and resources::. for information about
resources).  Every `%s' in the string will be replaced with a URL to
the VICE HTML pages.


File: vice.info,  Node: File Selector,  Next: Disk and tape images,  Prev: Help,  Up: Basics

Using the file selector
=======================

   In those situations where it is necessary to specify a file name, all
of the VICE emulators will pop up a file selector window allowing you
to select or specify a file interactively.

   To the left of the file selector, there is a list of ancestor
directories: by clicking on them, you can ascend the directory tree.  To
the right, there is a list of the files in the current directory; files
can be selected by clicking on them.  If you click on a directory, that
directory becomes the current one; if you click on an ordinary file, it
becomes the active selection.

   At the top, there is a "directory box", with the complete path of
the current directory, and a "file name box", with the name of the
currently selected file.  At the bottom there are two buttons: "OK"
confirms the selected file and "Cancel" abandons the file selector
without cancelling the operation.

   It is also possible to specify what files you want to show in the
file selector by writing an appropriate shell-like pattern in the
directory box; e.g., `~/*.[dx]64' will only show files in the home
directory whose name ends with either `.d64' or with `.x64'.


File: vice.info,  Node: Disk and tape images,  Next: Reset,  Prev: File Selector,  Up: Basics

Using disk and tape images
==========================

   The emulator is able to emulate disk drives and (read-only) tape
recorders if provided with suitable "disk images" or "tape images".  An
"image" is a raw dump of the contents of the media, and must be
"attached" before the emulator can use it.  "Attaching" a disk or tape
image is like "virtually" inserting a diskette or a cassette into the
disk drive or the tape recorder: once an image is attached, the
emulator is able to use it as a storage media.

   There are five commands (in the left button menu) that deal with disk
and tape images:

   * Attach Disk Image

   * Detach Disk Image

   * Attach Tape Image

   * Detach Tape Image

   * Smart-attach a file

   The first four commands are used to insert and remove the virtual
disks and cassettes from the respective units.  On the other hand, the
last commands tries to guess the type of the image you are attaching
from its name and size, and attaches it to the most reasonable device.

   Supported formats are `D64' and `X64' for disk images (devices 8, 9
and 10) and `T64' for tape images.  Notice that `T64' support is
*read-only*, and that the cassette is automatically rewound when you
reach its end.

   Another important feature is that raw Commodore BASIC binary files
and .P00 files can be attached as tapes.  As you can autostart a tape
image when it is attached (*note Autostart::.), this allows you to
autostart these particular files as well.

   You can attach a disk for which you do not have write permissions:
when this happens, the 1541 emulator will emulate a write-protected
disk.  This is also useful if you want to prevent certain disk images
from being written to; in the latter case, just remove the write
permission for that file, e.g., by doing a `chmod a-w'.

* Menu:

* Previewing contents::         Looking into the image before attaching it.
* Autostart::                   Starting a program automagically.
* Compressed files::            Dealing with compressed files.
* Zipcode and Lynx::            Using Zipcoded ([1-4]!*) and Lynx files.


File: vice.info,  Node: Previewing contents,  Next: Autostart,  Prev: Disk and tape images,  Up: Disk and tape images

Previewing the image contents
-----------------------------

   It is possible to examine the directory of a disk or tape image
before attaching it.  Just press the "Contents" button in the file
selector window and a new window will pop up with the contents of the
selected image.

   Notice that this function automatically translates the directory from
PETSCII to ASCII; but, due to differences in the two encodings, it is
not always possible to translate all the characters, so you might get
funny results when "weird" characters such as the semi-graphical ones
are being used.


File: vice.info,  Node: Autostart,  Next: Compressed files,  Prev: Previewing contents,  Up: Disk and tape images

"Autostarting" an image
-----------------------

   If you want to reset the machine and run the first program on a
certain image without typing any commands at the Commodore BASIC
prompt, you can use the "Autostart" button in the file selector window
after selecting a proper disk or tape image file.

   Notice that, if true drive emulation is turned on, it will be turned
off before running the program and then turned on again after it has
been loaded.  This way, you get the maximum possible speed while
loading the file, but you do not lose compatibility once the program
itself is running.

   This method is not completely safe, because some autostarting methods
might cause the true drive emulation not to be turned on again.  In such
cases, the best thing to do is to disable kernal traps (which will cause
true drive emulation to be always kept turned on), or to manually load
the program with true drive emulation turned on.


File: vice.info,  Node: Compressed files,  Next: Zipcode and Lynx,  Prev: Autostart,  Up: Disk and tape images

Using compressed files
----------------------

   It is also possible to attach disk or tape images that have been
compressed through various algorithms; compression formats are
identified from the file extension.  The following formats are supported
(the expected file name extension is in parenthesis):

   * GNU Zip (`.gz' or `.z');

   * BZip version 2 (`.bz2');

   * PkZip (`.zip');

   * GNU Zipped TAR archives (`.tar.gz', `.tgz');

   * Zoo (`.zoo').

   PkZip, `tar.gz', `lha' and `zoo' support is *read-only* and always
uses the *first* `T64' or `D64' file in the archive.  So archives
containing multiple files will always be handled as if they contain
only a single file.


File: vice.info,  Node: Zipcode and Lynx,  Prev: Compressed files,  Up: Disk and tape images

Using Zipcode and Lynx images
-----------------------------

   Since version 0.15, the VICE emulators have been able to attach disks
packed with Zipcode or Lynx directly, removing the need to manually
convert them into `D64' or `X64' files with `c1541'.  This is achieved
by automatically invoking `c1541', letting it decode the file into a
temporary image and attaching the resulting temporary image read-only.
For this to work, the directory containing `c1541' must be in your
`PATH'.

   This uses the `-unlynx' and `-zcreate' options of `c1541' (*note
c1541 commands and options::.); these commands are not very reliable
yet, and could fail with certain kinds of Lynx and Zipcode images (for
example, they cannot deal with `DEL' files properly).  So please use
them with caution.

   Lynx files usually come as `.lnx' files which are unpacked into
single disk images.  On the other hand, Zipcode files do not have a
particular extension (although `.z64' is sometimes used), and represent
a disk by means of component files, named as follows:

   * `1!NAME'

   * `2!NAME'

   * `3!NAME'

   * `4!NAME'

   If you attach as a disk image (or smart-attach) any one of these
files, the emulator will simply pick up the other three (by examining
the name) and then build a disk image using all four.


File: vice.info,  Node: Reset,  Prev: Disk and tape images,  Up: Basics

Resetting the machine
=====================

   You can reset the emulated machine at any time by using the "Reset"
command from the command menu.  There are two types of reset:

   * "soft reset", which simply resets the CPU and all the other chips;

   * "hard reset", which also clears up the contents of RAM.

   A "soft reset" is the same as a hardware reset achieved by pulling
the RESET line down; a "hard reset" is more like a power on/power off
sequence in that it makes sure the whole RAM is cleared.

   It is possible that a soft reset may not be enough to take the
machine to the OS initialization sequence: in such cases, you will have
to do a hard reset instead.

   This is especially the case for the CBM-II emulators.  Those machines
examine a memory location and if they find a certain "magic" value they
only do what you know from the C64 as `Run/Stop-Restore'.  Therefore,
to really reset a CBM-II use hard reset.


File: vice.info,  Node: Settings and resources,  Next: Machine-specific features,  Prev: Basics,  Up: Top

Settings and resources
**********************

   In the VICE emulators, all the settings are stored in entities known
as called "resources".  Each resource has a name and a value which may
be either an integer or a string.  Integer values are often used as
boolean values with the usual convention of using zero for "false" and
any other value for "true".

   Resource values can be changed via the right-button menu (the
"settings" menu), via command-line options or via the "resource file".

   The "resource file" is a human-readable file containing resource
values: it is called `.vicerc' and is stored in the user's home
directory.  It is possible to dump the current values of the resources
into that file or load the values stored into that file as the current
values, at any time.  This is achieved with the "Save settings" and
"Load settings" right menu items.  A third menu item, "Restore Default
Settings", can be used to reset all the values to the factory defaults.

   A special resource, `SaveResourcesOnExit', if set to a non zero
value, causes the emulator to ask you if you want to save the current
(changed) settings before exiting, and can be toggled with the "Save
settings on exit" command from the right-button menu.

   Notice that not all the resources can be changed from the menus;
some of them can only be changed by manually modifying the resource
file or by using command-line options.

* Menu:

* Resource files::              Format of resource files.
* Resources and command-line::  Specifying settings from the
                                command-line

* Performance settings::        Settings that affect speed of execution.
* Video settings::              Settings dealing with the video output.
* Keyboard settings::           Settings relative to the keyboard emulation.
* Sound settings::              Settings that control audio playback
* Drive settings::              Settings that control disk-drive emulation.
* Peripheral settings::         Settings for emulated external devices.
* RS232 settings::              Settings for the RS232 emulation.
* Misc settings::               Other settings.


File: vice.info,  Node: Resource files,  Next: Resources and command-line,  Prev: Settings and resources,  Up: Settings and resources

Format of resource files
========================

   A resource file is made up of several sections; sections have the
purpose of separating the resources of a certain emulator from the ones
of the other emulators.  A section starts with the name of an emulator
in brackets (e.g., `[C64]') and ends when another section starts or
when the file ends.

   Every line in a section has the following format:

     RESOURCE=VALUE

   where `RESOURCE' is the name of a resource and `VALUE' is its
assigned value.  Resource names are case-sensitive and resource values
are either strings or integers.  Strings must start and end with a
double quote character (`"'), while integers must be given in decimal
notation.

   Here is an example of a stripped-down `.vicerc' file:

     [VIC20]
     HTMLBrowserCommand="netscape %s"
     SaveResourcesOnExit=0
     FileSystemDevice8=1
     FSDevice8ConvertP00=1
     FSDevice8Dir="/home/ettore/cbm/stuff/vic20p00"
     FSDevice8SaveP00=1
     FSDevice8HideCBMFiles=1
     [C64]
     HTMLBrowserCommand="netscape %s"
     SaveResourcesOnExit=1
     FileSystemDevice8=1
     FSDevice8ConvertP00=1
     FSDevice8Dir="/home/ettore/cbm/stuff/c64p00"
     FSDevice8SaveP00=1
     FSDevice8HideCBMFiles=1

   Notice that, when resource values are saved with "Save settings", the
emulator only modifies its own section, leaving the others unchanged.


File: vice.info,  Node: Resources and command-line,  Next: Performance settings,  Prev: Resource files,  Up: Settings and resources

Using command-line options to change resources
==============================================

   Resources can also be changed via command-line options.

   Command-line options always override the defaults from `.vicerc',
and their assignments last for the whole session.  So, if you specify a
certain command-line option that changes a certain resource from its
default value and then use "Save Settings", the value specified with
the command-line option will be saved back to the resource file.

   Command-line options can begin with with a minus sign (`-') or with
a plus sign (`+').  Options beginning with a minus sign may require an
additional parameter, while the ones beginning with the plus sign never
require one.

   Moreover, options beginning with a plus sign always have a
counterpart with the same name, but with a minus sign; in that case,
the option beginning with a minus sign is used to *enable* a certain
feature, while the one beginning with a plus sign is used to *disable*
the same feature (this is an X11 convention).  For example, `-mitshm'
enables support of MITSHM, while `+mitshm' disables it.


File: vice.info,  Node: Performance settings,  Next: Video settings,  Prev: Resources and command-line,  Up: Settings and resources

Performance settings
====================

   It is possible to control the emulation speed by using the "Maximum
speed" menu item in the right-button menu.  The default setting is
`100', which causes the emulation to never run faster than the real
machine.  A higher value allows the emulator to run faster, a lower one
may force it to run slower.  The setting "No limit" means to run as
fast as possible, without limiting speed.

   It is also possible to control the emulator's rate of frame update
using the "Refresh rate" setting; the value ranges from "1/1" (update
1/1 of the frames of the real machine, that is 50 frames per second) to
"1/10" (update 1 every 10 frames) and can be changed via the "Refresh
Rate" submenu.  The "Auto" setting means to dynamically adapt the
refresh rate to the current speed of the host machine, making sure the
maximum speed specified by the via "Maxium speed" is always reached if
possible.  In any case, the refresh rate will never be worse than 1/10
if this option is specified.

   Note that you cannot simultaneously specify "Auto" as the refresh
rate and "No limit" as the maximum speed..

   Moreover, a special "warp speed" mode is provided and can be toggled
with the "Enable Warp Mode" menu item.  If this mode is enabled, it
will cause the emulator to disable any speed limit, turn sound emulation
off and use a 1/10 refresh rate, so that it will run at the maximum
possible speed.

* Menu:

* Performance resources::
* Performance options::


File: vice.info,  Node: Performance resources,  Next: Performance options,  Prev: Performance settings,  Up: Performance settings

Performance resources
---------------------

`Speed'
     Integer specifying the maximum relative speed, as a percentage.
     `0' stands for "no limit".

`RefreshRate'
     Integer specifying the refresh rate; a value of `n' specifies a
     refresh rate of 1/`n'.  A value of `0' enables automatic frame
     skipping.

`WarpMode'
     Booolean specifying whether "warp mode" is turned on or not.


File: vice.info,  Node: Performance options,  Prev: Performance resources,  Up: Performance settings

Performance command-line options
--------------------------------

`-speed VALUE'
     Specifies the maximum speed as a percentage.  `0' stands for "no
     limit".  (Same as setting the `Speed' resource.)

`-refresh VALUE'
     Specifies refresh rate; a value of `n' specifies a refresh rate of
     1/`n'.  A value of `0' enables automatic frame skipping.  (Same as
     setting the `RefreshRate' resource.)

`-warp'
`+warp'
     Enables/disables warp mode (`WarpMode=1', `WarpMode=1').


File: vice.info,  Node: Video settings,  Next: Keyboard settings,  Prev: Performance settings,  Up: Settings and resources

Video settings
==============

   The following right-button menu items control the video output:

   * "Video Cache" enables a video cache that can speed up the emulation
     when little graphics activity is going on; it is especially useful
     when you run the emulator on a networked X terminal as it can
     reduce the network bandwidth required.  However, this setting can
     actually make the emulator slower when there is little graphics
     activity and the amount of work needed to maintain the cache is
     greater than the amount of work that would be wasted by not using
     it (if any).

   * "Double Size" toggles "double-size mode", which makes the
     emulation window twice as big.  When emulating a 80-column PET,
     only the height is doubled, so that the aspect ratio is closer to
     that of the real thing.

   * "Double Scan" toggles "double-scan mode", which causes the
     emulator to draw only odd lines when running in double-size mode
     (this saves some CPU time and also makes the emulation window look
     more like an old monitor).

   * `Use XSync()" causes the emulator to call the X11 function
     `XSync()' before updating the emulation window: this might be
     necessary on low-end systems to prevent it from consuming so many
     system resources that it becomes impossible for the user to
     interact with it.

* Menu:

* Video resources::
* Video options::


File: vice.info,  Node: Video resources,  Next: Video options,  Prev: Video settings,  Up: Video settings

Video resources
---------------

   The following resources affect the screen emulation:

`VideoCache'
     Boolean specifying whether the video cache is turned on.

`DoubleSize'
     Boolean specifying whether double-size mode is turned on.

`DoubleScan'
     Boolean specifying whether double-scan mode is turned on.

`UseXSync'
     Boolean specifying whether `XSync()' is called after updating the
     emulation window.

`MITSHM'
     Integer specifying whether VICE should try to use the shared memory
     extensions (MITSHM) when starting up.  The shared memory
     extensions make things a lot faster but might not be available on
     your system.  You will not be able to use these extensions if you
     are sitting at an X terminal while running the emulator on a
     remote machine across a network.  Valid values are: 0 = do not use
     MITSHM, 1 = do use MITSHM, -1 = try to autodetect availability on
     startup (default).  The last is a simple test if the emulator runs
     across a network and if so disables MITSHM (If you have problems
     with this test please report it).

`PrivateColormap'
     Boolean specifying whether VICE should install a private colormap
     at startup.  This makes sense for 8-bit displays that could run
     out of colors if other color-hungry applications are running at
     the same time.

`DisplayDepth'
     Integer specifying the depth of the host display.  The value `0'
     (the default) causes the emulator to autodetect it.


File: vice.info,  Node: Video options,  Prev: Video resources,  Up: Video settings

Video command-line options
--------------------------

`-vcache'
`+vcache'
     Enable/disable the video cache (`VideoCache=1', `VideoCache=0').

`-dsize'
`+dsize'
     Enable/disable the double size mode (`DoubleSize=1',
     `DoubleSize=0').

`-dscan'
`+dscan'
     Enable/disable the double scan mode (`DoubleScan=1',
     `DoubleScan=0').

`-xsync'
`+xsync'
     Enable/disable usage of `XSync()' when updating the emulation
     window (`UseXSync=1', `UseXSync=0').

`-mitshm'
`+mitshm'
     Enable/disable usage of the MITSHM extensions (`MITSHM=1',
     `MITSHM=0').

`-mitshmauto'
     Enable autodetection of MITSHM availability (`MITSHM=-1')

`-install'
`+install'
     Enable/disable installation of a private colormap
     (`PrivateColormap=1', `PrivateColormap=0').

`-displaydepth DEPTH'
     Specify the display depth (`DisplayDepth').


File: vice.info,  Node: Keyboard settings,  Next: Sound settings,  Prev: Video settings,  Up: Settings and resources

Keyboard settings
=================

   It is possible to specify whether the "positional" or "symbolic"
keyboard mapping should be used with the "Keyboard mapping type"
submenu (*note Keyboard emulation::. for an explanation of positional
and symbolic mappings).

   The keyboard settings submenu also allows you to:

   * Load custom-made positional and symbolic keymap files ("Set
     symbolic keymap file" and "Set positional keymap file").

   * Dump the current keymap to a user-defined keymap file ("Dump to
     keymap file").

* Menu:

* Keyboard resources::
* Keyboard options::


File: vice.info,  Node: Keyboard resources,  Next: Keyboard options,  Prev: Keyboard settings,  Up: Keyboard settings

Keyboard resources
------------------

`KeymapIndex'
     Integer identifying which keymap is being used; `0' indicates
     symbolic mapping, `1' positional mapping.  For the PET the even
     values represent symbolic mapping, odd positional.  Then add `0'
     for UK business keyboard or `2' for graphics keyboard.

`KeymapSymFile'
     String specifying the name of the keymap file for the symbolic
     mapping (*note Keyboard emulation::., all but PET and CBM-II).

`KeymapPosFile'
     String specifying the name of the keymap file for the positional
     mapping (*note Keyboard emulation::., all but PET and CBM-II).

`KeymapBusinessUKSymFile'
`KeymapBusinessUKPosFile'
     String specifying the name of the keymap file for the symbolic and
     positional mapping for the UK business keyboard (*note Keyboard
     emulation::., PET and CBM-II).

`KeymapGraphicsSymFile'
`KeymapGraphicsPosFile'
     String specifying the name of the keymap file for the symbolic and
     positional mapping for the graphics keyboard (*note Keyboard
     emulation::., PET only).


File: vice.info,  Node: Keyboard options,  Prev: Keyboard resources,  Up: Keyboard settings

Keyboard command-line options
-----------------------------

`-keymap N'
     Specifies which keymap is being used; `0' indicates symbolic
     mapping, `1' positional mapping (as for the `KeymapIndex'
     resource).

`-symkeymap NAME'
     Specify `NAME' as the symbolic keymap file (`KeymapSymFile').

`-poskeymap NAME'
     Specify `NAME' as the positional keymap file (`KeymapPosFile').

`-buksymkeymap NAME'
`-bukposkeymap NAME'
     Specify `NAME' as the symbolic/positional keymap file for the UK
     business keyboard (`KeymapBusinessUKSymFile',
     `KeymapBusinessUKPosFile', PET and CBM-II).

`-grsymkeymap NAME'
`-grposkeymap NAME'
     Specify `NAME' as the symbolic/positional keymap file for the
     graphics keyboard (`KeymapGraphicsSymFile',
     `KeymapGraphicsPosFile', PET only).


File: vice.info,  Node: Sound settings,  Next: Drive settings,  Prev: Keyboard settings,  Up: Settings and resources

Sound settings
==============

   The following menu items control sound output:

   * "Enable sound playback" turns sound emulation on and off.

   * "Sound synchronization" specifies the method for syncronizing the
     sound playback.  Possible settings are:
        * "Flexible", i.e., the audio renderer flexibly adds/removes
          samples to the output to smoothly adapt the playback to
          slight changes in the speed of the emulator.

        * "Adjusting" works like "flexible", but supports bigger
          differences in speed.  For example, if the emulation speed
          drops down from from 100% to 50%, audio slows down by the
          same amount too.

        * "Exact", instead, makes the audio renderer output always the
          same sounds you would hear from the real thing, without
          trying to adapt the ratio; to compensate the tolerances in
          speed, some extra frames will be skipped or added.

   * "Sample rate" specifies the sampling frequency, ranging from 8000
     to 48000 Hz (not all the sound cards and/or sound drivers can
     support all the frequencies, so actually the nearest candidate
     will be chosen).

   * "Buffer size" specifies the size of the audio buffer; the bigger
     the buffer, the longer the delay with which sounds are played.
     You should pick the smallest value your machine can handle without
     problems.

   * "Sound suspend time", will cause the audio playback to pause for
     the specified number of seconds whenever some clicking happens.
     If "Keep going" is selected, no pausing is done.

   * "Oversample" specifies an oversampling factor, from 1 to 8 times
     (warning: this eats CPU cycles!).

* Menu:

* Sound resources::
* Sound options::


File: vice.info,  Node: Sound resources,  Next: Sound options,  Prev: Sound settings,  Up: Sound settings

Sound resources
---------------

`Sound'
     Boolean specifying whether audio emulation is turned on.

`SoundSpeedAdjustment'
     Integer specifying what speed adjustment method the audio renderer
     should use.  Possible values are:
        * `0': "flexible"

        * `1': "adjusting"

        * `2': "exact"

`SoundSampleRate'
     Integer specifying the sampling frequency, ranging from 8000 to
     48000 Hz (not all the sound cards and/or sound drivers can support
     all the frequencies, so actually the nearest candidate will be
     chosen).

`SoundBufferSize'
     Integer specifying the size of the audio buffer, in milliseconds.

`SoundSuspendTime'
     Integer specifying the pause interval when audio underflows
     ("clicks") happen.  `0' means no pause is done.

`SoundOversample'
     Integer specifying the oversampling factor, ranging from `0' (no
     oversampling) to `3' (8 times oversampling).

`SoundDeviceName'
     String specifying the audio driver.

     Implemented drivers are:

        * `aix', for the IBM AIX sound driver.

        * `uss', for the Linux/FreeBSD Universal Sound System driver
          (`SoundDeviceArg' specifies the audio device, `/dev/dsp' by
          default);

        * `sgi', for the Silicon Graphics audio device (`SoundDeviceArg'
          specifies the audio device, `/dev/audio' by default);

        * `sun', for the Solaris audio device (unfinished;
          `SoundDeviceArg' specifies the audio device, `/dev/audio' by
          default).

        * `hpux', for the HP-UX audio device (unfinished;
          `SoundDeviceArg' specifies the audio device, `/dev/audio' by
          default).

        * `sdl', for the Simple DirectMedia Layer audio driver.

        * `dummy', fully emulating the SID, but not actually playing
          samples.

        * `dump', writing all the write accesses to the registers to a
          file (specified by `SoundDeviceArg', default value is
          `vicesnd.sid');

        * `speed', like `dummy' but also calculating samples (mainly
          used to evaluate the speed of the sample generator);

        * `fs', writing samples to a file (specified by
          `SoundDeviceArg'; default is `vicesnd.raw');

     These drivers will actually be present only if the VICE
     configuration script detected the corresponding devices at the
     time of compilation.

`SoundDeviceArg'
     String specifying an additional parameter for the audio driver (see
     `SoundDeviceName').


File: vice.info,  Node: Sound options,  Prev: Sound resources,  Up: Sound settings

Sound command-line options
--------------------------

`-sound'
`+sound'
     Turns sound emulation on (`Sound=1') and off (`Sound=0').

`-soundsync N'
     Specify `N' as the sound speed adjustment method
     (`SoundSpeedAdjustment').

`-soundrate RATE'
     Specifies the sound playback sample rate (`SoundSampleRate').

`-soundbufsize SIZE'
     Specifies the size of the audio buffer in milliseconds
     (`SoundBufferSize').

`-sounddev NAME'
     Specifies the name of the audio device (`SoundDeviceName').

`-soundarg ARG'
     Specifies an additional parameter for the audio device
     (`SoundDeviceArg').


File: vice.info,  Node: Drive settings,  Next: Peripheral settings,  Prev: Sound settings,  Up: Settings and resources

Drive settings
==============

   These settings are used to control the hardware-level emulation of
the drive.  When hardware-level emulation is turned on, only drives 8
and 9 are being emulated.

   The following settings affect both drives:

   * "Enable true drive emulation" enables the (slow) hardware-level
     emulation of the drives for maximum compatibility.  This must be
     turned on for any of the following settings to have effect.

   * "Drive sync factor" specifies the speed of the drive's CPU.  This
     can be used to help loading certain programs that have trouble
     with the default PAL setting (for example, programs designed for
     NTSC machines).  The ratio is calculated as follows:

          sync_factor = 65536 * clk_drive / clk_machine

     where `clk_drive' and `clk_machine' are clock speeds in MHz.  The
     menu lets you choose between the PAL and NTSC values, and also lets
     you specify whatever value you want.  Be careful when changing it,
     though, because a wrong value can break things and even corrupt
     disk images.

   The following settings, instead, are specific each drive:

   * "Drive model" specifies the model of the drive being emulated.
     *Warning:* This will reset the drive.

   * "Enable parallel cable" enables emulation of a SpeedDOS parallel
     cable; if you switch this option on and replace the original
     Commodore ROMs with SpeedDOS-compatible ones, you can speed up
     loading/saving times.

   * "Idle method" specifies which method the drive emulation should
     use to save CPU cycles in the host CPU.  There are three methods:

        * "Skip cycles": Each time the serial line is accessed by the
          C64, the drive executes all the cycles since the last time it
          ran.  If the number of elapsed cycles is larger than a
          certain value, the drive discards part of them.

        * "Trap idle": The disk drive is still emulated upon serial line
          accesses as with the previous option, but it is also always
          emulated at the end of each screen frame.  If the drive gets
          into the DOS idle loop, only pending interrupts are emulated
          to save time.

        * "No traps": Like "Trap idle", but without any traps at all.
          So basically the drive works exactly as with the real thing,
          and nothing is done to reduce the power needs of the drive
          emulation.

     The first option ("Skip cycles") is usually best for performance,
     as the drive is emulated as little as possible; on the other hand,
     you may notice sudden slowdowns (when the drive executes several
     cycles at once) and the LED status is never updated (because it
     would not be possible to do correctly so).  Moreover, if the drive
     tries to get in sync with the computer in some weird way and the
     computer does not access the serial line for a long time, it is
     possible that some cycles are discarded and the sync is lost.
     Notice that this hack will have no effect on performance if a
     program continuously reads from the IEC port, as the drive will
     have to be fully emulated in any case (some stupid programs do
     this, even when they don't actually need to use the drive).

     The second option ("Trap idle") is usually a bit slower, as at
     least interrupts are always emulated, but ensures the LED state is
     always updated correctly and always keeps the drive and the
     computer in sync.  On the other hand, if a program installs a
     non-standard idle loop in the drive, the drive CPU has to be
     emulated even when not necessary and the global emulation speed is
     then *much* slower.

   * "40-track image support" specifies how 40-track ("extended") disk
     images should be supported.  There are three possible ways:

        * "Never extend" never extends disk images at all (so if a
          program tries to write tracks beyond the 35th, it is not
          allowed to do so);

        * "Ask on extend" prompts the user as soon as a program tries
          to write tracks beyond the 35th, and the user can then choose
          whether she wants the disk image to be extended or not;

        * "Extend on access" simply extends the disk image as soon the
          program needs it, without prompting the user.

* Menu:

* Drive resources::
* Drive options::


File: vice.info,  Node: Drive resources,  Next: Drive options,  Prev: Drive settings,  Up: Drive settings

Drive resources
---------------

`DriveTrueEmulation'
     Boolean controlling whether the "true" drive emulation is turned
     on.

`Drive8Type'
`Drive9Type'
     Integers specifying the model number for drives 8 and 9.  Possible
     values are `1541', `1571', `1581' and `2031'.

`Drive8ParallelCable'
`Drive9ParallelCable'
     Booleans controlling whether the SpeedDOS-compatible cable is
     emulated or not for drives 8 and 9.

`Drive8ExtendImagePolicy'
`Drive9ExtendImagePolicy'
     Integer specifying the policy for 40-track support for drives 8
     and 9.  Possible values are `0' (never extend), `1' (ask on
     extend), `2' (extend on access).

`Drive8IdleMethod'
`Drive9IdleMethod'
     Integers specifying the idling method for the drive CPU.  Possible
     values are `0' (none), `1' (skip cycles), `2' (trap idle).  *Note
     Drive settings::.

`DriveSyncFactor'
     Integer specifying the drive's clock sync factor (*note Drive
     settings::.).  Special values `-1' and `-2' mean PAL and NTSC,
     respectively.

`DosName1541'
`DosName1571'
`DosName1581'
`DosName2031'
     Strings specifying the names of the ROM images for the drive
     emulation.


File: vice.info,  Node: Drive options,  Prev: Drive resources,  Up: Drive settings

Drive command-line options
--------------------------

`-truedrive'
`+truedrive'
     Turns true drive emulation on (`DriveTrueEmulation=1') and off
     (`DriveTrueEmulation=0'), respectively.

`-drive8type TYPE'
`-drive9type TYPE'
     Specifies the drive types for units 8 and 9, respectively.
     Possible values for `TYPE' are `1541', `1571', `1581' and `2031'.

`-parallel'
`+parallel'
`-parallel'
`+parallel'
     Turns emulation of the SpeedDOS-compatible parallel cable on
     (`DriveXParallelCable=1') and off (`DriveXParallelCable=0'),
     respectively.

`-drive8idle NUM'
`-drive9idle NUM'
     Specifies `NUM' as the idling method in drives 8 and 9,
     respectively (`Drive8IdleMethod', `Drive9IdleMethod').

`-paldrive'
     Specifies a PAL sync factor for the drive emulation
     (`DriveSyncFactor=-1').

`-ntscdrive'
     Specifies an NTSC sync factor for the drive emulation
     (`DriveSyncFactor=-2').

`-drivesync NUM'
     Specifies a generic sync factor for the drive emulation
     (`True1541SyncFactor').

`-dos1541'
`-dos1571'
`-dos1581'
`-dos2031'
     Specify the ROM names for the 1541, 1571, 1581 and 2031 emulation
     respectively.


File: vice.info,  Node: Peripheral settings,  Next: RS232 settings,  Prev: Drive settings,  Up: Settings and resources

Peripheral settings
===================

   VICE is able to support some special peripherals:

   * "file system devices", pseudo-drives accessing the Unix file
     system;

   * printers.

   These features depend on some "kernal traps" that replace the
existing routines in the original Commodore operating system with
custom-made C routines.

* Menu:

* File system device settings::  Settings for file system devices.
* Printer settings::            Settings for emulating a printer.
* No kernal traps::             Disabling kernal traps completely.


File: vice.info,  Node: File system device settings,  Next: Printer settings,  Prev: Peripheral settings,  Up: Peripheral settings

Settings for file system devices
--------------------------------

   These settings deal with the drive-like peripherals connected to the
bus of the emulated machine.  Four peripherals, numbered from 8 to 11,
are accessible; each of them provides the following settings:

   * "File system access", if enabled, allows the device to emulate a
     drive accessing a file system directory; note that when a disk
     image is attached to the same drive, the directory is no longer
     visible and the attached disk is used instead.

   * "File system directory" specifies the directory to be accessed by
     the drive.

   * "Convert P00 file names", if enabled, allows access to P00 files
     using their built-in name instead of the Unix one.

   * "Create P00 files on save", if enabled, creates P00 files (instead
     of raw CBM files) whenever a program creates a file.

   Note that, by default, all drives except 11 create P00 files on save,
while drive 11 creates Unix files.

* Menu:

* File system device resources::
* File system device options::


File: vice.info,  Node: File system device resources,  Next: File system device options,  Prev: File system device settings,  Up: File system device settings

Resources for file system devices
.................................

`FSDevice8ConvertP00'
`FSDevice9ConvertP00'
`FSDevice10ConvertP00'
`FSDevice11ConvertP00'
     Booleans specifying whether on-read support for P00 files is
     enabled on drives 8, 9, 10 and 11 respectively (on by default).

`FSDevice8SaveP00'
`FSDevice9SaveP00'
`FSDevice10SaveP00'
`FSDevice11SaveP00'
     Booleans specifying whether the drives should create P00 files
     instead of plain CBM ones (on by default for drives 8-10, off for
     11).

`FSDevice8HideCBMFiles'
`FSDevice9HideCBMFiles'
`FSDevice10HideCBMFiles'
`FSDevice11HideCBMFiles'
     Booleans specifying whether non-P00 files should be invisible to
     programs running in the emulator (do not hide by default).

`FSDevice8Dir'
`FSDevice9Dir'
`FSDevice10Dir'
`FSDevice11Dir'
     Strings specifying the directories to which drives 8, 9, 10 and 11
     have access.


File: vice.info,  Node: File system device options,  Prev: File system device resources,  Up: File system device settings

Command-line options for file system devices
............................................

`-fs8 PATH'
`-fs9 PATH'
`-fs10 PATH'
`-fs11 PATH'
     Specify the paths for the file system access on drives 8, 9, 10
     and 11, respectively (`FSDevice8Dir', `FSDevice9Dir',
     `FSDevice10Dir' and `FSDevice11Dir').


File: vice.info,  Node: Printer settings,  Next: No kernal traps,  Prev: File system device settings,  Up: Peripheral settings

Printer settings
----------------

   The VICE emulators can emulate printers connected to either the IEC
buffer or the user port.  Emulation can be achieved by redirecting the
printer output to a file or by piping it through an external process.
This is defined by so-called "printer device file names"; a printer
device file name can be either a simple path, or a command name
preceeded by a pipe symbol `|'.

   For example, printer device `filename' will cause the output to be
appended to the file `filename', while printer device `|lpr' will cause
the `lpr' command to be executed and be fed the printer output.  The
printer output will not be converted but saved as printed by the
emulated machine.

   Up to three printer devices may be specified through the following
resources:

   * device 1, whose default value is `print.dump';

   * device 2, whose default value is `|petlp |lpr';

   * device 3, whose default value is `|lpr'.

   So, basically, by default printer device 1 will simply dump printer
output to `print.dump'; printer device 2 will print it via `petlp' (a
not-yet-complete utility that will produce Postscript output from the
Commodore printer code) and `lpr'; printer device 3 will print it with
`lpr'.

* Menu:

* Printer resources::
* Printer options::


File: vice.info,  Node: Printer resources,  Next: Printer options,  Prev: Printer settings,  Up: Printer settings

Printer resources
.................

`PrDevice1'
`PrDevice2'
`PrDevice3'
     Strings specifying the printer devices (*note Printer settings::.).

`Printer4'
     Boolean specifying if the IEC printer (device 4) is being emulated.

`Printer4Dev'
     Integer (ranging from 0 to 2, for device 1-3) specifying what
     printer device (*note Printer settings::.) the IEC printer is
     using.

`PrUser'
     Boolean specifying if the user-port printer is being emulated.

`PrUserDev'
     Integer (ranging from 0 to 2, for device 1-3) specifying what
     printer device the user-port printer is using.


File: vice.info,  Node: Printer options,  Prev: Printer resources,  Up: Printer settings

Printer command-line options
............................

`-prdev1 NAME'
`-prdev2 NAME'
`-prdev3 NAME'
     Specify `NAME' as printer devices 1, 2 and 3, respectively
     (`PrDevice1', `PrDevice2' and `PrDevice3').

`-printer4'
`+printer4'
     Enable/disable emulation of the IEC printer (`Printer4=1',
     `Printer4=0').

`-pr4dev DEV'
     Specify device for the IEC printer (`Printer4Dev').

`-pruser'
`+pruser'
     Enable/disable emulation of the IEC printer (`PrUser=1',
     `PrUser=0').

`-pruserdev DEV'
     Specify device for the IEC printer (`PrUserDev').


File: vice.info,  Node: No kernal traps,  Prev: Printer settings,  Up: Peripheral settings

Disabling kernal traps
----------------------

   If you have compatibility problems, you can completely disable Kernal
traps with the "Disable kernal traps" option.  This will of course
disable all the features that depend on it, such as the fast 1541
emulation (so you will have to turn true 1541 emulation on if you want
to be able to read or write disk images) and tape support.

* Menu:

* No traps resources::
* No traps options::


File: vice.info,  Node: No traps resources,  Next: No traps options,  Prev: No kernal traps,  Up: No kernal traps

Resources to control Kernal traps
.................................

`NoTraps'
     Boolean specifying whether all the Kernal trap should be disabled.


File: vice.info,  Node: No traps options,  Prev: No traps resources,  Up: No kernal traps

Command-line options to control Kernal traps
............................................

`-traps'
`+traps'
     Enable (`NoTraps=0') or disable (`NoTraps=1') kernal traps.

