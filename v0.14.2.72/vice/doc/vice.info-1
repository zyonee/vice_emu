This is Info file vice.info, produced by Makeinfo version 1.67 from the
input file vice.texi.

START-INFO-DIR-ENTRY
* VICE: (vice).        VICE, the Versatile Commodore Emulator.
END-INFO-DIR-ENTRY

   VICE Manual

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.


File: vice.info,  Node: Top,  Next: License,  Prev: (dir),  Up: (dir)

   This is the documentation for version 0.15 of VICE, the Versatile
Commodore Emulator.

* Menu:

* License::                     The GNU General Public License gives you
                                permission to redistribute this program
                                on certain terms; and also explains that
                                there is no warranty.

* Preface::                     Fundamental concepts.

* Usage::                       Invoking the emulators.
* System files::                Files needed to emulate.

* Basics::                      Simple things you can do.

* Settings and resources::      Emulator parameters you can change.

* Machine-specific features::   Peculiar characteristics of the emulators.

* Monitor::                     The VICE built-in monitor.
* c1541::                       The disk-image maintenance utility.

* Acknowledgments::             People involved in VICE.
* Copyright::                   Legal stuff.
* Contacts::                    Official home page, email addresses...

* Concept Index::
* Resource Index::

 -- The Detailed Node Listing --

About VICE

* C64 emulator features::
* C128 emulator features::
* VIC20 emulator features::
* PET emulator features::
* Keyboard emulation::
* Joystick emulation::
* Disk drive emulation::
* File formats::
* Common problems::

Common problems

* Sound problems::
* Shared memory problems::

Invoking the emulators

* Command-line initialization::
* Command-line autostart::

System files

* ROM files::                   Files containing dumps of the original ROMs.
* Keymap files::                Files describing the keyboard layout.
* Palette files::               Files defining the machine's colors.

Basic operation

* Emulation window::            The window the emulator runs in.
* Menus::                       Using emulator menus.
* Help::                        Getting help if you are stuck.
* File Selector::               Selecting files interactively.
* Disk and tape images::        Using virtual disks and tapes.
* Reset::                       Resetting the virtual machines.

Using disk and tape images

* Previewing contents::         Looking into the image before attaching it.
* Autostart::                   Starting a program automagically.
* Compressed files::            Dealing with compressed files.
* Zipcode and Lynx::            Using Zipcoded ([1-4]!*) and Lynx files.

Settings and resources

* Resource files::              Format of resource files.
* Resources and command-line::  Specifying settings from the
                                command-line

* Performance settings::        Settings that affect speed of execution.
* Video settings::              Settings dealing with the video output.
* Keyboard settings::           Settings relative to the keyboard emulation.
* Sound settings::              Settings that control audio playback
* 1541 settings::               Settings that control disk-drive emulation.
* Peripheral settings::         Settings for emulated external devices.
* Misc settings::               Other settings.

Performance settings

* Performance resources::
* Performance options::

Video settings

* Video resources::
* Video options::

Keyboard settings

* Keyboard resources::
* Keyboard options::

Sound settings

* Sound resources::
* Sound options::

1541 settings

* 1541 resources::
* 1541 options::

Peripheral settings

* File system device settings::  Settings for file system devices.
* Printer settings::            Settings for emulating a printer.
* No kernal traps::             Disabling kernal traps completely.

Settings for file system devices

* File system device resources::
* File system device options::

Printer settings

* Printer resources::
* Printer options::

Disabling kernal traps

* No traps resources::
* No traps options::

Miscellaneous settings

* Misc resources::
* Misc options::

Machine-specific features

* C64/128-specific::            Commands and settings specific to the
                                C64/128 emulators
* VIC20-specific::              Commands and settings specific to the
                                VIC20 emulator
* PET-specific::                Commands and settings specific to the
                                PET emulator

C64/128-specific commands and settings

* C64 cartridges::              Using cartridge images with the C64 emulator.
* VIC-II settings::             Settings that control the video chip.
* SID settings::                Settings that control the audio chip.
* C64 I/O extension settings::  Settings that enable special extensions.
* RS232 settings::              Settings that control the RS232 emulation.
* C64/128 system ROM settings::  Settings to control the system ROMs.

VIC-II settings

* VIC-II resources::
* VIC-II options::

SID settings

* SID resources::
* SID options::

C64 I/O extension settings

* C64 I/O extension resources::
* C64 I/O extension options::

RS232 settings

* RS232 resources::
* RS232 options::

C64/128 system ROM settings

* C64/128 system ROM resources::
* C64/128 system ROM options::

VIC20-specific commands and settings

* VIC20 cartridges::
* VIC20 memory expansions::
* VIC20 system ROM settings::

Changing memory configuration

* VIC20 memconf resources::
* VIC20 memconf options::

VIC20 system ROM settings

* VIC20 system ROM resources::
* VIC20 system ROM options::

PET-specific commands and settings

* PET model::
* PET diagnostic pin::
* PET colors::

Monitor

* Terminology::
* Machine state commands::
* Memory commands::
* Assembly commands::
* Checkpoint commands::
* General commands::
* Disk commands::
* Command file commands::
* Label commands::
* Miscellaneous commands::

c1541

* c1541 commands and options::

Contact information

* Home page::                   The official VICE WWW page.
* Sending feedback::            How to report impressions and
                                bugs to the authors.
* Contributing::                How to help developing VICE.
* Newsgroups::                  VICE-related Usenet groups.
* FAQs you should read::        VICE-related Frequently Asked Questions.


File: vice.info,  Node: License,  Next: Preface,  Prev: Top,  Up: Top

GNU GENERAL PUBLIC LICENSE
**************************

                         Version 2, June 1991

     Copyright (C) 1989, 1991 Free Software Foundation, Inc.  675
     Mass Ave, Boston, MA 02111-1307, USA
     
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

Preamble
========

   The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it in
new free programs; and that you know you can do these things.

   To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

   We protect your rights with two steps: (1) copyright the software,
and (2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

   Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

   Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

   The precise terms and conditions for copying, distribution and
modification follow.

    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License applies to any program or other work which contains a
     notice placed by the copyright holder saying it may be distributed
     under the terms of this General Public License.  The "Program",
     below, refers to any such program or work, and a "work based on
     the Program" means either the Program or any derivative work under
     copyright law: that is to say, a work containing the Program or a
     portion of it, either verbatim or with modifications and/or
     translated into another language.  (Hereinafter, translation is
     included without limitation in the term "modification".)  Each
     licensee is addressed as "you".

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running the Program is not restricted, and the output from the
     Program is covered only if its contents constitute a work based on
     the Program (independent of having been made by running the
     Program).  Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
     source code as you receive it, in any medium, provided that you
     conspicuously and appropriately publish on each copy an appropriate
     copyright notice and disclaimer of warranty; keep intact all the
     notices that refer to this License and to the absence of any
     warranty; and give any other recipients of the Program a copy of
     this License along with the Program.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Program or any portion
     of it, thus forming a work based on the Program, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. You must cause the modified files to carry prominent notices
          stating that you changed the files and the date of any change.

       b. You must cause any work that you distribute or publish, that
          in whole or in part contains or is derived from the Program
          or any part thereof, to be licensed as a whole at no charge
          to all third parties under the terms of this License.

       c. If the modified program normally reads commands interactively
          when run, you must cause it, when started running for such
          interactive use in the most ordinary way, to print or display
          an announcement including an appropriate copyright notice and
          a notice that there is no warranty (or else, saying that you
          provide a warranty) and that users may redistribute the
          program under these conditions, and telling the user how to
          view a copy of this License.  (Exception: if the Program
          itself is interactive but does not normally print such an
          announcement, your work based on the Program is not required
          to print an announcement.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Program, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not
     apply to those sections when you distribute them as separate
     works.  But when you distribute the same sections as part of a
     whole which is a work based on the Program, the distribution of
     the whole must be on the terms of this License, whose permissions
     for other licensees extend to the entire whole, and thus to each
     and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Program.

     In addition, mere aggregation of another work not based on the
     Program with the Program (or with a work based on the Program) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
     under Section 2) in object code or executable form under the terms
     of Sections 1 and 2 above provided that you also do one of the
     following:

       a. Accompany it with the complete corresponding machine-readable
          source code, which must be distributed under the terms of
          Sections 1 and 2 above on a medium customarily used for
          software interchange; or,

       b. Accompany it with a written offer, valid for at least three
          years, to give any third party, for a charge no more than your
          cost of physically performing source distribution, a complete
          machine-readable copy of the corresponding source code, to be
          distributed under the terms of Sections 1 and 2 above on a
          medium customarily used for software interchange; or,

       c. Accompany it with the information you received as to the offer
          to distribute corresponding source code.  (This alternative is
          allowed only for noncommercial distribution and only if you
          received the program in object code or executable form with
          such an offer, in accord with Subsection b above.)

     The source code for a work means the preferred form of the work for
     making modifications to it.  For an executable work, complete
     source code means all the source code for all modules it contains,
     plus any associated interface definition files, plus the scripts
     used to control compilation and installation of the executable.
     However, as a special exception, the source code distributed need
     not include anything that is normally distributed (in either
     source or binary form) with the major components (compiler,
     kernel, and so on) of the operating system on which the executable
     runs, unless that component itself accompanies the executable.

     If distribution of executable or object code is made by offering
     access to copy from a designated place, then offering equivalent
     access to copy the source code from the same place counts as
     distribution of the source code, even though third parties are not
     compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense or distribute the Program is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

  5. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Program or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Program (or any work
     based on the Program), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from the
     original licensor to copy, distribute or modify the Program
     subject to these terms and conditions.  You may not impose any
     further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties to this License.

  7. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Program at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Program by all those who
     receive copies directly or indirectly through you, then the only
     way you could satisfy both it and this License would be to refrain
     entirely from distribution of the Program.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system, which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Program under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

  9. The Free Software Foundation may publish revised and/or new
     versions of the General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the Program
     does not specify a version number of this License, you may choose
     any version ever published by the Free Software Foundation.

 10. If you wish to incorporate parts of the Program into other free
     programs whose distribution conditions are different, write to the
     author to ask for permission.  For software which is copyrighted
     by the Free Software Foundation, write to the Free Software
     Foundation; we sometimes make exceptions for this.  Our decision
     will be guided by the two goals of preserving the free status of
     all derivatives of our free software and of promoting the sharing
     and reuse of software generally.

                                NO WARRANTY

 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY
     OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS

How to Apply These Terms to Your New Programs
=============================================

   If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND AN IDEA OF WHAT IT DOES.
     Copyright (C) 19YY  NAME OF AUTHOR
     
     This program is free software; you can redistribute it and/or
     modify it under the terms of the GNU General Public License
     as published by the Free Software Foundation; either version 2
     of the License, or (at your option) any later version.
     
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

   Also add information on how to contact you by electronic and paper
mail.

   If the program is interactive, make it output a short notice like
this when it starts in an interactive mode:

     Gnomovision version 69, Copyright (C) 19YY NAME OF AUTHOR
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
     type `show w'.  This is free software, and you are welcome
     to redistribute it under certain conditions; type `show c'
     for details.

   The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and `show
c'; they could even be mouse-clicks or menu items--whatever suits your
program.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the program,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright
     interest in the program `Gnomovision'
     (which makes passes at compilers) written
     by James Hacker.
     
     SIGNATURE OF TY COON, 1 April 1989
     Ty Coon, President of Vice

   This General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Library General Public License instead of this License.


File: vice.info,  Node: Preface,  Next: Usage,  Prev: License,  Up: Top

About VICE
**********

   VICE is the one and only "Versatile Commodore Emulator".  It allows
you to emulate the Commodore 64, 128, VIC20 and PET 8-bit computers with
one single package.  The emulators run as separate programs, but have
the same user interface, share the same settings and support the same
file formats.

   *Important notice:* If you have no idea about what a Commodore 8-bit
computer is, or have questions about how these machines are used, how
the file formats work or everything else that is not strictly related
to VICE, you should read the appropriate FAQs *first*, as this kind of
information is not available here.  *Note Contacts:: for information
about how to retrieve the the FAQs.

   All the emulators provide an accurate 6502/6510 emulator, with
emulation of all the opcodes and accurate timing.  Moreover, all of the
undocumented opcodes are implemented.  Unlike other emulators, the
emulation of all the chips is cycle accurate, and tries to emulate
timings as precisely as possible.

   Please do *not* expect the VIC20, C128 and PET emulators to be as
good as the C64 one, as they are still under construction.

* Menu:

* C64 emulator features::
* C128 emulator features::
* VIC20 emulator features::
* PET emulator features::
* Keyboard emulation::
* Joystick emulation::
* Disk drive emulation::
* File formats::
* Common problems::


File: vice.info,  Node: C64 emulator features,  Next: C128 emulator features,  Prev: Preface,  Up: Preface

C64 emulator features
=====================

   The C64 emulator, called `x64', features a fairly complete emulation
of the VIC-II video chip: sprites, all registers and all video modes
are fully emulated.  Since version 0.13.0, the emulation is fully
cycle-accurate.

   Moreover, a rather complete emulation of the SID sound chip is
provided.  All the basic features are implemented as well as most of
the complex ones including sync and ring modulation.  Filters are the
only major feature missing at the moment.

   Of course, also both CIAs are cycle-accurate and fully emulated.


File: vice.info,  Node: C128 emulator features,  Next: VIC20 emulator features,  Prev: C64 emulator features,  Up: Preface

C128 emulator features
======================

   The C128 emulator, called `x128', features a complete emulation of
the internal MMU ("Memory Management Unit"), plus all the features of
the C64 emulation.  The following things are missing, though:

   * 80-column VDC chip;

   * 2 MHz mode;

   * C64 mode.


File: vice.info,  Node: VIC20 emulator features,  Next: PET emulator features,  Prev: C128 emulator features,  Up: Preface

VIC20 emulator features
=======================

   The VIC20 emulates all the internal hardware, including the VIA
chips.  Only part of the VIC-I video chip features are emulated, so some
graphical effects will not work correctly.

   Sound is implemented, but is still at the experimental stage.  If
you think it does not sound right and know how to improve it, feel free
to contact us (*note Contacts::.).


File: vice.info,  Node: PET emulator features,  Next: Keyboard emulation,  Prev: VIC20 emulator features,  Up: Preface

PET emulator features
=====================

   The PET emulator emulates the 2001, 3032, 4032, 8032, 8096 and 8296
models, which almost covers all models of this kind of machines.  The
hardware is pretty much the same and that is why one single program is
enough to emulate all of them.  For more detailed information about PET
hardware please refer to the `PETdoc' file.

   Both the 40 column and 80 column CRTC video chips are emulated (from
the 4032 onward), but a few of the features are not implemented yet
(numbers of rasterlines per char and lines per screen).  Anyway, those
missing features are not very important for average applications.

   Sound is available for the PET as well, but like the VIC20 it is
still under construction.

   The PET 8096 is basically a PET 8032 with a 64k extension board, that
allows remapping the upper 32k with RAM.  You have to write to a special
register at `$fff0' to remap the memory.  The PET 8296 is a 8096 but
with a completely redesigned motherboard with 128k RAM in total.  Of
the additional 32k RAM you can use only some in blocks of 4k, but you
have to set jumpers on the motherboard for it.  VICE uses the command
line options `petram9' and `-petramA' instead.  Also the video
controller can handle a larger address range.  The PET 8x96 model
emulations run the Commodore LOS-96 operating system - basically an
improved BASIC 4 version with up to 32k for BASIC text and 32k for
variables.  See `PETdoc' for more information.

   The PET computers came with three major ROM revisions, so-called
BASIC 1, 2 and 4, all of which are provided.  The PET 2001 uses the
version 1, the PET 3032 uses version 2, and the others use version 4.
The 2001 ROM is horribly broken in the IEEE488 part (they shipped it
before they tested it with the floppy drive, so only tape worked -
which is not supported in this emulator) so the ROM is patched to fix
the IEEE488 routines.

   What the 2001 patch basically does is (amongst more low level fixes)
get the load address for a program file from the first two bytes of the
file.  This allows loading of PET2001-saved files (that have $0400 as
load address) and other PET files (that have $0401).  The PET2001 still
saves from $0400, not from $0401 as other PETs do.

   Moreover, the secondary addresses being used now are `0' and `1' for
load and save, and not arbitrary unused secondary addresses.

   To select which model to run, you specify the model on the command
line with the `-model MODEL' option, where `MODEL' can be one of a list
of PET model numbers, all described in ...


File: vice.info,  Node: Keyboard emulation,  Next: Joystick emulation,  Prev: PET emulator features,  Up: Preface

The keyboard emulation
======================

   There are two ways of emulating the keyboard in VICE.

   The default way ("symbolic mapping") is to map every X11 key
combination to the corresponding key combination on the real machine:
for example, if you press <*>, which is bound to `Shift-8' on a U.S.
keyboard, in the C64 emulator, the emulated machine will have just the
*unshifted* <*> key pressed (as <*> is unshifted on the C64 keyboard).
Likewise, pressing <'> on the same U.S. keyboard without any shift key
will cause the combination `Shift-7' to be pressed in the emulated C64.
This way, it becomes quite obvious what keys should be typed to obtain
all the symbols.

   There is one problem with symbolic mapping, though: some keys have
to be mapped specially anyway.  The most important execption is that,
in the VIC20, C64 and C128 emulators, <CTRL> is mapped to <Tab> and the
<Commodore> key is mapped to the left <Control>).

   The second way ("positional mapping") is to map every key on the
"real" keyboard to the key which has the same position on the keyboard
of the emulated machine.  This way, no <Shift> key is forced by the
program (with the exception of the function keys <F2>, <F4>, <F6> and
<F8>, which require <Shift> on the Commodore keyboards), and the
keyboard is more comfortable to use in those programs (such as some
games) that require the keys to be in the correct positions.

   *Warning:* unlike the real C64, VICE "presses" the <Shift> key
*together* with the key to shift when the <Shift> must be forced.  In
most cases this should work fine, but some keyboard routines are quite
picky and tend not to recognize the shift key because of this.  For
instance, `F6' (which on the real C64 is obtained with `Shift + F5')
could be recognized as `F5'.  In that case, use the shift key manually
(i.e. type `Shift + F5' in the example).  Yes, we know this is a bug.


File: vice.info,  Node: Joystick emulation,  Next: Disk drive emulation,  Prev: Keyboard emulation,  Up: Preface

The joystick emulation
======================

   Joysticks can be emulated both via the keyboard and via a real
joystick connected to the host machine (the latter only works on
GNU/Linux systems).

   There are two keyboard layouts, called "numpad" and "custom" layouts
respectively.

   The "numpad" layout uses the numeric keypad keys, i.e. the numbers
<1>...<9> which emulate all the directions including the diagonal ones;
<0> emulates the fire button.

   The "custom" layout uses the keys <q>, <w>, <e>, <a>, <s>, <d>, <z>,
<x>, <c> for the directions and <space> for the fire button instead.


File: vice.info,  Node: Disk drive emulation,  Next: File formats,  Prev: Joystick emulation,  Up: Preface

The disk drive emulation
========================

   All the emulators support emulation of up to 4 external disk drives
as devices 8, 9, 10 and 11.  Each of these devices can emulate virtual
Commodore 1541 drives in two ways:

   * using disk images, i.e. files that contain a dump of all the
     blocks contained in a real floppy disk (if you want more
     information about what a disk image is, consult the
     `comp.emulators.cbm' FAQ);

   * accessing file system directories, thus allowing you to access
     files without having to copy them to disk images; this also allows
     you to read and write files in the `P00' format (again, consult the
     `comp.emulators.cbm' FAQ for more info).

   Moreover, there are two available types of 1541 emulation for the
first kind of emulation.  One of them the "DOS level" drive emulation.
It does *not* really emulate the serial line, but patches the kernal
ROM (with the so-called "kernal traps") so that serial line operations
can be emulated via C language routines.  This emulation is very fast,
but only allows use of standard DOS functions (and not even all of
them).

   The other alternative is a "hardware level" drive emulation.  The
Commodore 1541 disk drive was provided with its own CPU (a 6502 as the
VIC20 and the PETs) and its own RAM and ROM.  So, in order to more
closely emulate its features, a complete emulation of this hardware must
be provided and that is what the "hardware level" emulation does.  When
the "hardware level" emulation is used, the kernal routines are no
longer patched and the serial line is fully emulated.  The problem with
this emulation is that it needs a lot of processing power, mainly
because the emulator has to emulate two CPUs instead of one.

   The "hardware level" emulation is only available on the VIC20 and
C64 emulators, and can only be used to emulate one drive at a time.  As
a consequence, it is only available for unit 8 and disables all the
other drives when activated.

   On the other hand, the PETs don't use a serial IEC bus to communicate
with the floppy, instead they use the parallel IEEE488 bus.  This bus
transfers *byte by byte*, as opposed to *bit by bit* as the C64 and
VIC20 do, so in this case it is feasible to emulate the parallel line
completely while emulating the drive at DOS level only.  The IEEE488
line interpreter maps the drives 8-11 (as described above) to the
IEEE488 disk units, and no kernal traps are needed.  The same emulation
is available in the C64, to emulate the Commodore IEEE488 bus interface.


File: vice.info,  Node: File formats,  Next: Common problems,  Prev: Disk drive emulation,  Up: Preface

Supported file formats
======================

   VICE supports the most popular Commodore file formats:

   * `X64' (preferred) or `D64' disk image files;

   * `G64' GCR-encoded 1541 disk image files;

   * `T64' tape image files (read-only);

   * `P00' program files;

   An utility (`c1541', *note c1541::.) is provided to allow transfers
between these formats.

   Notice that the native format for disk images is `X64'; this means
that, although the emulators and utilities can both read and write on
`D64' disk images, they never produce `D64' files.

   You can convert an `X64' file back into a `D64' file with the UNIX
`dd' command:

     dd bs=64 skip=1 if=IMAGE.X64 of=IMAGE.D64


File: vice.info,  Node: Common problems,  Prev: File formats,  Up: Preface

Common problems
===============

   This section tries to describe the most common known problem with
VICE, and how to resolve them.

* Menu:

* Sound problems::
* Shared memory problems::


File: vice.info,  Node: Sound problems,  Next: Shared memory problems,  Prev: Common problems,  Up: Common problems

Sound problems
--------------

   VICE should compile and run without major problems on many UNIX
systems, but there are some known issues related to the sound driver.
In fact, sound is the least portable part of the emulator and has not
been thoroughly tested on all the supported platforms yet.

   Linux, AIX and SGI systems should play sound without any problems; if
you are running Linux please use the new 2.x kernels, as VICE needs some
features that were not implemented in older versions of the Linux sound
driver.

   On the other hand, HP-UX and Solaris machines are known to cause
troubles.  If you think you can help debugging the code for these
systems, your help would be really appreciated.  We are having troubles
finding HP-UX and SUN consoles to work at...


File: vice.info,  Node: Shared memory problems,  Prev: Sound problems,  Up: Common problems

Shared memory problems
----------------------

   If you cannot start VICE, because you get errors about shared memory,
try to run it with the `+mitshm' command-line option (*note Video
options::.).  This will completely disable usage of the MITSHM
extensions, that are normally used to speed up the process of updating
the emulation window.  Of course, this will also result in a big loss in
speed.

   Reasons for this failure could be:

   * IPC support has been disabled from the system; some system
     administrators disable this for security reasons.  If *you* are the
     system administrator, use a kernel that has IPC support compiled
     in and enabled.

   * You are attempting to run the emulator across the network (ie. the
     emulator runs on a machine, and the output is displayed on another
     machine that works as an X terminal), and for some reason VICE
     does not recognize that.  In this case, you have found a bug, so
     please report it to us.

   If you want to avoid running the emulator with `+mitshm' every time,
run it once with `+mitshm' and then choose "Save settings" from the
right-button menu.


File: vice.info,  Node: Usage,  Next: System files,  Prev: Preface,  Up: Top

Invoking the emulators
**********************

   The names of the available emulators are:

   * `x64', the C64 emulator

   * `x128', the C128 emulator

   * `xpet', the PET emulator

   * `xvic', the VIC20 emulator

   You can run each of them by simply typing the name from a shell.  If
you want to run them from another application (e.g. a window manager or
some other sort of program launcher) you should always run them from a
terminal window such as `xterm' or `rxvt', as a lot of debugging
information is printed and the built-in monitor will be run in there.
For example, you could do

     xterm -e x64

* Menu:

* Command-line initialization::
* Command-line autostart::


File: vice.info,  Node: Command-line initialization,  Next: Command-line autostart,  Prev: Usage,  Up: Usage

Command-line options used during initialization
===============================================

   There are several options you can specify on the command line.  Some
of them are used to specify emulation settings; they will be described
in detail later (*note Settings and resources::. for a complete list).
The other ones, instead, are used only to initialize the emulator:

`-help'
`-?'
     List all the available command-line options and their meaning.

`-default'
     Set default resources (*note Settings and resources::.).  This will
     override all the settings specified before, but not the settings
     specified afterwards on the command line.

`-autostart IMAGE'
     Autostart `IMAGE' (*note Command-line autostart::.).

`-1 NAME'
     Attach `NAME' as a tape image file.

`-8 NAME'
`-9 NAME'
`-10 NAME'
`-11 NAME'
     Attach `NAME' as a disk image to device 8, 9, 10 or 11.


File: vice.info,  Node: Command-line autostart,  Prev: Command-line initialization,  Up: Usage

Autostarting programs from the command-line
===========================================

   It is possible to let the emulator "autostart" a disk or tape image
file, by simply specifying its name as the last argument on the command
line; for example

     x64 lovelygame.x64.gz

   will start the C64 emulator, attaching `lovelygame.x64.gz' as a disk
image and running the first program on it.  You can also specify the
name of the program on the fisk image by appending a colon (`:') the
name itself to the argument; for example

     x64 "lovelygame.x64.gz:run me"

   will run the program named `run me' on `lovelygame.x64.gz' instead
of the first one.

   Using the command-line option `-autostart' is equivalent; so the same
result can be obtained with

     x64 -autostart "lovelygame.x64.gz:run me"

   *Note Disk and tape images:: for more information about images and
autostart.


File: vice.info,  Node: System files,  Next: Basics,  Prev: Usage,  Up: Top

System files
************

   In order to work properly, the emulators need to load a few system
files:

   * the "system ROMs", raw binary files containing copies of the
     original ROMs of the machine you are emulating;

   * the "keyboard maps", text files describing the keyboard layout;

   * the "palette files", text files describing the colors of the
     machine you are emulating.

   The place where they will be searched for depends on the value of the
`Directory' resource, which is a colon (`;')-separated search path
list, like the UNIX `PATH' environment variable.  The default value is

     PREFIX/lib/vice/EMU:BOOTPATH/EMU

   Where `PREFIX' is the installation prefix (usually `/usr/local'),
`EMU' is the name of the emulated machine (`C64', `C128', `PET' or
`VIC20') and `BOOTPATH' is the directory where the executable resides.

   For example, if you have the C64 emulator installed in

     /usr/local/bin/x64

   then the value will be

     /usr/local/lib/VICE/C64;/usr/local/bin/C64

   And system files will be searched for under the following
directories, in the specified order:

  1. `/usr/local/lib/VICE/C64'

  2. `/usr/local/bin/C64'

   System files can still be installed in a different directory if you
specify a complete path instead of just a file name.  For example, if
you specify `./kernal' as the kernal image name, the kernal image will
be loaded from the current directory.  This can be done by using
command-line options or by modifying resource values (*note Resource
files::.).

* Menu:

* ROM files::                   Files containing dumps of the original ROMs.
* Keymap files::                Files describing the keyboard layout.
* Palette files::               Files defining the machine's colors.


File: vice.info,  Node: ROM files,  Next: Keymap files,  Prev: System files,  Up: System files

ROM files
=========

   Every emulator requires its own ROM set.  For the VIC20 and the C64,
the ROM set consists in the following files:

   * `kernal',  the Kernal ROM (8 KBytes)

   * `basic', the Basic ROM (8 KBytes)

   * `chargen', the character generator ROM (4 Kbytes)

   * `dos1541', the 1541 drive ROM (16 Kbytes)

   The C128 needs the following files instead:

   * `kernal', the Kernal ROM (8 Kbytes)

   * `basic', the BASIC + Editor ROM (32 Kbytes)

   * `chargen', the character generator ROM (4 Kbytes)

   * `dos1541', the 1541 drive ROM (16 Kbytes)

   The PET emulator uses a quite different setup instead: the Basic and
Kernal ROMS are packed into a single file and only three kernal files
are provided; one for each basic revision.  To handle the different
screen sizes and keyboards, different so-called "editor-ROMs" for the
memory range $E000-$E800 are provided.  The kernal files contain an
editor ROM for 40 columns and graphics keyboard already.  The PET ROMs
have the following names:

   * `pet2001', the PET2001 Basic 1 + Kernal ROM (16 KBytes)

   * `pet3032', the PET3032 Basic 2 + Kernal ROM (16 KBytes)

   * `pet4032', the PET4032/8032 Basic 4 + Kernal ROM (20 KBytes)

   * `edit2.b', the PET3032 editor for business keyboard (2 KBytes)

   * `edit4.b40', the PET4032 editor for business keyboard (2 KBytes)

   * `edit4.b80', the PET8032 editor for 80 columns and business
     keyboard (2 KBytes)

   The PETs also have sockets for extension ROMs for the addresses
$9000-$9FFF, $A000-$AFFF and $B000-$BFFF (the last one for PET2001 and
PET3032 only).  You can specify ROM image files for those extensions
command line options `-petrom9', `-petromA' and `-petromB' resp.

   An alternative would be to specify a long kernal ROM with the
`-kernal' option that includes the extension ROM areas already.

   Also, you can specify a replacement for the basic ROM at $B000-$DFFF
with the `-petromBasic' option and a replacement for the editor ROM at
$E000-$E7FF with the `-petromEditor' option.


File: vice.info,  Node: Keymap files,  Next: Palette files,  Prev: ROM files,  Up: System files

Keymap files
============

   "Keymap files" are used to define the keyboard layout, defining what
key (or combination of keys) must me mapped to ever keysym.

   In other words, the keyboard emulation works like this: whenever the
user presses o releases a key while the input focus in the emulation
window, the emulator receives an X-Window event with a value that
identifies that key.  That value is called a "keysym" and is unique to
that key.  Then the emulator looks for that keysym into an internal
table which tells it what key(s) to press or release on the emulated
keyboard.

   This table is described by the keymap file, which is made up of lines
like the following:

     KEYSYM ROW COLUMN SHIFTFLAG

   Where:

   * `KEYSYM' is a string identifying the keysym: you can use the `xev'
     utility (shipped with the X Window system) to see what keysym is
     bound to any key;

   * `ROW' and `COLUMN' identify the key on the emulated keyboard;

   * `SHIFTFLAG' can have one of the following values:

        * `0': the key is never shifted;

        * `1': the key is shifted;

        * `2': the key is the left shift;

        * `4': the key is the right shift;

        * `8': the key can be (optionally) shifted by the user.

   The `SHIFTFLAG' is useful if you want certain keys to be
"artificially" shifted by the emulator, and not by the user.  For
example, <F2> is shifted on the C64 keyboard, but you might want it to
be mapped to the unshifted <F2> key on the PC keyboard.  To do so, you
just have to use a line like the following:

     F2 0 4 1

   where `0' and `4' identify the key (row 0, column 4 on the keyboard
matrix), and `1' specifies that every time the user presses <F2> the
shift key on the C64 keyboard must be pressed.

   There are also some special commands you can put into the keyboard
file; they are recognized because they start with an exclamation mark:

   * `!CLEAR' clears the currently loaded keyboard map; it is necessary
     to put this at the beginning of the file if you want the keymap
     file to override all of the current internal settings;

   * `!LSHIFT', `!RSHIFT', followed by a row and a column value,
     specify where the left and right shift keys are located on the
     emulated keyboard; for example, C64 default keymaps will specify

          !LSHIFT 1 7
          !RSHIFT 6 4

   Any line starting with the `#' sign, instead, is completely ignored.
This is useful for adding comments within the keymap file.

   VICE keymap files have the `.vkm' default extension, and every
emulator comes with a default positional mapping and a default symbolic
mapping.

