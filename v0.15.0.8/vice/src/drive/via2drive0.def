/* -*- C -*-
 *
 * via2drive0.def - Definitions for the VIA2 emulation in the 1541 disk drive.
 *
 * Written by
 *  Andre' Fachat (fachat@physik.tu-chemnitz.de)
 *  Daniel Sladic (sladic@eecg.toronto.edu)
 *  Andreas Boose (boose@unixserv.rz.fh-hannover.de)
 *  Ettore Perazzoli (ettore@comm2000.it)
 *
 * This file is part of VICE, the Versatile Commodore Emulator.
 * See README for copyright notice.
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 *  02111-1307  USA.
 *
 */


#define mycpu drive0

#define myclk drive_clk[0]

#define myrmwf drive0_rmw_flag

#define myvia via2d0

#define MYVIA VIA2D0

INCLUDES()
{
#include "drive.h"
#include "viad.h"
}

#define	GLOBALS

#define	via_set_int		drive0_set_irq
#define	VIA2D0_INT		IK_IRQ

/* #define VIA2D0_TIMER_DEBUG */

PRE_VIA_FUNCS()
{
}

STORE_PRA()
{
     drive_write_gcr(byte, 0);
}

UNDUMP_PRA()
{
     drive_write_gcr(byte, 0);
}

#define	UNDUMP_PRB	/* FIXME!!!! */

STORE_PRB()
{
	{
	  drive[0].led_status = byte & 8;

	  if (((oldpb ^ byte) & 0x3) && (byte & 0x4))  /* Stepper motor */
	  {
	    if ((oldpb & 0x3) == ((byte + 1) & 0x3))
              drive_move_head(-1, 0);
            else if ((oldpb & 0x3) == ((byte - 1) & 0x3))
              drive_move_head(+1, 0);
	  }
	  if ((oldpb ^ byte) & 0x60)     /* Zone bits */
	      drive_update_zone_bits((byte >> 5) & 0x3, 0);

	  if ((oldpb ^ byte) & 0x04)     /* Motor on/off */
	      drive_motor_control(byte & 0x04, 0);
	}
}

STORE_PCR()
{
        if(byte != via2d0[VIA_PCR]) {
          register BYTE tmp = byte;
          /* first set bit 1 and 5 to the real output values */
          if((tmp & 0x0c) != 0x0c) tmp |= 0x02;
          if((tmp & 0xc0) != 0xc0) tmp |= 0x20;
          /* insert_your_favourite_drive_function_here(tmp);
	     bit 5 is the write output to the analog circuitry:
	     0 = writing, 0x20 = reading */
	     drive_update_viad2_pcr(tmp, 0);
          if ((byte&0x20) != (via2d0[addr]&0x20)) {
             drive_rotate_disk(0, 0);
             drive_rotate_disk(1, 0);
          }
          byte = tmp;
        }
}

#define	STORE_ACR

#define	STORE_SR

#define	STORE_T2L

#define	RESET_VIA

READ_PRA()
{
    {
        byte = ((drive_read_disk_byte(0) /* & ~via2d0[VIA_DDRA])
            | (via2d0[VIA_PRA] & via2d0[VIA_DDRA] */ ));
        if (drive[0].type == DRIVE_TYPE_1571)
            if (drive_byte_ready(0))
                drive_set_byte_ready(0, 0);
    }
}

READ_PRB()
{
	byte = (drive_read_viad2_prb(0) /* & ~via2d0[VIA_DDRB])
			| (via2d0[VIA_PRB] & via2d0[VIA_DDRB] */ );
}

#define POST_VIA_FUNCS


