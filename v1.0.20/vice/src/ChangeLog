1999-05-22  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.20.

	* drive/drive.c (set_drive_true_emulation): Always enable IEC bus
	if true drive emulation is enabled.

	* raster/raster.h: Always define `RASTER_PIXEL'.  Also define
	`RASTER_PIXEL2' and `RASTER_PIXEL4' on MSDOS until all video chip
	emulations are fixed.

	* raster/raster.c (handle_blank_line): Use
	`raster->viewport.canvas' instead of `canvas'.

	* vicii/vicii-draw.c (setup_double_size_modes): Do not compile
	this function if double size mode is not required.
	(vic_ii_draw_init): Do not setup double size mode if not
	required.
	(setup_double_size_modes): Changed likewise.

	* vicii/vicii-sprites.c (vic_ii_sprites_set_double_size): Do not
	use double size modes if `VIC_II_NEED_2X' is not defined.

	* vic20/vic-resources.c: #include "resources.h".

	* arch/msdos/archdep.c: #include <sys/stat.h>.
	(archdep_expand_path): Do not use `zlog'.

	* serial.c (serial_init): Call `prdevice_late_init' only if
	printer support is enabled.

	* vdrive.c (floppy_read_block): Removed debugging cruft.

1999-05-21  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.19.

	* vdrive.c (set_disk_geometry): Added missing break.

1998-05-21  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* Makefile.am: remove $(rs232_printer_ldadd) from xpet and xcbm2
	library list - they are already in $(common_libs)

	* cbm2/Makefile.am: add raster and crtc dirs to include list
	* pet/Makefile.am: add raster and crtc dirs to include list

	* cbm2/crtc.c: outcomment all functionality
	* pet/crtc.c: outcomment all functionality

	* cbm2/c610.c (machine_reset): rename reset_crtc() to crtc_reset()
	* pet/pet.c (machine_reset): rename reset_crtc() to crtc_reset()

	* crtc/crtc-cmdline-options.c (crtc_init_cmdline_options): renamed
	from crtc_cmdline_options_init()

	* crtc/crtc-resources.c (crtc_init_resources): renamed from 
	crtc_resources_init()

	* crtc/crtc-snapshot.c (crtc_write_snapshot_module): renamed from
	crtc_snapshot_write_module
	(crtc_read_snapshot_module): likewise

	* crtc/crtc.c: remove some strange "^L" in file
	(crtc_init_resources, crtc_init_cmdline_options): removed
	(void video_setfullscreen, crtc_offscreen, crtc_screen_enable,
	crtc_set_char). new dummy functions

	* crtc/crtc.h: remove some strange "^L" in file
	(crtc_write_snapshot_module, crtc_read_snapshot_module,
	crtc_set_char, crtc_offscreen, crtc_screen_enable): new prototypes
	include crtc-mem.h for the store_crtc and read_crtc prototypes

1999-05-20  Ettore Perazzoli  <ettore@comm2000.it>

	* crtc/crtc.c: Rewritten: provides a working skeleton for a new
	CRTC emulation taking advantage of the new raster module.
	* crtc/crtc.h: Likewise.
	* crtc/crtc-cmdline-options.c: Likewise.
	* crtc/crtc-cmdline-options.h: Likewise.
	* crtc/crtc-draw.c: Likewise.
	* crtc/crtc-draw.h: Likewise.
	* crtc/crtc-mem.c: Likewise.
	* crtc/crtc-mem.h: Likewise.
	* crtc/crtc-resources.c: Likewise.
	* crtc/crtc-resources.h: Likewise.

	* raster/raster.c (raster_reset): Do not initialize colors.
	(raster_init): Initialize them here instead.

1999-05-19  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.18.

	* arch/unix/xaw/ui.c (vidmode_available): Fixed typo.

	* (_draw_idle): Use `vic_ii.raster.frame_buffer_ptr' instead of
	`frame_buffer_ptr'.

	* * archapi.h: (archdep_home_path): Move prototype to
	`arch/unix/archdep.h' as this is no *common* system-specific
	function.

	* arch/unix/xaw/widgets/FileSel.c: #include "archdep.h".

1998-05-19  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* arch/unix/archdep.c (archdep_home_path): check return values
	of getpwuid(). Make function non-static.

	* arch/unix/xaw/widgets/FileSel.c: include archapi.h
	(GotoDeepestLegalDirectory, UpdateTextLines): call 
	archdep_home_path() instead of getenv().

	* archapi.h: protect with #ifdef _ARCHAPI_H, include <stdarg.h>
	(archdep_home_path): new prototype

1998-05-19  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* drive/drive.h (A_*): remove bogus alarm definitions
	(I_*): remove bogus interrupt definitions

	* configure.in: add src/crtc/Makefile to list of Makefiles

	* Makefile.am: add crtc to subdirectories, remove crtc.h, crtccore.c
	add crtc_lib and clean up xpet and xcbm2 build rules

	* crtc/Makefile.am: new file

	* crtc/crtc-cmdline-options.c, crtc/crtc-cmdline-options.h,
	crtc/crtc-draw.c, crtc/crtc-draw.h, crtc/crtc-mem.c, crtc/crtc-mem.h,
	crtc/crtc-resources.c, crtc/crtc-resources.h, 
	crtc/crtc-snapshot.c, crtc/crtc-snapshot.h,
	crtc/crtc.c, crtc/crtc.h: new files, crudely broken out of 
	the old crtccore.c

	* crtc.h, crtccore.c: removed

1998-05-18  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* arch/msdos/archdep.c (archdep_expand_path): new function to 
	return a malloc´d string containing the full absolute path of 
	the given file name (taken from zfile.c)
	* arch/riscos/archdep.c: likewise
	* arch/unix/archdep.c: likewise
	* arch/win32/archdep.c: likewise

	* archapi.h (archdep_expand_path): mew prototype

	* drive/drive.c (drive_sync_found): moved from behind 
	drive_rotate_disk() to before drive_rotate_disk(), allow the 
	compiler to inline it.
	(drive_read_image_snapshot_module): call zfile_close_action() to
	mark the image file read from a snapshot for request/deletion

	* zfile.c (struct zfile): add action-on-close and request string
	(zfile_list_add): call archdep_expand_path() to get full path.
	Allow a tmp_name of NULL (for uncompressed files)
	(zopen, zfopen): keep also track of uncompressed files by also calling
	zfile_list_add() for them.
	(handle_close_action): check the action-on-close the file is set to.
	If ZFILE_REQUEST, it should at some point in time open a requester
	to ask whether to save the file or remove it.
	If ZFILE_DEL, simply remove the original file as well. 
	The default, ZFILE_KEEP, does not do anything to the original file.
	(handle_close): handle the cases where tmp_name is NULL, and free
	the request_string
	(zclose_all): likewise
	(zfile_close_action): set the action to do when the file is being
	closed. Save the request_string that might be given to a requester
	as description of the file.

	* zfile.h (zfile_action_t): new enum to number the file actions
	to do on zfile close
	(zfile_close_action): new prototype

1999-05-19  Martin Pottendorfer  <Martin.Pottendorfer@alcatel.at>

	* arch/unix/xaw/ui.c 
	(ui_enable_drive_status): Added support to map drives to widgets
	in `norma' disk emulation mode.
	(ui_display_drive_current_image): Moved widget filling to seperate
	function.
	(ui_display_drive_current_image2): New Function. Fills the widgets
	according to drive-widget mapping.
	(last_attached_images): image name cache of last attached images.

1999-05-18  Martin Pottendorfer  <Martin.Pottendorfer@alcatel.at>

	* arch/unix/xaw/ui.c: (drive_widgets): Added widget for displaying
	the currently attached image.
	(ui_open_canvas_window): 
	Changed hardcoded array values of `2' to `NUM_DRIVES' in variable
	definitions. 
	Added creation of new `current_image_widgets'.
	(ui_enable_drive_status): 
	Changed drive-to-widget-mapping to fill the widgets starting from
	widget 0 (top-to-bottom), and adopted the `Realize' and
	`UnRealize' order accordingly.
	(ui_display_drive_current_image): New function, which fills the
	widget for a drive with the image name currently attached.

	* arch/riscos/ui.h: added prototype for
	`ui_display_drive_current_image()'
	arch/win32/ui.h: ditto.
	arch/msdos/ui.h: ditto.
	* arch/riscos/ui.c: added dummy for ui_display_drive_current_image()'
	arch/win32/ui.c: ditto.
	arch/msdos/ui.c: ditto.

1999-05-17  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.17.

	* Makefile.am: Added `raster' to `SUBDIRS'.
	Added `libarch' to targets `x64-all' and `x128-all'.

1998-05-17  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* drive/drive.c: include <errno.h>
	(drive_write_gcrimage_snapshot_module, 
	drive_read_gcrimage_snapshot_module): new prototypes
	(drive_write_snapshot_module, drive_read_snapshot_module): call
	drive_{read|write}_gcrimage_snapshot_module()
	(drive_write_image_snapshot_module, drive_read_image_snapshot_module):
	new functions to read/write normal disk snapshot modules.
	(drive_write_gcrimage_snapshot_module,
	drive_read_gcrimage_snapshot_module): renamed from 
	drive_write_image_snapshot_module, drive_read_image_snapshot_module.

1999-05-17  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.16.

	* raster.c, raster.h: Moved definition of `MIN' and `MAX' to
	`raster.h.

1999-05-17  Tibor Biczo  <crown@mail.matav.hu>

	* arch/win32/Makefile.am: Replaced hardcoded windres binary with
	  $(WINDRES).

	* arch/win32/archdep.h: Include <stdio.h>, <stdarg.h>.

	* arch/win32/c64.dsp: Added psid.c.

1998-05-17  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* prdevice.c (prdevice_late_init): new function to attach the printer
	_after_ serial_init(), because serial_init() removes an attached
	printer (that comes from the resource "Printer4=1")

	* prdevice.h (prdevice_late_init): new prototype

	* serial.c (serial_init): call prdevice_late_init() after initializing.
	Clear the serialdevices[].inuse flag.

1998-05-17  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* arch/unix/xaw/ui.c (app_shells): add two widgets for half-width
	LEDs.
	(ui_open_canvas_window): create additional widgets for half-width 
	LEDs.
	(ui_enable_drive_status): call drive_num_leds() to determine whether
	drive has one or two LEDs. enable the appropriate widgets
	(ui_display_drive_led): also set the status of the half-width LED
	widgets

	* drive/drive.c (set_drive0_type): if type has changed, set
	default track (when SFD1001 has left the track at 38, the 1541
	cannot read anything)
	* drive/drive.c (set_drive0_type): likewise

	* drive/fdc.c (int_fdc): set drive at reset.
 
1999-05-17  Ettore Perazzoli  <ettore@comm2000.it>

	* vic20/vic20mem.c (store_wrap): Made static.
	(read_ram): Made static.
	(store_ram): Made static.
	(read_cartrom): Made static.
	(read_watch): Made static.
	(store_watch): Made static.

	* vic20/vic20.c (machine_reset): Call `vic_reset()' instead of
	`reset_vic()'.

1999-05-16  Ettore Perazzoli  <ettore@comm2000.it>

	Massive VIC-II reorganization and cleanup.
	* vicii/vicii.c: Split into the	following parts:
	* vic20/vic-cmdline-options.c: New file.
	* vic20/vic-cmdline-options.h: New file.
	* vic20/vic-draw.c: New file.
	* vic20/vic-draw.h: New file.
	* vic20/vic-mem.c: New file.
	* vic20/vic-mem.h: New file.
	* vic20/vic-resources.c: New file.
	* vic20/vic-resources.h: New file.
	* vic20/vic-snapshot.c: New file.
	* vic20/vic-snapshot.h: New file.

	* arch/unix/rs232.c (rs232_putc): Declare `n' (return value from
	`write()') as `ssize_t' instead of `size_t'.

	* arch/unix/xaw/ui.c (DEFINE_BUTTON_CALLBACK): Make the defined
	callback static.
	(mouse_timeout): Made static.
	(mouse_handler): Made static.
	(vidmode_available): Made static.
	(focus_window_again): Made static.
	(set_fullscreen): Local variable `dotclock' made static.
	(ui_restore_mouse): Made static.
	(initBlankCursor): Made static.
	(mouse_handler1351): Made static.
	(prepare_wm_command_data): Added a couple of signed -> unsigned
	casts to make compiler happier.

	* mon.c (mon_move_memory): Type of local variable `len' changed
	from `unsigned int' to `int'.
	(mon_compare_memory): Likewise.
	(mon_fill_memory): Likewise.
	(mon_hunt_memory): Likewise.
	(mon_remove_name_from_symbol_table): Type of `addr' changed from
	`unsigned int' to `int'.

	* drive/via1drive0.c (store_acr): Use `static void' instead of
	`void static'.
	(store_sr): Likewise.
	(store_t21): Likewise.
	* drive/via2drive0.c (store_acr): Likewise.
	(store_sr): Likewise.
	(store_t2l): Likewise.
	* drive/via1drive1.c (store_acr): Likewise.
	(store_sr): Likewise.
	(store_t2l): Likewise.
	* drive/via2drive1.c (store_acr): Likewise.
	(store_sr): Likewise.
	(store_t2l): Likewise.

	* c64/c64.c (machine_reset): Call `vic_ii_reset()' instead of
	`reset_vic_ii()'.
	* c64/c128.c (machine_reset): Likewise.

	* vicii/sprites.h: Removed.
	* vicii/sprcrunch.h: Removed.
	* vicii/sprcycles.h: Removed.

	Massive VIC-II reorganization and cleanup.
	* vicii/vicii.c: Split into the	following parts:
	* vicii/vicii-cmdline-options.c: New file.
	* vicii/vicii-cmdline-options.h: New file.
	* vicii/vicii-draw.c: New file.
	* vicii/vicii-draw.h: New file.
	* vicii/vicii-mem.c: New file.
	* vicii/vicii-mem.h: New file.
	* vicii/vicii-resources.c: New file.
	* vicii/vicii-resources.h: New	file.
	* vicii/vicii-snapshot.c: New file.
	* vicii/vicii-snapshot.h: New file.
	* vicii/vicii-sprites.c: New file.
	* vicii/vicii-sprites.h: New file.

	* Makefile.am: Cleaned up `x64', `x128' and `xvic' targets a bit.

	* Makefile.am: Add `raster' to the include file directory list in
	`INCLUDES'.
	* c64/Makefile.am: Likewise.
	* c128/Makefile.am: Likewise.
	* vic20/Makefile.am: Likewise.

	* arch/unix/video.c (frame_buffer_free): No longer mark the block
	as deleted.
	(frame_buffer_alloc): Do it here instead.  Fixed debugging
	messages.  Destroy image on error.  XSync after XShmAttaching.
	Use `xmalloc()' instead of `malloc()'.
	(frame_buffer_free): Memset the struct with zero.

	* arch/unix/xaw/ui.c (exposure_callback): Call the exposure
	handler only if not NULL.

	* vicii/vicii.c, vicii/vicii.h, vicii/raster.h: Massive
	reorganization to take advantage of the new `libraster'.

	* Makefile.am: Link all the emulators with `raster/libraster.a'

	* vicii/Makefile.am: Added `$(top_srcdir)/src/raster' to
	`INCLUDES'.

	* raster.c, raster.h: Removed.

	* Makefile.am: Added `raster' to `SUBDIRS'.

	* raster/raster-cache.c: New file.
	* raster/raster-cache.h: New file.
	* raster/raster-changes.c: New file.
	* raster/raster-changes.h: New file.
	* raster/raster-modes.c: New file.
	* raster/raster-modes.h: New file.
	* raster/raster-sprite-cache.c: New file.
	* raster/raster-sprite-cache.h: New file.
	* raster/raster-sprite-status.c: New file.
	* raster/raster-sprite-status.h: New file.
	* raster/raster-sprite.c: New file.
	* raster/raster-sprite.h: New file.
	* raster/raster.c: New file.
	* raster/raster.h: New file.

1999-05-16  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.15.

	* datasette.c (datasette_read_bit): Reschedule a flux change when
	more than more flux change happens during DMA.
	Removed some (now) unnecessary calls to the alarm code.
	New variable `datasette_alarm_pending'.

	* vic20/vic20iec.c (iec_drive0_write, iec_drive1_write,
	iec_pa_write, iec_pcr_write): Implemented 1581 style IEC bus.

	* vic20/vic20iec.c, c128/c128iec.c, vic20/vic20iec.c:
	#include "maincpu.h".

	* vic20/vic20via1.c, vic20/vic20via2.c (res_via): Commented out
	calling IEC bus functions as this happens this executed the drive
	during reset.

	* vic20/vic20.c (machine_reset): Reset autostart code.
	* pet/pet.c (machine_reset): Likewise.
	* cbm2/c610.c (machine_reset): Likewise.

	* c128/c128iec.c (iec_info_t): Made static.

	* c128/c128.c (machine_reset): Do not initialize memory.

1999-05-16  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.14.

	* datasette.c, datasette.h, tape.c: Renamed `mem_set_tape_sense'
	into `datasette_set_tape_sense'.

	* c64/datasette.c (datasette_set_tape_sense): New function.

	* c64/c64mem.h: Moved `mem_set_tape_sense' here.

	* vic20/vic20datasette.c (datasette_set_tape_sense): New function.
	(datasette_trigger_flux_change): Send signal to VIA1.

	* vic20/vic20via2.c, vic20/vic20via.h (mem_set_tape_sense):
	Renamed to `via2_set_tape_sense'.  #include "datasette.h".
	(store_pcr): Added datasette motor signal.

	* vic20/vic20via1.c (store_prb): Added datasette write signal.
	#include "datasette.h".

	* pet/petdatasette.c (datasette_set_tape_sense): New function.
	* cbm2/c610datasette.c (datasette_set_tape_sense): New function.

	* arch/unix/xaw/vic20ui.c: Added datasette controls.
	* arch/unix/xaw/petui.c: Likewise.
	* arch/unix/xaw/c610.c: Likewise.

	* vic20/vic20.c (machine_init): Initialize datasette.
	* pet/pet.c (machine_init): Likewise.
	* cbm2/c610.c (machine_init): Likewise.

	* pet/petpia1.c, pet/petpia.h (pia_set_cb2): Added datasette motor
	signal.  #include "datasette.h".  Renamed `mem_set_tape_sense' to
	`pia1_set_tape_sense'.

	* pet/petpia.h: #include "types.h" and #include "snapshot.h".

	* pet/petvia.c (store_prb): Added datasette write signal.

	* cbm2/c610tpi1.c, cbm2/c610tpi.h (read_pb): Added datasette sense
	signal.  (store_pb): Added datasette motor and write signal.
	(tpi1_set_tape_sense): New function.

	* arch/win32/resvic.rc, arch/win32/respet.rc: Commented in
	datasette controls.

	* arch/msdos/vic20ui.c (vic20_ui_init): Activated datasette
	controls.
	* arch/msdos/petui.c (pet_ui_init): Likewise.

	* info.c: Updated.
	* main.c (MAIN_PROGRAM): Updated init message.
	
1999-05-15  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.13.

	* datasette.c (datasette_control): Added save support.
	(datasette_toggle_write_bit, clk_overflow_callback): New
	functions.
	(datasette_init): Initialize clock overflow.

	* c64/c64mem.c (pla_config_changed): Added implementation of
	processor port bit #3.

	* arch/msdos/menudefs.c (ui_create_main_menu): Commented in
	datasette save dialog.
	* arch/win32/resc64.rc: Likewise.

	* arch/unix/archdep.h, arch/msdos/archdep.h, arch/win32/archdep.h,
	arch/riscos/archdep.h: Added `MODE_READ_WRITE'.

	* tap.c: #include "archdep.h".
	(tap_open): Use `MODE_READ_WRITE'.  Set correct file offset and do
	not attach TAPs with bogus size.

	* tap.h (tap_t): New member `offset'.

	* mon_lex.l (free_buffer): Fixed prototype.

1998-05-15  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* c64/c64tpi.c (undump_pa): use parallel_cpu_restore_atn()
	because we don´t send ATN IRQs to the chips on restore.
	* cbm2/c610tpi1.c (undump_pa): likewise
	* pet/petvia.c (undump_prb): likewise

	* drive/drive.c (drive_attach_floppy): do not use GCR image with
	8x50 disk types
	(drive_read_snapshot_module, drive_write_snapshot_module):
	add calls to fdc_*_snapshot_module() on SFD1001 disk type

	* drive/fdc.c (fdc_t, fdc): new struct/type to hold all 
	FDC information. Fix all occurances
	(buffer, fdc_alarm, fdc_state, iprom): removed
	(fdc_write_snapshot_module, fdc_read_snapshot_module): new functions

	* drive/riot2drive0.c, drive/riot2drive1.c (riot_reset): remove
	call to parallel_drv*_set_atn()

	* parallel.c (ResetBus): remove call to parallel_emu_set_atn()
	(parallel_restore_set_atn, parallel_restore_clr_atn): new functions,
	thy do not send IRQ signals to the chip emulations on restore.
	The chips should save the IRQ state themselves.

	* parallel.h (parallel_restore_set_atn, parallel_restore_clr_atn):
	new prototypes
	(PARALLEL_RESTORE_LINE): new define. Remove parallel_set_atn
	for all but the CPU. Add a parallel_restore_atn for the CPU.

	* riotcore.c (myriot_write_snapshot_module, 
	myriot_read_snapshot_module): implement basic funcitonality

	* riotcore.h (riotio): change type from int to BYTE.

1999-05-15  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.12.

	* c64/reu.c, c64/reu.h (reu_init): New function.

	* main.c (machine_init): Initialize REU.

1998-05-15  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* xaw/uisettings.c (radio_Drive8Type, radio_Drive9Type): add drive
	parameter to drive_match_bus()

	* drive/cia1581drive0.c (do_reset_cia, undump_ciapa, store_ciapa):
	set led_status to 0 or 1, not anything else
	* drive/cia1581drive1.c: likewise

	* drive/drive.c (set_drive0_type, set_drive1_type): add drive
	parameter to drive_match_bus()
	(drive_match_bus): add drive parameter
	(drive_num_leds): return the number of LEDs for the drive

	* drive/drive.h (drive_match_bus): update prototype
	(drive_num_leds): add prototype

	* drive/fdc.c (fdc_do_job): update current_half_track for display

	* drive/riot2drive0.c (void undump_prb, void store_prb): shift 
	LED bits to bits 0 and 1.
	(riot_reset): reset LED status
	* drive/riot2drive1.c: likewise

	* drive/via2drive0.c (store_prb, undump_prb, res_via): use bit 0
	for LED status
	* drive/via2drive1.c: likewise

1998-05-15  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* drive/drive.c (set_drive_true_emulation): reread the BAM 
	when we disable true drive emulation.

	* drive/fdc.c: encapsulate debug output into #ifdef FDC_DEBUG
	(fdc_do_job): get disk ID and check where appropriate.
	Check write protection where applicable
	Check for format code on $E0 job code and format disk.

	* vdrive.c (vdrive_get_max_sectors): return the right value
	for track 77.
	(vdrive_bam_get_disk_id, vdrive_bam_set_disk_id): new functions

	* vdrive.h (vdrive_bam_get_disk_id, vdrive_bam_set_disk_id): new 
	prototypes

1998-05-14  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* ciacore.c (mycia_init): give the TOD alarm a unique name.

1999-05-14  Tibor Biczo  <crown@mail.matav.hu>

	* arch/win32/res.h: Added IDM_CART_VIC20_16KB_4000 resource definition.

	* arch/win32/resvic.rc: Updated cartridge attach menu entries.

1998-05-13  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* drive/drivecpucore.c (mydrive_cpu_early_init): give ROM
	address to fdc code (is later needed to check whether we
	have to execute format or custom code on $E0 job code)

	* drive/fdc.c (iprom): IP processor ROM pointer
	(fdc_do_job): use header pointer as parameter, because 
	header also contains ID, not only t/s
	If no disk in drive, return no Sync instead of drive not ready
	On sector seek update track/sector.
	On code $F0 read block header only.
	(fdc_int): call fdc_do_job with header pointer instead of 
	track/sector
	(fdc_init): save pointer to main processor ROM
	
1999-05-13  Dag Lem  <resid@nimrod.no>

	* Makefile.am: Removed target vsid.

	* c64/Makefile.am: Added PSID related files.
	
	* c64/c64.c: Check psid_mode flag for PSID handling.
	* c64/psid.h: New file, PSID handling.
	* c64/psid.c: Likewise.
	* c64/psiddrv.a65: Likewise.
	
	* c128/c128.c (machine_autodetect_psid): Flag target as uncapable
	of reading PSID files.
	* c128/c610.c (machine_autodetect_psid): Likewise.
	* c128/pet.c (machine_autodetect_psid): Likewise.
	* c128/vic20.c (machine_autodetect_psid): Likewise.

	* machine.h: External declaration of psid_mode flag.

	* main.c: Autodetect PSID file and set psid_mode flag.
	
1999-05-12  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.11.

	* arch/unix/xaw/uicommands.c: #include "uiedisk.h".

	* arch/unix/xaw/ui.c (focus_window_again, initBlankCursor): Fixed
	prototype.
	* parallel.c (In2_atnhi): Likewise.
	* mon_lex.l (yywrap): Likewise.

	* arch/unix/archdep.h (archdep_home_path): Removed.

	* arch/unix/archdep.c (archdep_home_path): Made static.

1998-05-12  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* drive/fdc.c (fdc_int): return "no sync" instead of "drive not
	ready" for the missing second drive

	* parallel.c (parallel_set_atn, parallel_clr_atn, parallel_set_dav,
	parallel_clr_dav, parallel_set_nrfd, parallel_clr_nrfd,
	parallel_set_ndac, parallel_clr_ndac): print debug info also when
	the emulator is disabled.

1998-05-12  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* vdrive.c (vdrive_command_format): fix some typos to make 8250 
	disk format work.

1998-05-10  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* doc/vice.texi (VIC20 Cartridges): add $4000 carts and 
	explanation of 16k carts
	(VIC20 resources & cmdline options): add cartridge resources
	and cmdline options.
	(VIC20ROM snapshot module): update format

	* arch/msdos/vic20ui.c (cartridge_type_to_address): add $4000 
	cartridge types
	(attach_cartridge_menu_items): add $4000 carts, change $2000 and 
	$6000 to 16k types

	* arch/unix/xaw/vic20ui.c (attach_cartridge_image_submenu): 
	add $4000 carts, change $2000 and $6000 to 16k types

	* arch/win32/vic20ui.c (vic20_ui_specific): add $4000 types
	return 16k types instead of 8k types

	* cartridge.h (CARTRIDGE_VIC20_16K_[246]000, 
	CARTRIDGE_VIC20_[48]K_4000): new defines

	* vic20/cartridge.c (cartridge_file_4, cartfile4, set_cartridge_file_4):
	new functions
	(set_cartridge_file_6, set_cartridge_file_2): use 16k types instead
	of 8k
	(resources): Cartridge4000 new resource
	(attach_cart6, attach_cart2): use 16k types
	(attach_cart4): new function
	(cmdline_options): "-cart4" new option
	(cartridge_attach_image): read start address and try to detect
	sane value. If not detected, assume no load address available.
	handle 16k type and $4000 images.
	(cartridge_detach_image): detach $4000 images
	(cartridge_set_default): set $4000 images
	(cartridge_get_file_name): return $4000 image file name

	* /vic20/vic20mem.c (VIC_ROM_BLK2A, VIC_ROM_BLK2B): fixed defines
	(vic20_mem_enable_rom_block): allow $4000 image too
	(initialize_memory): allow ROM in the $4000 range too
	(mem_attach_cartridge): handle $4000 and 16k type images
	(mem_detach_cartridge): handle $4000 and 16k type images
	(mem_write_rom_snapshot_module, mem_write_ram_snapshot_module):
	handle $4000 and $5000 ROMs too. Format is completely compatible,
	but minor version is increased for diagnostics

1998-05-10  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* arch/unix/archdep.c: include errno.h

	* drive/fdc.c: include drive.h and vdrive.h
	(fdc_do_job): new function to handle FDC jobs
	(int_fdc): call fdc_do_job

	* drive/fdc.h (FDC_ERR_*): define error codes for FDC

	* riotcore.c (myriot_signal, store_myriot, read_myriot): remove
	some debugging output

1999-05-10  Tibor Biczo  <crown@mail.matav.hu>

	* arch/win32/drive.dsp: Added riot1drive1.c and riot2drive1.c.

	* arch/win32/kbd.c: Include "machine.h".
	  (kbd_handle_keyup, kbd_handle_keydown): Call machine_set_restore_key
	  when PGUP is pressed.

	* arch/win32/x128.dsp, arch/win32/x64.dsp, arch/win32/xcbm2.dsp,
	  arch/win32/xpet.dsp, arch/win32/xvic.dsp: Added keyboard.c.

	* zfile.c: Include <stdio.h>.

1999-05-08  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.10.

	* kbdbuf.c, kbdbuf.h (kbd_buf_init_cmdline_options,
	kdb_buf_feed_cmdline): New functions.
	(kbd_buf_init): Feed keyboard buffer on startup if specified.

	* keyboard.c, keyboard.h: New files.

	* arch/unix/kbd.c, arch/msdos/kbd.c, arch/win32/kbd.c,
	(set_keyarr): Moved to `keyboard.c' and changed to
	`keyboard_set_keyarr'. Removed keyboard array declaration.

	* arch/riscos/kbd.c, arch/riscos/kbd.c: Removed keyboard array
	declaration.

	* c64/c64cia1.c, c128/c128cia1.c, vic20/vic20via1.c,
	pet/petpia1.c, cbm2/c610tpi2.c, arch/win32/c64ui.c,
	arch/win32/ui.c: #include "keyboard.h".

	* arch/win32/c64ui.c, arch/win32/kbd.c, arch/win32/kbd.h,
	arch/win32/ui.c: Call `keyboard_clear_keymatrix'.
	* arch/unix/kbd.c (kbd_event_handler): Likewise.

	* main.c (MAIN_PROGRAM): Initialize common keyboard routine.

	* pet/petpia1.c (pia_set_cb2): Fixed prototype.

1999-05-08  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.9.

	* c64/c64.c (machine_init_cmdline_options): Initialize cartridge
	command line options.

	* c64/cartridge.c (cartridge_init_cmdline_options, attach_crt,
	attach_8, attach_16, attach_action, attach_ss): New functions.

	* utils.c: Moved `spawn' to `archdep.c'.

	* arch/unix/archdep.c, arch/unix/archdep.h, arch/msdos/archdep.c,
	arch/msdos/archdep.h, arch/win32/archdep.c, arch/win32/archdep.h,
	arch/riscos/archdep.c, arch/riscos/archdep.h: New function
	`archdep_spawn'.

	* zfile.c: Use `archdep_spawn' instead of `spawn'.

	* raster.c (handle_visible_line_without_cache): Fixed prototype.

	* sound.h: Moved sound defaults here.

1999-05-06  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.8.

	* autostart.c (autostart_prg): Append a directory separator to
	the directory name.

	* arch/msdos/archdep.c (archdep_path_is_relative): `\foo', `/foo'
	and `c:foo' are absolute.
	* arch/win32/archdep.c (archdep_path_is_relative): Likewise.

1999-05-04  Tibor Biczo <crown@mail.matav.hu>

	* arch/msdos/archdep.c (archdep_path_is_relative): Return value
	  was bad, should have been negated.

	* arch/win32/archdep.c (archdep_path_is_relative): Same as above.
	  Include <ctype.h>.

	* arch/win32/drive.dsp: Removed fdc0.c, fdc1.c. Added fdc.c.

	* arch/win32/resc128.rc: Put resource groups into right order
	  in VicII palette select dialog.

	* arch/win32/resc64.rc: Same as above.

	* arch/win32/uiattach.c: Include <shlobj.h>.
	  (dialog_proc): Implemented folder browser when selecting folder
	  for fs based drive emulation.

	* arch/win32/uivicii.c (res_checksscoll, res_checksbcoll): New
	  variables to store setting changes.
	  (init_dialog): Removed function.
	  (init_palette_dialog): New function. Inits palette page.
	  (init_sprite_dialog): New function. Inits sprite settings page.
	  (dialog_proc): Removed function.
	  (update_palettename): New function. Stores new palettename.
	  (dialog_palette_proc): New function. Dialog procedure for
	  palette page. Sets resource only, if exited with OK button,
	  and if the specified palette could be loaded.
	  (dialog_sprite_proc): New function. Dialog procedure for
	  sprite settings page. Sets resources only, if exited with OK
	  button.
	  (ui_vicii_settings_dialog): Changed property sheet init to use
	  new functions.

	* arch/win32/vice.dsw: Removed dependency on arch lib for pet lib.

	* arch/win32/vsync.c (set_warp_mode): Call sound_set_warp_mode.

	* findpath.c (findpath): Include "archdep.h". Use FSDEV_DIR_SEP_CHR,
	  and archdep_path_is_relative, when checking is path is relative or
	  absolute. Don't insert '/' on the beginning of the path when
	  compiling for DOS, WIN32 os OS2.

1998-05-04  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* parallel.c (parallel_bus): invert meaning of bus lines
	If IEEE bus is disabled, set to 0xff, not 0
	(In1_davlo) invert data read from IEE bus to give to 
	parallelattention or parallelbyte
	(par_emu_bus, par_cpu_bus, par_drv0_bus, par_drv1_bus): 
	invert meaning of data bus lines.
	(parallel_emu_set_bus, parallel_cpu_set_bus, parallel_drv0_set_bus,
	parallel_drv1_set_bus): do not OR bus values, but AND them
	(according to their inverted line meanings)

	* c64/c64tpi.c, cbm2/c610cia1.c, cbm2/c610tpi1.c, pet/petpia2.c:
	do not invert data given to IEEE bus. Do change reading!

	* drive/via1drive0.c, drive/via1drive1.c:
	If IEEE bus is disabled, set to 0xff, not 0
	invert data read from IEEE bus. Do change writing!

	* drive/riot1drive0.c (undump_prb, store_prb):
	do not invert data give to IEEE bus.
	(riot1d0_set_pardata): renamed from riot1_set_pardata
	do not invert data read from IEEE bus

	* drive/riot2drive0.c (my_set_irq, set_handshake): remove prints
	(drive0_riot_set_atn): call riot1d0_set_pardata instead of 
	riot1_set_pardata
	(store_prb): remove print
	(riot_reset): fix IEEE lines from cpu to drv0 calls!

	* drive/riot1drive1.c, drive/riot2drive1.c: new files

	* drive/Makefile.am: add riot1drive1.c, riot2drive1.c

	* drive/drive.c (drive1_riot_set_atn): remove dummy function

	* drive/drive.h (I_RIOTD1FL): define IRQ value

	* drive/fdc.c (int_fdc): handle second fdc when printing new state
	on state change only

	* drive/riotd.h (riot1_set_pardata): remove prototype
	(riot1d0_set_pardata, riot1d1_set_pardata): new prototypes
	remove dummy defines for drive 1 RIOTs

1999-05-03  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.7.

	* datasette.c, datasette.h (datasette_reset): New function.

	* maincpu.c (reset): Reset datasette.

1998-05-03  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* drive/fdc.c (int_fdc): handle job codes (return "no SYNC")
	and head step.

	* drive/riot1drive0.c (store_pb): disable bus when ATN is active.

1998-05-03  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* drive/drive.h: remove bogus I_* and alarm definitions

	* drive/drivecpucore.c (mydrive_read_watch, mydrive_store_watch):
	fix address table access
	(PAGE_ONE): define as pageone variable

	* drive/riot1drive0.c (my_set_irq,  my_restore_irq): new (empty
	definitions
	(store_prb): invert byte sent, but only if ATN is set...
	(riot1_set_pardata): re-set IEEE data bus, to be called when
	ATN changes
	(read_pra): invert IEEE data bus on read

	* drive/riot2drive0.c (my_set_irq, my_restore_irq): 
	new definitions
	(set_handshake): fix handshake logic equations
	(drive0_riot_set_atn): call riot1_set_pardata on ATN change
	(read_pra): fix input bits
	(read_prb): invert disk unit number bits

	* drive/riotd.h (riot1_set_pardata): new prototype

	* parallel.c (parallel_emu): new variable. Defaults to 1, if set
	to 0, emulator does not respond to IEEE
	(parallel_set_atn, parallel_clr_atn, parallel_set_dav,
	parallel_clr_dav, parallel_set_nrfd, parallel_clr_nrfd,
	parallel_set_ndac, parallel_clr_ndac): check parallel_emu

	* riotcore.c (irqfl, edgectrl): new variables for PA7 irq handling
	(myriot_signal): implement PA7 irq handling
	(myriot_reset): clear irqfl, edgectrl.
	(store_myriot): fix ioport handling; add PA7 interrupt edge control
	(read_myriot): add PA7 interrupt edge control

	* riotcore.h: include riot.h

1998-05-03  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* drive/Makefile.am: remove fdc0.c, fdc1.c, fdccore.c, add fdc.c

	* drive/drivecpucore.c (reset): call fdc_reset instead of myfdc_reset
	(mydrive_cpu_early_init): call fdc_init instead of myfdc_init

	* drive/fdc.c: new file, copied from fdccore.c

	* drive/fdc.h (fdc0_init, fdc0_reset, fdc1_init, fdc1_reset).
	remove prototypes
	(fdc_init, fdc_reset): new prototypes

	* drive/fdc0.c, drive/fdc1.c, drive/fdccore.c. drive/fdccore.h; removed

1999-05-03  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.6.

1999-05-02  Dag Lem  <resid@nimrod.no>

	* Makefile.am: New target vsid.

	* c64/Makefile.am: New target libc64vsid.a.

	* vsidlib/Makefile.am: New target libvsid.a.
	* vsidlib/dummy.c: Dummy stub functions for unwanted functionality.
	* vsidlib/main.c: vsid startup.
	* vsidlib/vsid.c: vsid "machine", a bare-bones C64.

1999-05-02  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.5.

	* arch/msdos/archdep.c (archdep_path_is_relative): Check for NULL
	pointer.
	* arch/win32/archdep.c: Changed likewise.

	* arch/msdos/types.h, arch/riscos/types.h, arch/unix/types.h,
	arch/win32/types.h: New files.

	* types.h: Removed.

	* c1541.c: Use `HAVE_READLINE' instead of obsolete `EDIT' define.

	* vice.h: Removed `EDIT' define.

	* vicii/vicii.c, vic20/vic.c, crtccore.c: Fixed prototype.

	* autostart.c (autostart_autodetect): More verbose logging.
	(autostart_advance): Press play on datasette if a tape image is
	attached.

	* drive/drivecpu0.c, drive/drivecpu1.c, 6510core.c: Use
	`DRIVE_CPU' instead of obsolete `__1541__'.

	* pet/petmem.c: Removed some cruft.

	* memcmp.c, info.h: Added proper copyright notice.

1999-05-01  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.4.

	* arch/msdos/c64ui.c (c64_ui_init): Commented out usused menu. 

	* arch/msdos/archdep.c (archdep_default_sysfile_pathlist): Add the
	boot path to the default path.

	* system.c (set_system_path): Also consider the drive letter on
	MSDOS.

	* arch/unix/xaw/uiedisk.c: #include "utils.h".

	* arch/unix/xaw/video.h, arch/unix/xaw/video.c: Moved
	`canvas_refresh' to `video.c'.

	* arch/unix/xaw/widgets/TextField.c: Added some prototypes.

1998-05-01  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* cia.h (byte2bcd, bcd2byte): fix macros

	* ciacore.c (int_ciatod): fix handling of am/pm bit

	* drive/drive.h (drive0_via_set_atn, drive1_via_set_atn,
	drive0_riot_set_atn, drive1_riot_set_atn): add prototypes

1999-04-29  Tibor Biczo  <crown@mail.matav.hu>

	* arch/win32/c128.dsp: Enabled optimizations for c128mem.c.

	* arch/win32/drive.dsp: Added fdc0.c, fdc1.c, riot1drive0.c,
	  riot2drive0.c into drive project.

	* arch/win32/vice.dsw: Corrected relativ paths of subprojects.

	* c128/c128mem.c (initalize_memory): Turned off optimizations for
	  this function when compiling with MSVC. Version 5.0SP3 died
	  with internal compiler error on it.

	* drive/drivecpucore.c (mydrive_mem_init): Same here as above.

1999-04-28  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.3.

	* c128/c128mem.c (initialize_memory): Fixed IO banking.

	* drive/drive.c: Changed default name of 1541-II ROM.

	* drive/drivecpucore.c (reset): Changed name of the reset
	function.
	* drive/viad.h, via1drive0.c, via1drive1.c, via2drive0.c,
	via2drive1.c, vic20/vic20via.h, vic20/vic20via1.c,
	vic20/vic20via2.c, pet/petvia.c, pet/petvia.h, c64/c64cia1.c,
	c64/c64cia2.c, c64/c64cia.h, ciacore.c, drive/ciad.h,
	drive/cia1571drive0.c, drive/cia1571drive1.c,
	drive/cia1581drive0.c, drive/cia1581drive1.c, c128/c128cia1.c,
	cbm2/c610cia.h, cbm2/c610cia1.c, drive/wd1770.h, drive/wd1770.c,
	drive/riotd.h, drive/riot1drive0.c, drive/riot2drive0.c,
	riotcore.c, drive/drivecpu0.c, drive/drivecpu1.c, c64/c64.c,
	c128/c128.c, vic20/vic20.c, pet/pet.c, cbm2/c610.c: Likewise.

1998-04-28  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* doc/vice.texi: add some explanation to the drive emulation
	cmdline options -parallel8/9 fixed
	added -drive8extend and -drive9extend options
	added -dos1001 option
	added -joydev1, -joydev2 options

	* arch/unix/joystick.c (cmdline_options): change "0-5" to "0-6"
	for the available joystick devices.

	* drive/drive.c (cmdline_options): add -drive8extend and -drive9extend
	options

1998-04-27  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* drive/Makefile.am: add fdc.h, fdc0.c, fdc1.c, fdccore.h, and
	fdccore.c

	* drive/drivecpu0.c: include fdc.h
	(myfdc_reset, myfdc_init): new defines
	* drive/drivecpu1.c: likewise

	* drive/drivecpucore.c (mydrive_read_1001buffer_ram,
	mydrive_store_1001buffer_ram): fix address computation
	(reset): call myfdc_reset
	(mydrive_cpu_early_init): call myfdc_init

	* drive/fdc.h, drive/fdc0.c, drive/fdc1.c, drive/fdccore.c,
	drive/fdccore.h: new files to handle FDC emulation
	for the two drives.

1998-04-27  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* arch/unix/xaw/Makefile.am: add uiedisk.h, uiedisk.c

	* arch/unix/xaw/uicommands.c (attach_empty_disk): new callback
	(attach_empty_disk_image_submenu). new submenu to attach
	an empty disk
	(ui_disk_commands_menu): call attach_empty_disk_image_submenu

	* arch/unix/xaw/uiedisk.c: new file, derived from uisnapshot.c

	* arch/unix/xaw/uiedisk.h: new file, derived from uisnapshot.h

	* arch/unix/xaw/uisnapshot.c (browse_callback, cancel_callback,
	save_callback): make static

1998-04-26  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* c64/c64mem.c (mem_romset_resources): fix list (add 1541ii, 1001)
	* c128/c128mem.c: likewise
	* vic20/vic20mem.c: likewise
	* pet/petmem.c: likewise
	* cbm2/c610mem.c: likewise

1998-04-26  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* data/DRIVES/Makefile.am: add dos1001

	* arch/unix/xaw/uisettings.c (set_drive0_type_submenu,
	set_drive1_type_submenu): add SFD1001 entry

	* drive/Makefile.am: add riotd.h

	* drive/drive.c: include riotd.h
	(drive_load_1001, dos_rom_name_1001, set_dos_rom_name_1001,
	drive_rom1001, rom1001_loaded): new function/variable
	(set_drive0_type, set_drive1_type, drive_init,  
	drive_set_active_led_color, drive_set_disk_drive_type,
	drive_load_rom_images, drive_setup_rom_image, drive_check_image_format,
	drive_match_bus, drive_write_snapshot_module,
	drive_read_snapshot_module): handle new SFD1001 case
	(resources, commandline_options): new "DosName1001" and "-dos1001"
	entries

	* drive/drive.h (DRIVE_ROM1001_SIZE, DRIVE_TYPE_1001): new defs.

	* drive/drivecpu0.c: include riotd.h
	(reset_myriot1, reset_myriot2, read_myriot1, read_myriot2,
	store_myriot1, store_myriot2, myriot1_init, myriot2_init): new defs
	* drive/drivecpu1.c: likewise

	* drive/drivecpucore.c (read_func, store_func, read_func_watch,
	store_func_watch, read_func_nowatch, store_func_nowatch):
	increase size from 65 to 257, using each entry for 256 byte instead
	of 1024
	(LOAD, STORE): adjust to new table format
	(mydrive_read_1001_io, mydrive_store_1001_io, 
	mydrive_read_1001zero_ram, mydrive_store_1001zero_ram, 
	mydrive_read_1001buffer_ram, mydrive_store_1001buffer_ram): 
	new functions to handle 1001/8050/8250 memory access
	(JUMP): do not use bank_base optimization for SFD1001 :-(
	(pageone): made variable to be able to set it to drive_ram 
	or (drive_ram + 0x100)
	(mydrive_read, mydrive_store, drive_bank_read, drive_bank_peek,
	drive_bank_store): adjust to new table format
	(reset): reset RIOTs as well
	(mydrive_mem_init): adjust to new memory table format, also handle
	new SFD1001 case
	(mydrive_toggle_watchpoints): adjust to new mem table size
	(mydrive_cpu_early_init): init RIOTs as well
	(drive_jam): handle new 1001 case
	(mydrive_cpu_write_snapshot_module): adjust RAM size to save for 1001
	(mydrive_cpu_read_snapshot_module): reset RIOTs as well
	adjust RAM size to read for SFD1001

	* drive/riotd.h: new file with RIOT1/2 definitions for drive 0/1

1998-04-25  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* Makefile.am: add riot.h, riotcore.h and riotcore.c

	* drive/Makefile.am: add riot1drive0.c, riot2drive0.c

	* drive/drive.c (drive1_riot_set_atn): dummy 
	(drive0_parallel_set_atn, drive1_parallel_set_atn): replace
	functions in the VIA code. Call VIA _and_ RIOT functions to 
	set ATN flags

	* drive/riot1drive0.c, drive/riot2drive0.c: new files

	* drive/riotd.h (riot1d0_signal, riot2d0_signal, riot1d1_signal, 
	riot2d1_signal): new prototypes
	remove empty redefines for the two drive 0 RIOTs

	* drive/via1drive0.c (drive0_via_set_atn): renamed from 
	drive0_parallel_set_atn
	* drive/via1drive1.c: likewise

	* riot.h, riotcore.c, riotcore.h: new files to emulate the 
	RIOT 6532 and the 6530.

1999-04-25  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.2.

	* fsdevice.c (read_fs) [Directory]: Corrected off by one error in
	directory listing.

	* c1541.c (block_cmd, extract_cmd): Removed special 1541 handling.

	* c64/c64mem.c (read_io1, store_io1, read_io2, store_io2): Removed
	cartirdge specific routines.
	(mem_attach_cartridge, mem_detach_cartridge,
	mem_freeze_cartridge, cartridge_config_changed, read_roml,
	read_romh, store_roml): Removed.
	(pla_config_changed): Made non-static.

	* c64/c64cartmem.c: New file.

	* c64/c64cart.h: New prototypes for `c64cartmem.c'.

	* c64/Makefile.am: Added `c64cartmem.c' to `libc64_a_SOURCES'.

	* mem.h: Removed cartridge specific functions.

	* cartridge.h (cartridge_attach, cartridge_detach,
	cartridge_freeze): Prototypes moved here.

	* vic20/cartridge.c: #include "vic20mem.h".

	* vic20/vic20mem.h: Added prototypes for `mem_attach_cartridge'
	and `mem_detach_cartridge'.

	* interrupt.h: Defined interrupt types here.

	* vmachine.h: Removed.

	* autostart.c, kbdbuf.c, maincpu.c, interrupt.h, raster.h,
	c64/c64.c, c64/c64cia1.c, c64/c64cia2.c, c64/c64mem.c,
	c64/cartridge.c, viacore.h, aciacore.c, crtccore.c, raster.c,
	rsuser.c, c128/c128.c, c128/c128cia1.c, c128/c128mem.c,
	vic20/cartridge.c, vic20/vic.c, vic20/vic20.c, vic20/vic20mem.c,
	pet/pet.c, pet/petmem.c, pet/petpia1.c, cbm2/c610.c,
	cbm2/c610cia1.c, cbm2/c610mem.c, vicii/vicii.c, arch/unix/kbd.c,
	arch/msdos/kbd.c, arch/msdos/vsync.c, arch/riscos/kbd.c: Do not
	include `vmachine.h'.

1999-04-25  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* Version 1.0.1.

	* Makefile.am, arch/unix/Makefile.am, arch/unix/xaw/Makefile.am,
	arch/win32/Makefile.am, arch/msdos/Makefile.am,
	arch/riscos/Makefile.am: Removed `PREFIX' from `INCLUDES'.

	* arch/unix/archdep.h: #include "vice.h".

	* arch/unix/xaw/ui.c, arch/unix/xaw/ui.h
	(ui_is_fullscreen_available): Fixed prototype.

	* imagecontents.c (open_image): Also include d80 and d82 disk
	images.
	* arch/msdos/menudefs.c (attach_disk_callback): Likewise.
	* arch/win32/ui.c (handle_wm_command): Likewise.

1998-04-25  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* Makefile.am: add piacore.c, piacore.h, remove pia-tmpl.c

	* pet/Makefile.am: remove petpia*.def and builf rules for it.

	* pet/petpia1.c, pet/petpia2.c: basically a copy of the old .def
	files, with names/defs changed to fit the new piacore file.
	includes piacore.c at the end

	* pet/petpia1.def, pet/petpia2.def: removed

	* pia-tmpl.c: removed

	* piacore.c, piacore.h: new files made out of pia-tmpl.c

1998-04-25  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* Makefile.am: add tpicore.c, tpicore.h, remove tpi-tmpl.c

	* c64/Makefile.am: remove c64tpi*.def and builf rules for it.
	* cbm2/Makefile.am: remove c610tpi*.def and builf rules for it.

	* c64/c64tpi.c, cbm2/c610tpi1.c, cbm2/c610tpi2.c: basically a copy 
	of the old .def files, with names/defs changed to fit the new 
	tpicore file. includes tpicore.c at the end

	* c64/c64tpi.def, cbm2/c610tpi1.def, cbm2/c610tpi2.def: removed

	* tpi-tmpl.c: removed

	* tpicore.c, tpicore.h: new files made out of tpi-tmpl.c

1998-04-25  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* Makefile.am: remove bogus tpi-tmpl.c, add tpicore.c and tpicore.h

	* aciacore.c (acia_last_read): new variable to save value last
	read, needed for RMW cycles.
	(store_myacia): add handling of rmw_flag
	(read_myacia): save value in acia_last_read.

	* c64/c64acia1.c, cbm2/c610acia1.c, pet/petacia.c (mycpu_rmw_flag):
	new define 

	* ciacore.c (read_mycia): move PRE_READ_CIA from before RMW flag
	handling to behind so that it always gets called in the right
	order clk-wise.

	* drive/via1drive0.c, drive/via1drive1.c, drive/via2drive0.c,
	drive/via2drive1.c, pet/petvia.c, vic20/vic20via1.c,
	vic20/vic20via2.c (myrmwf): removed.
	(mycpu_rmw_flag): new define

	* viacore.c (via_read_clk, via_read_offset): new variables to 
	handle opcode fetches in the I/O area
	(via_last_read): new variable for RMW handling
	(reset_myvia): use proper name for log name.
	set via_read_clk to 0
	(store_myvia): add handling of RMW flag
	(read_myvia): add handling of opcode fetch in I/O area.
	Save value read in via_last_read variable.
	(clk_overflow_callback): handle via_read_clk

1998-04-25  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* c128/c128.c, c64/c64.c (machine_init): add call to tpi_init()

	* c64/c64tpi.c, cbm2/c610tpi1.c, cbm2/c610tpi2.c (mytpi_init):
	new define

	* c64/c64tpi.h (tpi_init): new prototype
	* cbm2/c610tpi.h: likewise

	* cbm2/c610.c (machine_init): call tpi1_init, tpi2_init

	* /pet/pet.c (machine_init): call pia1_init, pia2_init

	* pet/petpia.h (pia1_init, pia2_init): new prototypes

	* pet/petpia1.c, pet/petpia2.c (mypia_init): new define

	* ciacore.c (mycia_init, reset_mycia): move log init from reset 
	to init.
	* viacore.c: likewise

	* piacore.c (mypia_init): new function, move log here from reset

	* tpicore.c (mytpi_init): new function, move log here from reset

1998-04-25  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* c64/c64tpi.c: include maincpu.h
	(mycpu_rmw_flag, myclk): new defines
	* cbm2/c610tpi1.c: likewise
	* cbm2/c610tpi2.c: likewise
	* pet/petpia1.c: likewise
	* pet/petpia2.c: likewise

	* piacore.c (pia_last_read): new variable to handle RMW cycles
	(store_mypia): handle RMW cycles
	(read_mypia): save value read in pia_last_read

	* tpicore.c (tpi_last_read): new variable to handle RMW cycles
	(store_mytpi): handle RMW cycles
	(read_mytpi): save value read in tpi_last_read

1998-04-25  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* c1541.c (Legal_formats): fix number of blocks for 8050.
	(command_list): add description of 8050/8250 disks
	(open_image): recognize D80/D82 images
	(format_cmd): recognize D80/D82 image type for formats

	* fs_cbm.h (BAM_BIT_MAP_8050, BAM_BIT_MAP_8250, BAM_VERSION_8050,
	BAM_VERSION_8250, ...) add/fix various defines for the 8050/8250
	format types.
	(hdrinfo): add flags for d80/d82 format

	* vdrive.c (floppy_free_block_count): handle 8050/8250 BAMs
	(vdrive_command_validate): fix (maximum) BAM size
	(vdrive_command_format): use some common routines only if not
	8x50 disk. Build complete new BAM chain for 8x50 disks.
	(vdrive_dir_find_next_slot): handle 8x50 disks when looking
	for a new (empty) directory block.
	(vdrive_calculate_disk_half, vdrive_get_max_sectors,
	vdrive_bam_sector_free): handle 8x50 disks
	(vdrive_bam_calculate_track): handle 8x50 BAM when calculating 
	the track field position in the BAM
	(vdrive_bam_clear_all): also clear 8x50 BAM
	(vdrive_bam_read_bam, vdrive_bam_write_bam): read/write 8x50 BAM 
	as well.
	(attach_floppy_image): recognize D80/D82 images
	(get_std80_header, get_std82_header): new fucntions. Do sanity
	check on to be attached image
	(check_header): clear d80/d82 flags in header; check file length
	for d80/d82 images
	(set_disk_geometry): set appropriate values for 8x50 images
	
	* vdrive.h (struct _DRIVE): adjust maximum BAM size
	(D80_FILE_SIZE, D82_FILE_SIZE, IS_D80_LEN, IS_D82_LEN):
	add d80/d82 file sizes and check macros
	(DISK_IMAGE_TYPE_D80, DISK_IMAGE_TYPE_D82): new defines

