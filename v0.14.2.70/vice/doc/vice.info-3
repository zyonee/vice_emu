This is Info file vice.info, produced by Makeinfo version 1.67 from the
input file vice.texi.

START-INFO-DIR-ENTRY
* VICE: (vice).        VICE, the Versatile Commodore Emulator.
END-INFO-DIR-ENTRY

   VICE Manual

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.


File: vice.info,  Node: VIC-II settings,  Next: SID settings,  Prev: C64 cartridges,  Up: C64/128-specific

VIC-II settings
---------------

   These settings control the emulation of the VIC-II (MOS6569) video
chip used in both the C64 and the C128.

   * "Sprite-sprite collisions" and "Sprite-background collisions", if
     enabled, cause the hardware detection of sprite-to-sprite and
     sprite-to-background collisions of the VIC-II to be emulated.  This
     feature is used by many games, and disabling either of the two
     detection systems can sometimes make you invincible (although
     there is also a chance that also enemies become invincible then).

   * "Color set" can be used to dynamically change the palette file
     being used by choosing one of the available predefined color sets:

        * `default.vpl' ("default"), the default VICE palette;

        * `ccs64.vpl' ("CCS64"), palette taken from the CCS64 emulator
          by Per H^akan Sundell (http://www.fatal-design.com/ccs64/).

        * `frodo.vpl' ("Frodo"), palette taken from the Frodo emulator
          by Christian Bauer
          (http://www.uni-mainz.de/~bauec002/FRMain.html).

        * `godot.vpl' ("GoDot"), palette as suggested by the authors of
          the C64 graphics package GoDot
          (http://users.aol.com/howtogodot/welcome.htm).

* Menu:

* VIC-II resources::
* VIC-II options::


File: vice.info,  Node: VIC-II resources,  Next: VIC-II options,  Prev: VIC-II settings,  Up: VIC-II settings

VIC-II resources
................

`CheckSsColl'
     Boolean specifying whether the sprite-sprite hardware collision
     detection must be emulated.

`CheckSbColl'
     Boolean specifying whether the sprite-background hardware collision
     detection must be emulated.

`PaletteFile'
     String specifying the name of the palette file being used.  The
     `.vpl' extension is optional.


File: vice.info,  Node: VIC-II options,  Prev: VIC-II resources,  Up: VIC-II settings

VIC-II command-line options
...........................

`-checkss'
`+checkss'
     Enable (`CheckSsColl=1') and disable (`CheckSsColl=0') emulation
     of hardware sprite-sprite collision detection, respectively.

`-checksb'
`+checksb'
     Enable (`CheckSbColl=1') and disable (`CheckSbColl=0') emulation
     of hardware sprite-background collision detection, respectively.

`-palette NAME'
     Specify `NAME' as the palette file (`PaletteFile').


File: vice.info,  Node: SID settings,  Next: C64 I/O extension settings,  Prev: VIC-II settings,  Up: C64/128-specific

SID settings
------------

   These settings control the emulation of the SID (MOS6581 or MOS8580)
audio chip.

   * "Emulate filters" causes the built-in programmable filters of the
     SID chip to be emulated.  A lot of C64 music requires them to be
     emulated properly, but their emulation requires some additional
     processor power.

   * "ChipModel" specifies the model of the SID chip being emulated:
     there are two slightly different generations of SID chips: MOS6581
     ones and MOS8580 ones.

* Menu:

* SID resources::
* SID options::


File: vice.info,  Node: SID resources,  Next: SID options,  Prev: SID settings,  Up: SID settings

SID resources
.............

`SidFilters'
     Boolean specifying whether the built-in SID filters must be
     emulated.

`SidModel'
     Integer specifying what model of the SID must be emulated (`0':
     MOS6581, `1': MOS8580).


File: vice.info,  Node: SID options,  Prev: SID resources,  Up: SID settings

SID command-line options
........................

`-sidmodel MODEL'
     Specifies `MODEL' as the emulated model of the SID chip
     (`SidModel').

`-sidfilters'
`+sidfilters'
     Enable (`SidFilters=1') or disable (`SidFilters=0') emulation of
     the built-in SID filters.


File: vice.info,  Node: C64 I/O extension settings,  Next: RS232 settings,  Prev: SID settings,  Up: C64/128-specific

C64 I/O extension settings
--------------------------

   There are three I/O extensions available: they are located at the
address range $DF00 ... $DFFF and each of them is controlled by a
boolean resource.  Please use these extensions only when needed, as they
might cause compatibility problems.

   * The "emulator identification" extension allows programs to
     identify the kind of emulator they are running on, according to the
     emulation detection proposal by Wolfgang Lorenz.  This basically
     means that, when some locations in the $DFxx I/O space are read,
     the emulator returns some values which identify the emulator
     itself, its version and a copyright message.  If this extension is
     disabled, programs will have virtually no way to realize they are
     running on an emulator.

   * The "IEEE488 interface emulation" extension emulates a standard
     Commodore IEEE488 interface connected to the IEC bus; one possible
     use for this is Andr'e Fachat's OS/A65 multitasking operating
     system.

   * The "512K RAM Expansion Unit" extension emulates a standard 512K
     Commodore RAM Expansion Unit; this can be used with GEOS and other
     programs that are designed to take advantage of it.  This currently
     works only in the C64 emulator.

* Menu:

* C64 I/O extension resources::
* C64 I/O extension options::


File: vice.info,  Node: C64 I/O extension resources,  Next: C64 I/O extension options,  Prev: C64 I/O extension settings,  Up: C64 I/O extension settings

C64 I/O extension resources
...........................

`IEEE488'
     Boolean specifying whether the IEEE488 interface should be
     emulated or not.

`REU'
     Boolean specifying whether the 512K RAM Expansion Unit should be
     emulated or not.

`EmuID'
     Boolean specifying whether the emulation identification extension
     should be emulated or not.


File: vice.info,  Node: C64 I/O extension options,  Prev: C64 I/O extension resources,  Up: C64 I/O extension settings

C64 I/O extension command-line options
......................................

`-ieee488'
`+ieee488'
     Enable (`IEEE488=1') or disable (`IEEE488=0') emulation of the
     IEEE488 interface.

`-reu'
`+reu'
     Enable (`REU=1') or disable (`REU=0') emulation of the 512K RAM
     Expansion Unit.

`-emuid'
`+emuid'
     Enable (`EmuID=1') or disable (`EmuID=0') the emulation
     identification extension.


File: vice.info,  Node: RS232 settings,  Next: C64/128 system ROM settings,  Prev: C64 I/O extension settings,  Up: C64/128-specific

RS232 settings
--------------

   X64 and X128 can support RS232 in the following ways:

   * by emulating Daniel Dallmann's 9600 baud userport-based RS232
     interface;

   * by emulating a 6551-based RS232 interface located at $DE00.

   Each of these emulated devices can be either:

   * connected a real UNIX serial device;

   * dumped to a file;

   * piped through a process.

   It is possible to define up to two UNIX serial devices, and then
decide which interface should be connected to which device.  Devices are
defined through the following settings:

   * "Serial 1 device..." and "Serial 2 device..." are used to specify
     the the pathnames of the serial devices, with the file selector;

   * "Serial 1 baudrate" and "Serial 2 baudrate" specify the baudrate.

* Menu:

* RS232 resources::
* RS232 options::


File: vice.info,  Node: RS232 resources,  Next: RS232 options,  Prev: RS232 settings,  Up: RS232 settings

RS232 resources
...............

`RsDevice1'
`RsDevice2'
     Strings specifying the pathnames of the two available serial
     devices.

`RsDevice1Baud'
`RsDevice2Baud'
     Integers specifying the baudrates.

`RsDevice3'
     String defining the name of the file used when dumping RS232
     output.

`RsDevice4'
     String defining the name of the process to pipe the RS232 data
     through.

`RsUser'
     Boolean specifying whether the userport-based RS232 should be
     emulated.

`Acia1'
     Boolean specifying whether the ACIA-based RS232 should be emulated.

`RsUserDev'
`Acia1Dev'
     Integers specifying how the userport-based interface and the
     ACIA-based one are emulated.  The possible values are:
        * `0': connect to serial device number 1;

        * `1': connect to serial device number 2;

        * `2': dump to file;

        * `3': exec an external process.


File: vice.info,  Node: RS232 options,  Prev: RS232 resources,  Up: RS232 settings

RS232 command-line options
..........................

`-acia1'
`+acia1'
     Enable/disable emulation of the ACIA-based RS232 interface
     (`Acia1=1', `Acia1=0').

`-acia1dev DEVICE'
     Specify `DEVICE' as the device for the ACIA-based RS232 emulation
     (`Acia1Dev').

`-rsuser'
`+rsuser'
     Enable/disable emulation of the userport-based RS232 interface
     (`RsUser=1', `RsUser=0').

`-rsuserdev DEVICE'
     Specify `DEVICE' as the device for the ACIA-based RS232 emulation
     (`RsUserDev').


File: vice.info,  Node: C64/128 system ROM settings,  Prev: RS232 settings,  Up: C64/128-specific

C64/128 system ROM settings
---------------------------

   These settings can be used to control what system ROMs are loaded in
the C64/128 emulators at startup.  They cannot be changed from the
menus.

* Menu:

* C64/128 system ROM resources::
* C64/128 system ROM options::


File: vice.info,  Node: C64/128 system ROM resources,  Next: C64/128 system ROM options,  Prev: C64/128 system ROM settings,  Up: C64/128 system ROM settings

C64/128 system ROM resources
............................

`KernalName'
     String specifying the name of the Kernal ROM (default `kernal').

`BasicName'
     String specifying the name of the Basic ROM (default `basic').  In
     the C128 emulator, the ROM image must actually include the editor
     ROM too.

`ChargenName'
     String specifying the name of the character generator ROM (default
     `chargen').

`KernalRev'
     String specifying the Kernal revision.  This resource can be used
     to control what revision of the C64 kernal is being used; it
     cannot be changed at runtime.  VICE is able to automatically
     convert one ROM revision into another, by manually patching the
     loaded image.  This way, it is possible to use any of the ROM
     revisions without changing the ROM set.  Valid values are:

    `0'
          Kernal revision 0

    `3'
          Kernal revision 3

    `sx'
    `67'
          Commodore SX-64 ROM

    `100'
    `4064'
          Commodore 4064 (also known as "PET64" or "Educator 64") ROM


File: vice.info,  Node: C64/128 system ROM options,  Prev: C64/128 system ROM resources,  Up: C64/128 system ROM settings

C64/128 system ROM command-line options
.......................................

`-kernal NAME'
     Specify `NAME' as the Kernal ROM file (`KernalName').

`-basic NAME'
     Specify `NAME' as the Basic ROM file (`BasicName').

`-chargen NAME'
     Specify `NAME' as the character generator ROM file (`ChargenName').

`-kernalrev REVISION'
     Specify Kernal revision (`KernalRev').


File: vice.info,  Node: VIC20-specific,  Next: PET-specific,  Prev: C64/128-specific,  Up: Machine-specific features

VIC20-specific commands and settings
====================================

   This section lists the settings and commands that are VIC20-specific
and thus are not present in the other emulators.

* Menu:

* VIC20 cartridges::
* VIC20 memory expansions::
* VIC20 system ROM settings::


File: vice.info,  Node: VIC20 cartridges,  Next: VIC20 memory expansions,  Prev: VIC20-specific,  Up: VIC20-specific

Using cartridge images
----------------------

   As with the C64 (*note C64 cartridges::.), it is possible to attach
several types of cartridge images:

   * 4 or 8 Kbyte cartridges located at $2000;

   * 4 or 8 Kbyte cartridges located at $6000;

   * 4 or 8 Kbyte cartridges located at $A000;

   * 4 Kbyte cartridges located at $B000.

   This can all be done via the "Attach cartridge image..." command in
the left-button menu.  It is also possible to let XVIC "guess" the type
of cartridge using "Smart-attach cartridge image...".

   Notice that several cartridges are actually made up of two pieces
(and two files), that need to be loaded separately at different
addresses.  In that case, you have to know the addresses (which are
usually specified in the file name) and use the "attach" command twice.


File: vice.info,  Node: VIC20 memory expansions,  Next: VIC20 system ROM settings,  Prev: VIC20 cartridges,  Up: VIC20-specific

Changing memory configuration
-----------------------------

   It is possible to change the VIC20 memory configuration in two ways:
by enabling and/or disabling certain individual memory blocks, or by
choosing one among a few typical memory configurations.  The former can
be done by modifying resource values directly or from the right-button
menu; the latter can only be done from the menu.

   There are 5 RAM expansion blocks in the VIC20, numbered 0, 1, 2, 3
and 5:

   * block 0 (3 Kbytes at $0400-$0FFF);

   * block 1 (8 Kbytes at $2000-$3FFF);

   * block 2 (8 Kbytes at $4000-$5FFF);

   * block 3 (8 Kbytes at $6000-$7FFF);

   * block 5 (8 Kbytes at $A000-$BFFF).

   These blocks are called "expansion blocks" because they are not
present in the stock machine.  Each of them is associated to a boolean
`RamBlockX' resource (where `X' is the block number) that specifies
whether the block is enabled or not.

   There are also some common memory configurations you can pick from
the right-button menu:

   * no RAM expansion blocks at all;

   * all RAM expansion blocks enabled;

   * 3K expansion (only block 0 is enabled);

   * 8K expansion (only block 1 is enabled);

   * 16K expansion (only blocks 1 and 2 are enabled);

   * 24K expansion (only blocks 1, 2 and 3 are enabled).

   As with the X64 (*note C64 I/O extension settings::.), it is also
possible to enable a special emulator identification mechanism that uses
certain memory locations to let a running program query information
about the emulator itself; this is enabled by the "Emulator
identification" option.

* Menu:

* VIC20 memconf resources::
* VIC20 memconf options::


File: vice.info,  Node: VIC20 memconf resources,  Next: VIC20 memconf options,  Prev: VIC20 memory expansions,  Up: VIC20 memory expansions

VIC20 memory configuration resources
....................................

`RAMBlock0'
`RAMBlock1'
`RAMBlock2'
`RAMBlock3'
`RAMBlock5'
     Booleans specifying whether RAM blocks 0, 1, 2, 3 and 5 must be
     enabled.

`EmuID'
     Boolean specifying whether the emulation identification extension
     must be enabled.


File: vice.info,  Node: VIC20 memconf options,  Prev: VIC20 memconf resources,  Up: VIC20 memory expansions

VIC20 memory configuration command-line options
...............................................

`-memory CONFIG'
     Specify memory configuration.  It must be a comma-separated list of
     options, each of which can be one the following:

        * `none' (no extension);

        * `all' (all blocks);

        * `3k' (3k space in block 0);

        * `8k' (first 8k extension block);

        * `16k' (first and second 8k extension blocks);

        * `24k' (first, second and 3rd extension blocks);

        * `0', `1', `2', `3', `5' (memory in respective blocks);

        * `04', `20', `40', `60', `A0' (memory at respective address.

     Examples:

          xvic -memory none

     gives an unexpanded VIC20.  While

          xvic -memory 60,a0

     or

          xvic -memory 3,5

     enables memory in blocks 3 and 5, which is the usual configuration
     for 16k ROM modules.

`-emuid'
`+emuid'
     Enable (`EmuID=1') or disable (`EmuID=0') the emulation
     identification extension.


File: vice.info,  Node: VIC20 system ROM settings,  Prev: VIC20 memory expansions,  Up: VIC20-specific

VIC20 system ROM settings
-------------------------

   These settings can be used to control what system ROMs are loaded in
the VIC20 emulator at startup.  They cannot be changed from the menus.

* Menu:

* VIC20 system ROM resources::
* VIC20 system ROM options::


File: vice.info,  Node: VIC20 system ROM resources,  Next: VIC20 system ROM options,  Prev: VIC20 system ROM settings,  Up: VIC20 system ROM settings

VIC20 system ROM resources
..........................

`KernalName'
     String specifying the name of the Kernal ROM (default `kernal').

`BasicName'
     String specifying the name of the Basic ROM (default `basic').

`ChargenName'
     String specifying the name of the character generator ROM (default
     `chargen').


File: vice.info,  Node: VIC20 system ROM options,  Prev: VIC20 system ROM resources,  Up: VIC20 system ROM settings

VIC20 system ROM command-line options
.....................................

`-kernal NAME'
     Specify `NAME' as the Kernal ROM file (`KernalName').

`-basic NAME'
     Specify `NAME' as the Basic ROM file (`BasicName').

`-chargen NAME'
     Specify `NAME' as the character generator ROM file (`ChargenName').


File: vice.info,  Node: PET-specific,  Prev: VIC20-specific,  Up: Machine-specific features

PET-specific commands and settings
==================================

   This section lists the settings and commands that are PET-specific
and thus are not present in the other emulators.

* Menu:

* PET model::
* PET diagnostic pin::
* PET colors::


File: vice.info,  Node: PET model,  Next: PET diagnostic pin,  Prev: PET-specific,  Up: PET-specific

Changing PET model settings
---------------------------

   With XPET, it is possible to change at runtime the characteristics of
the emulated PET so that it matches (or not) the ones of a certain PET
model, and it is also possible to select from a common set of PET models
so that all the features are selected accordingly.

   The former is done by changing the following resources (via resource
file, command line options or right-menu items):

   * (None yet.)

   Choosing a common PET model is done from the right-button menu
instead, by choosing an item from the "Model defaults" submenu.
Available models are:

   * PET 2001-8N

   * PET 3008

   * PET 3016

   * PET 3032

   * PET 3032B

   * PET 4016

   * PET 4032

   * PET 4032B

   * PET 8032

   * PET 8096

   * PET 8296

   Notice that this will *reset the emulated machine*.

   It is also possible to select the PET model at startup, with the
`-model' command-line option: for example, `xpet -model 3032' will
emulate a PET 3032 while `xpet -model 8296' will emulate a PET 8296.


File: vice.info,  Node: PET diagnostic pin,  Next: PET colors,  Prev: PET model,  Up: PET-specific

The PET diagnostic pin
----------------------

   It is possible to enable or disable emulation of the PET diagnostic
pin via the `DiagPin' resource, or the "PET userport diagnostic pin"
item in the right-button menu.


File: vice.info,  Node: PET colors,  Prev: PET diagnostic pin,  Up: PET-specific

Changing screen colors
----------------------

   It is also possible to choose what color set is used for the
emulation window.  This is done by specifying a palette file name
(*note Palette files::.) in the `PaletteName' resource.  The menu
provides the following values:

   * `default.vpl' ("default (green)"), the good old green-on-black
     feeling;

   * `amber.vpl' ("amber"), an amber phosphor lookalike;

   * `white.vpl' ("white"), simple white-on-black palette.


File: vice.info,  Node: Monitor,  Next: c1541,  Prev: Machine-specific features,  Up: Top

Monitor
*******

   Every VICE emulator has a complete built-in monitor, which can be
used to examine, disassemble and assemble machine language programs, as
well as debug them through breakpoints.  It can be activated by using
the "Activate monitor" command (left button menu).  Notice that you have
to run the emulator from a terminal emulation program (such as `rxvt'
or `xterm') in order to use the monitor.

   Warning: this version of the monitor is still under construction,
and some of the features are not fully working yet.

* Menu:

* Terminology::
* Machine state commands::
* Memory commands::
* Assembly commands::
* Checkpoint commands::
* General commands::
* Disk commands::
* Command file commands::
* Label commands::
* Miscellaneous commands::


File: vice.info,  Node: Terminology,  Next: Machine state commands,  Prev: Monitor,  Up: Monitor

Terminology
===========

`address_space'
     This refers to the range of memory locations and a set of
     registers.  This can be the addresses available to the computer's
     processor, the disk drive's processor or a specific memory
     configuration of one of the mentioned processors.

`register'
     One of the following: program counter (PC), stack pointer (SP),
     accumulator (A), X register (X), or Y register (Y).

`address'
     A specific memory location in the range $0000 to $FFFF.

`address_range'
     Two addresses.  If the second address is less than the first, the
     range is assumed to wraparound from $FFFF to $0000.  Both
     addresses must be in the same address space.

`address_opt_range'
     An address or an address range.

`prompt'
     The prompt has the format [x:y].  If x is -, memory reads from the
     monitor do not have side effects.  Otherwise, x is S.  The second
     part of the prompt, y, shows the default address space.

`checkpoint'
     The monitor has the ability to setup triggers that perform an
     action when a specified situation occurs.  There are three types
     of checkpoints; breakpoints, tracepoints and watchpoints.

`breakpoint'
     A breakpoint is triggered based on the program counter.  When it is
     triggered, the monitor is entered.

`tracepoint'
     Like breakpoints, a tracepoint is triggered based on the program
     counter.  Instead of entering the monitor, the program counter is
     printed and execution continues.

`watchpoint'
     Watchpoints are triggered by a read and/or write to an address.
     When a watchpoint is triggered, the monitor is entered.

`<...>'
     A data type.

`*'
     Zero or more occurrences.

`[...]'
     An optional argument.


File: vice.info,  Node: Machine state commands,  Next: Memory commands,  Prev: Terminology,  Up: Monitor

Machine state commands
======================

`goto <address>'
     Change the PC to address and continue execution.

`io'
     Nothing yet.  Will display VIC/VIA/CIA/SID registers.

`next [<count>]'
     Advance to the next instruction.  Subroutines are treated as a
     single instruction.

`registers [<reg_name> = <number> [, <reg_name> = <number>]*]'
     Assign respective registers.  With no parameters, display register
     values.

`return'
     Continues execution  and returns to the monitor just
     before(after?) the next RTS or RTI is executed.

`step [<count>]'
     Single step through instructions.  An optional count allows
     stepping more than a single instruction at a time.


File: vice.info,  Node: Memory commands,  Next: Assembly commands,  Prev: Machine state commands,  Up: Monitor

Memory commands
===============

`compare <address_range> <address>'
     Compare memory from the source specified by the address range to
     the destination specified by the address.  The regions may
     overlap.  Any values that miscompare are displayed using the
     default displaytype.

`fill <address_range> <data_list>'
     Fill memory in the specified address range with the data in
     <data_list>.  If the size of the address range is greater than the
     size of the data_list, the data_list is repeated.

`hunt <address_range> <data_list>'
     Hunt memory in the specified address range for the data in
     <data_list>.  If the data is found, the starting address of the
     match is displayed.  The entire range is searched for all possible
     matches.

`i <address_opt_range>'
     Display memory contents as PETSCII text.

`m [<data_type>] [<address_opt_range>]'
     Display the contents of memory.  If no datatype is given, the
     default is used.  If only one address is specified, the length of
     data displayed is based on the datatype.  If no addresses are
     given, the 'dot' address is used.

`mc [<data_type>] [<address_opt_range>]'
     Display the contents of memory as character data.  If only one
     address is specified, only one character is displayed.  If no
     addresses are given, the "dot" address is used.

`ms [<data_type>] [<address_opt_range>]'
     Display the contents of memory as sprite data.  If only one
     address is specified, only one sprite is displayed.  If no
     addresses are given, the "dot" address is used.

`move <address_range> <address>'
     Move memory from the source specified by the address range to the
     destination specified by the address.  The regions may overlap.

`> [<address>] <data_list>'
     Write the specified data at `address'.


File: vice.info,  Node: Assembly commands,  Next: Checkpoint commands,  Prev: Memory commands,  Up: Monitor

Assembly commands
=================

`a <address> [ <instruction> [: <instruction>]* ]'
     Assemble instructions to the specified address.  If only one
     instruction is specified, enter assembly mode (enter an empty line
     to exit assembly mode).

`d [<address> [<address>]]'
     Disassemble instructions.  If two addresses are specified, they
     are used as a start and end address.  If only one is specified, it
     is treated as the start address and a default number of
     instructions are disassembled.  If no addresses are specified, a
     default number of instructions are disassembled from the dot
     address.


File: vice.info,  Node: Checkpoint commands,  Next: General commands,  Prev: Assembly commands,  Up: Monitor

Checkpoint commands
===================

`break [<address> [if <cond_expr>] ]'
     This command allows setting a breakpoint or listing the current
     breakpoints.  If no address is given, the currently valid
     checkpoints are printed.  If an address is given, a breakpoint is
     set for that address and the breakpoint number is printed.  A
     conditional expression can also be specified for the breakpoint.
     For more information on conditions, see the CONDITION command.

`enable <checknum>'
`disable <checknum>'
     Each checkpoint can be enabled or disabled.  This command allows
     changing between these states.

`command <checknum> "<command>"'
     When checkpoint `checknum' is hit, the specified command is
     executed by the monitor.  Note that the `x' command is not yet
     supported as a command argument.

`condition <checknum> if <cond_expr>'
     Each time the specified checkpoint is examined, the condition is
     evaluated.  If it evalutes to true, the checkpoint is activated.
     Otherwise, it is ignores.  If registers are specified in the
     expression, the values used are those at the time the checkpoint
     is examined, not when the condition is set.

`delete <checknum>'
     Delete the specified checkpoint.

`ignore <checknum> [<count>]'
     Ignore a checkpoint a given number of crossings.  If no count is
     given, the default value is 1.

`trace [address [address]]'
     This command is similar to the `break' command except that it
     operates on tracepoints.  A tracepoint differs from a breakpoint
     by not stopping execution but simply printing the PC, giving the
     user an execution trace.  The second optional address can be used
     to specify the end of an range of addresses to be traced.

`watch [address [address]]'
     This command is similar to the previous two commands except that it
     operates on watchpoints.  A watchpoint differs from the others by
     stopping on a read and/or write to an address or range of
     addresses.  If no addresses are given, a list of all the
     watchpoints is printed.


File: vice.info,  Node: General commands,  Next: Disk commands,  Prev: Checkpoint commands,  Up: Monitor

General commands
================

`cd <directory>'
     Change the working directory.

`device [c:|d:]'
     Set the default memory device to either the computer (`c:') or the
     disk (`d:').

`radix [H|D|O|B]'
     Set the default radix to hex, decimal, octal, or binary.  With no
     argument, the current radix is printed.

`sidefx [on|off|toggle]'
     Control how monitor generated reads affect memory locations that
     have read side-effects.  If the argument is 'on' then reads may
     cause side-effects.  If the argument is 'off' then reads don't
     cause side-effects.  If the argument is 'toggle' then the current
     mode is switched.  No argument displays the current state.

`system <system command>'
     Nothing yet.


File: vice.info,  Node: Disk commands,  Next: Command file commands,  Prev: General commands,  Up: Monitor

Disk commands
=============

`br <track> <sector> [<address>]'
     Read the block at the specified track and sector.  If an address is
     specified, the data is loaded into memory.  If no address is
     given, the data is displayed using the default datatype.

`bw <track> <sector> <address>'
     Write a block of data at `address' to the specified track and
     sector of disk in drive 8.

`@<disk command>'
     Perform a disk command on the currently attached disk image on
     drive 8.  The specified disk command is sent to the drive's
     channel #15.

`load "<filename>" <address>'
     Load the specified file into memory at the specified address.

`save "<filename>" <address1> <address2>'
     Save the memory from address1 to address2 to the specified file.


File: vice.info,  Node: Command file commands,  Next: Label commands,  Prev: Disk commands,  Up: Monitor

Command file commands
=====================

`playback "<filename>"'
     Monitor commands from the specified file are read and executed.
     This command stops at the end of file or when a STOP command is
     read.

`record "<filename>"'
     After this command, all commands entered are written to the
     specified file until the STOP command is entered.

`stop'
     Stop recording commands.  See `record'.


File: vice.info,  Node: Label commands,  Next: Miscellaneous commands,  Prev: Command file commands,  Up: Monitor

Label commands
==============

`add_label <address> <label>'
     Map a given address to a label.  This label can be used when
     entering assembly code and is shown during disassembly.

`delete_label [<memspace>] <label>'
     Remove the specified label from the label tables.  If no memory
     space is checked, all tables are checked.

`load_labels [<memspace>] "<filename>"'
     Load a file containing a mapping of labels to addresses.  If no
     memory space is specified, the default readspace is used.

`save_labels [<memspace>] "<filename>"'
     Save labels to a file.  If no memory space is specified, all of the
     labels are saved.

`show_labels [<memspace>]'
     Display current label mappings.  If no memory space is specified,
     show all labels.


File: vice.info,  Node: Miscellaneous commands,  Prev: Label commands,  Up: Monitor

Miscellaneous commands
======================

`exit'
     Leave the monitor and return to execution.

`print <expression>'
     Evaluate the specified expression and output the result.

`quit'
     Exit the emulator immediately.

`~ <number>'
     Display the specified number in decimal, hex, octal and binary.


File: vice.info,  Node: c1541,  Next: Acknowledgments,  Prev: Monitor,  Up: Top

c1541
*****

   VICE is provided with a complete stand-alone disk image maintenance
utility, called `c1541'.  You can either invoke it from the command
line or from within one of the VICE emulators, using the "Run c1541"
command which will open a new `xterm' window with a running `c1541' in
it.

   The syntax is:

     c1541 OPTIONS IMAGE

   If some `OPTIONS' but no `IMAGE' are specified, `c1541' runs in
batch mode; otherwise, it attaches the `IMAGE' if present and enters
interactive mode, where you can type commands that are executed when
you press Enter (abbreviations are allowed).  As with the monitor, file
name completion and command line editing with history are provided via
GNU `readline'.  Use the command `quit' to exit.

   Notice that `c1541' always creates `X64' files, but can read and
write `D64' and `T64' files automatically, without the need for any
special options.

* Menu:

* c1541 commands and options::


File: vice.info,  Node: c1541 commands and options,  Prev: c1541,  Up: c1541

c1541 commands and options
==========================

   Each command-line option has an interactive-mode counterpart, that is
shown after it.  `-' as a file name stands for standard input or
standard output, depending on the context.

`-attach  IMAGE'
`attach  IMAGE'
     Attach the disk image `IMAGE' for use.  All the following commands
     will refer to this image.

`-detach'
`detach'
     Detach the currently attached disk image.

`-format  IMAGE 'NAME,ID''
`format  IMAGE 'NAME,ID''
     Format the D64 disk image `IMAGE', giving the specified label.  If
     `IMAGE' does not exist, create it.

`-gcr  IMAGENAME ['NAME,ID']'
`gcrformat  IMAGE 'NAME,ID''
     Create a GCR disk image; if `NAME,ID' is specified, format it.

`-delete  IMAGE FILES...'
`delete  FILES...'
     Delete  FILES  from `IMAGE'.

`-list  IMAGE'
`list'
     List files in `IMAGE'.

`-validate  IMAGE'
`validate'
     Validate the disk.

`-copy  IMAGE OLDNAME1 [OLDNAME2...] NEWNAME'
`copy  OLDNAME1 [OLDNAME2...] NEWNAME'
     Concatenate `OLDNAME1', `OLDNAME2'.. into `NEWNAME' on `IMAGE'
     (can be used to copy files).

`-create  IMAGE DUMP ['DESCR']'
`create  IMAGE DUMP ['DESCR']'
     Build `IMAGE' from raw dump file `DUMP' (i.e. convert from `D64'
     to `X64' file).

`-tape  IMAGE TAPEIMAGE [FILES...]'
`tape  IMAGE TAPEIMAGE [FILES...]'
     Transfer `FILES' from `TAPEIMAGE' to `IMAGE' (default is copy all
     files).

`-read  IMAGE 1541NAME [FSNAME]'
`read  1541NAME [FSNAME]'
     Extract `1541NAME' from the disk image into `FSNAME' (1541NAME by
     default) from `IMAGE'.

`-extract  IMAGE'
`extract'
     Extract all files from `IMAGE'.

`-write  IMAGE FSNAME [1541NAME]'
`write  FSNAME [1541NAME]'
     Write `FSNAME' to `IMAGE' as `1541NAME' (`FSNAME' by default).
     (works with `P00' files as well)

`-block  [DRIVE:] [TRACK] [SECTOR] [DISP]'
`block  [DRIVE:] [TRACK] [SECTOR] [DISP]'
     Show disk blocks in hex format.

`-info  IMAGE ['DESCRIPTION']'
`info  ['DESCRIPTION']'
     Show version information about `IMAGE'.

`-unlynx IMAGE LYNXFILE'
`unlynx LYNXFILE'
     Unlynx `LYNXFILE' into the image.

`-zcreate  IMAGE DUMP ['DESCR']'
`zcreate IMAGE DUMP ['DESCR']'
     Build `IMAGE' from a Zipcoded image made up of files called
     `1!DUMP', `2!DUMP', `3!DUMP', `4!DUMP'.

   When more than one command is specified in batch mode, all of them
are executed in the same order they have on the command line.


File: vice.info,  Node: Acknowledgments,  Next: Copyright,  Prev: c1541,  Up: Top

Acknowledgments
***************

   VICE derives from X64, the first Commodore 64 emulator for the X
Window System.  Here is an informal list of the people who were mostly
involved in the development of X64 and VICE:

   The VICE core team:

   * Ettore Perazzoli (<ettore@comm2000.it>) made the 6510, VIC-II,
     VIC-I and CRTC emulations, part of the hardware-level 1541
     emulation, speed optimizations, bug fixes, the event-driven
     cycle-exact engine, the Xt/Xaw/Xfwf-based GUI for X11, a general
     code reorganization, the new resource handling, most of the
     documentation and the MS-DOS port (well, somebody had to do it).

   * Teemu Rantanen (<tvr@cs.hut.fi>) implemented the SID emulation and
     the trap-based disk drive and serial bus implementation; added
     support for multiple display depths under X11.

   * Andr'e Fachat (<fachat@physik.tu-chemnitz.de>) wrote the PET
     emulators, the CIA and VIA emulation, the IEEE488 interface,
     implemented the IEC serial bus in `xvic' and made tons of bug
     fixes.

   * Daniel Sladic (<sladic@eecg.toronto.edu>) started the work on
     hardware-level 1541 emulation and wrote the new monitor introduced
     with VICE 0.15.

   * Andreas Boose (<boose@linux.rz.fh-hannover.de>) gave lots of
     information and bug reports about the VIC-II, the 6510 and the
     CIAs; moreover, he wrote several test-routines that were used to
     improve the emulation.  Also contributed some important patches,
     fixed several problems in the 1541 emulation, implemented the
     SpeedDOS parallel cable emulation and added cartridge support.

   Former team members:

   * Jouko Valta (<jopi@stekt.oulu.fi>) wrote `petcat' and `c1541',
     `T64' handling, user service and maintenance (most of the work in
     x64 0.3.x was made by him); retired from the project in July 96,
     after VICE 0.10.0.

   * Jarkko Sonninen (<sonninen@lut.fi>) was the founder of the
     project, wrote the old version of the 6502 emulation and the
     XDebugger, and retired from the project after x64 0.2.1.

   External contributors:

   * Michael Schwendt (<sidplay@geocities.com>) helped with the SID
     (audio) chip emulation, bringing important suggestions and bug
     reports, as well as the wave tables and filter emulation from his
     SIDplay emulator.

   * Christian Bauer (<bauec002@goofy.zdv.uni-mainz.de>) wrote the very
     interesting "VIC article" from which we got invaluable information
     about the VIC-II chip: without this, the VIC-II implementation
     would have not been possible.

   * Wolfgang Lorenz wrote an excellent 6510 test suite that helped us
     to debug the CPU emulation.

   * Giuliano Procida (<gpp10@cam.ac.uk>) is the maintainer of the VICE
     `deb' package for the Debian distribution.

   * Nathan Hand is (was?) the maintainer of the VICE `rpm' package for
     the Red Hat distribution.

   * Marko M"akel"a (<msmakela@nic.funet.fi>) wrote lots of CPU
     documentation.

   * Martin Pottendorfer (<Martin.Pottendorfer@aut.alcatel.at>)
     implemented the "Contents" button in the file selector and
     provided us with several suggestions and constant testing of
     constantly broken snapshots.

   * Chris Sharp (<sharpc@hurlsey.ibm.com>) wrote the AIX sound driver.

   * Krister Walfridsson (<cato@df.lth.se>) implemented joystick and
     sound support for NetBSD.

   * Dag Lem (<resid@nimrod.no>) implemented an alternative cycle-exact
     SID emulator (reSID), and contributed a bugfix in our SID
     emulation.

   * Peter Andrew Felvegi aka Petschy (<petschy@derceto.sch.bme.hu>)
     fixed a couple of bugs in the fast serial emulation.

   * Olaf Seibert (<rhialto@polder.ubc.kun.nl>) contributed some PET,
     and disk drive patches.

   * Daniel Fandrich (<dan@fch.wimsey.bc.ca>) contributed some disk
     drive patches.

   * Heiko Selber (<selber@fhi-berlin.mpg.de>) contributed some VIC20
     I/O patches.

   * Steven Tieu (<stieu@physics.ubc.ca>) added initial support for
     16/24 bpp X11 displays.

   * Alexander Lehmann (<alex@mathematik.th-darmstadt.de>) added
     complete support for all the VIC20 memory configurations for the
     old VICE 0.12.

   * Lionel Ulmer implemented joystick support for Linux and a first
     try of a SID emulation for SGI machines.

   * Bernhard Kuhn (<kuhn@eikon.e-technik.tu-muenchen.de>) made some
     joystick improvements for Linux.

   * Gerhard Wesp (<gwesp@cosy.sbg.ac.at>) contributed the `extract'
     command in `c1541'.

   * Ricardo Ferreira (<storm@esoterica.pt>) contributed the `unlynx'
     and `system' commands in `c1541'.

   * Tomi Ollila (<Tomi.Ollila@tfi.net>) donated `findpath.c'.

   * Richard Hable (<hab@fim.uni-linz.ac.at>) contributed the initial
     version of the REU Emulation.

   * Vesa-Matti Puro (<vmp@lut.fi>) wrote the very first 6502 CPU
     emulator in x64 0.1.0. That was the beginning of the story...

   * Dan Miner (<dminer@nyx10.cs.du.edu>) contributed some patches to
     the fast disk drive emulation.

   * Frank Prindle (<Frank.Prindle@lambada.oit.unc.edu>) contributed
     some patches.

   * Peter Weighill (<stuce@csv.warwick.ac.uk>) gave many ideas and
     contributed the ROM patcher.

   * Dominique Strigl (<strigl@sxb.bsf.alcatel.fr>), Craig Jackson
     (<Craig.Jackson@lambada.oit.unc.edu>) and Lasse Jyrkinen
     ((<Lasse.Jyrkinen@uz.kuleuven.ac.be>) contributed miscellaneous
     patches in the old X64 times.

   * Per Olofsson (<MagerValp@Goth.Org>) digitalized the C64 colors
     used in the default palette.

   * Paul David Doherty (<h0142kdd@rz.hu-berlin.de>) wrote `zip2disk',
     on which the Zipcode support in `c1541' is based.

   * Robert H. Forsman Jr., Brian Totty (<totty@cs.uiuc.edu>) and
     Robert W. McMullen (<rwmcm@orion.ae.utexas.edu>) provided the
     widget set for implementing the `Xaw' GUI.

   * Shawn Hargreaves (<shawn@talula.demon.co.uk>) wrote Allegro, the
     graphics and audio library used in the MS-DOS version.

   (We hope we have not forgotten anybody; if you think we have, please
tell us.)

   Thanks also to everyone else for sending suggestions, ideas, bug
reports, questions and requests.  In particular, a warm thank goes to
the following people:

   * Lutz Sammer

   * Ralph Mason (<RALPHM@msmail02.liffe.com>)

   * George Caswell (<timbuktu@the-eye.res.wpi.edu>)

   * Per Olofsson (<MagerValp@goth.org>)

   * Jasper Phillips (<philljas@newt.cs.orst.edu>)

   * Luca Forcucci (<frk@geocities.com>)

   * Asger Alstrup (<alstrup@diku.dk>)

   * Bernhard Schwall (<uzs484@uni-bonn.de>)

   * Salvatore Valente (<svalente@mit.edu>)

   * Arthur Hagen (<art@broomstick.com>)

   * Douglas Carmichael (<dcarmich@mcs.com>)

   * Ferenc Veres (<lion@c64.rulez.org>)

   Last but not least, a very special thank to Andreas Arens, Lutz
Sammer, Edgar Tornig, Christian Bauer, Wolfgang Lorenz, Miha Peternel
and Per H^akan Sundell for writing cool emulators to compete with.  :-)


File: vice.info,  Node: Copyright,  Next: Contacts,  Prev: Acknowledgments,  Up: Top

Copyright
*********

   Copyright (C) 1996-1998 Ettore Perazzoli

   Copyright (C) 1996-1998 Andr'e Fachat

   Copyright (C) 1993-1994, 1997-1998 Teemu Rantanen

   Copyright (C) 1997-1998 Daniel Sladic

   Copyright (C) 1998 Andreas Boose

   Copyright (C) 1993-1996 Jouko Valta

   Copyright (C) 1993-1994 Jarkko Sonninen

   This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

   This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

   You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software Foundation,
Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA


File: vice.info,  Node: Contacts,  Next: Concept Index,  Prev: Copyright,  Up: Top

Contact information
*******************

* Menu:

* Home page::                   The official VICE WWW page.
* Sending feedback::            How to report impressions and
                                bugs to the authors.
* Contributing::                How to help developing VICE.
* Newsgroups::                  VICE-related Usenet groups.
* FAQs you should read::        VICE-related Frequently Asked Questions.


File: vice.info,  Node: Home page,  Next: Sending feedback,  Prev: Contacts,  Up: Contacts

VICE home page
==============

   You can find the latest news about VICE at the official VICE home
page:

     http://www.tu-chemnitz.de/~fachat/vice/vice.html

   Also the public patches and beta releases will be available there as
well, so you might want to have a look at it periodically.  If you are
going to report a bug, please check those pages *first*; it is possible
that the problem you encountered has already been fixed with a newer
version.


File: vice.info,  Node: Sending feedback,  Next: Contributing,  Prev: Home page,  Up: Contacts

How to send feedback
====================

   If you want to report bugs, make suggestions or contribute to the
project, please email one of the following people:

   * Teemu Rantanen (<tvr@cs.hut.fi>) for the SID stuff;

   * Andreas Boose (<boose@linux.rz.fh-hannover.de>) for the 1541 disk
     drive;

   * Andr'e Fachat (<fachat@physik.tu-chemnitz.de>) for the PETs;

   * Ettore Perazzoli (<ettore@comm2000.it>), the current maintainer,
     for everything else.

   It's always nice to receive feedback and/or bugreports about VICE,
but please read these few notes before sending mail to anybody in the
team.

   * Please put the word `VICE' *in all capitals* in your subject line
     (e.g. `VICE fails to run game XXX').  This helps mail splitting
     and reduces chances that your message is unintentionally deleted,
     forgotten or lost.

   * Please don't send any HTML mail (we really hate that!).  If you use
     M$ Outlook or Netscape Communicator, make sure you turn off the
     "rich text" (HTML) feature.

   * Please don't send *any* binaries without asking first.

   * Please read the following documents carefully before reporting a
     bug or a problem you cannot solve:

        * the VICE documentation (you are reading it!);

        * the VICE FAQ (it is available on the Internet, and reachable
          from the VICE home page:
          http://www.tu-chemnitz.de/~fachat/vice/vice.html);

        * the `comp.emulators.cbm' and `comp.sys.cbm' FAQs (*note FAQs
          you should read::.).

   * When you report a bug, please try to be as accurate as possible and
     describe how it can be reproduced to the very detail.  You should
     also tell us what machine you are running on, what operating
     system you are using as well as the version of it.

   * Please don't ask us how to transfer original C64 disk or tapes to
     your PC; this has been asked a gazillion times through email.  To
     transfer disks, you can use the Star Commander
     (http://ludens.elte.hu/~sta/sc.html).  And no, you cannot read C64
     disks with your old 5"1/4 PC drive.

   * Please don't ask us where to find games for the emulator on the
     Internet.

   * Please don't ask us when the next version will be out, because we
     really don't know.

   * Please write in English, or in the language of the person you are
     writing to (Ettore is Italian, Andr'e and Andreas are German,
     Teemu is Finnish, Daniel is from Canada).

   In any case, we would *really* be glad to receive your comments
about VICE.

   Thanks!


File: vice.info,  Node: Contributing,  Next: Newsgroups,  Prev: Sending feedback,  Up: Contacts

How to contribute
=================

   If you want to make a major contribution, please *ask* first.  It
has already happened a couple of times that somebody started working at
something that had already been done but not released to the public yet,
and we really do *not* want anybody to waste time.

   If you are going to make a patch, please make sure the patch is
relative to the very latest version, and provide us with the following:

   * a diff file containing all the changes you have made (`diff -c' or
     `diff -u' (better) is fine; please don't use plain `diff');

   * GNU-style `ChangeLog' entries with a description of the changes you
     have made (look at the `ChangeLog's provided with the original VICE
     sources for an example).

   This is very important, and makes adding patches much smoother and
safer.

   People willing to port VICE to other platforms are always welcome.  A
Windows and a MacOS port are in the works, so if you are interested in
those platforms, please let us know.  There is plenty of work to do and
any sort of help can be very useful.


File: vice.info,  Node: Newsgroups,  Next: FAQs you should read,  Prev: Contributing,  Up: Contacts

Interesting newsgroups
======================

   There are some Usenet newsgroups you might be interested in:

   * `comp.emulators.cbm', discussing about emulators of Commodore 8-bit
     machines (definitely not Amiga emulators).

   * `comp.sys.cbm', discussing various topics regarding real Commodore
     8-bit machines.  This newsgroup is mainly for people who actually
     use original Commodore equipment (so please don't talk about
     emulation here).

   * `comp.emulators.misc', discussing emulators in general.


File: vice.info,  Node: FAQs you should read,  Prev: Newsgroups,  Up: Contacts

FAQs you should read
====================

   We recommend reading the `comp.emulators.cbm' and `comp.sys.cbm'
FAQs, which are posted regularly on the corresponding newsgroups and
are also available via FTP from ftp://rtfm.mit.edu.

