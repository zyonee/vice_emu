dnl
dnl This file is part of VICE, the Versatile Commodore Emulator.
dnl See README for copyright notice.
dnl
dnl Process this file with GNU autoconf to produce a configure script.
dnl

AC_INIT(src/maincpu.c)
AM_INIT_AUTOMAKE(vice, 1.0.32)
AM_CONFIG_HEADER(src/config.h)

AC_DEFINE(UNSTABLE)

is_dos=no
is_win32=no
is_riscos=no

dnl Try to find out which system we are on...
AC_CANONICAL_HOST

dnl Command-line options

AC_ARG_ENABLE(autobpp,[  --enable-autobpp        enable dynamic display depth support (default)])
AC_ARG_ENABLE(8bpp,[  --enable-8bpp           enable 8-bit only display depth support])
AC_ARG_ENABLE(16bpp,[  --enable-16bpp          enable 16-bit only display depth support])
AC_ARG_ENABLE(24bpp,[  --enable-24bpp          enable 24-bit only display depth support])
AC_ARG_ENABLE(textfield,[  --disable-textfield     disable enhanced text field widget])
AC_ARG_WITH(xaw3d, [  --with-xaw3d            use Xaw3d library instead of plain Xaw])
AC_ARG_WITH(readline, [  --without-readline      do not try to use the system's readline library])
AC_ARG_WITH(midas, [  --with-midas            use MIDAS sound system instead of Allegro for audio])
AC_ARG_WITH(resid, [  --without-resid         do not use the reSID engine])
AC_ARG_ENABLE(fullscreen, [  --disable-fullscreen    disable XFree86 fullscreen detection])

if test x"$enable_autobpp" = "xyes"; then
  AC_DEFINE(X_DISPLAY_DEPTH, 0)
elif test x"$enable_8bpp" = "xyes" ; then
  AC_DEFINE(X_DISPLAY_DEPTH, 8)
elif test x"$enable_16bpp" = "xyes" ; then
  AC_DEFINE(X_DISPLAY_DEPTH, 16)
elif test x"$enable_24bpp" = "xyes" ; then
  AC_DEFINE(X_DISPLAY_DEPTH, 24)
else
  echo "no display depth specified; assuming dynamic support."
  AC_DEFINE(X_DISPLAY_DEPTH, 0)
fi

if test x"$enable_textfield" != "xno"; then
  AC_DEFINE(ENABLE_TEXTFIELD)
  echo "using TextField widget."
else
  echo "using ugly Athena text widget."
fi

dnl Setup DJGPP crosscompiling.

if test x"$host_vendor" = "xgo32" -o x"$host_vendor" = "xmsdos" -o x"$host_os" = "xmsdosdjgpp"; then

  dnl Some GCC cross-compilers are installed with a different name
  dnl instead of using the GCC architecture targeting features.
  dnl Check for the most common ones.
  AC_PROG_CC

  if test "x$CC" = "xgcc" ; then
    CFLAGS="$CFLAGS -b i386-go32"
    LDFLAGS="$CFLAGS -b i386-go32"
  fi

  dnl This is used by subsequent tests.
  ac_cv_prog_gcc=yes
  GCC=yes

  is_dos=yes

  if test x"$with_midas" = "xyes" ; then
      AC_DEFINE(USE_MIDAS_SOUND)
      LIBMIDAS="-lmidas"
      echo "configuring support for MIDAS Sound System"
  else
      LIBMIDAS=""
      echo "using Allegro sound driver"
  fi

  AM_CONDITIONAL(USE_MIDAS_SOUND, test x"$with_midas" = "xyes")
  AM_CONDITIONAL(HAVE_RS232, false)
  AM_CONDITIONAL(HAVE_PRINTER, false)

  dnl We always have a joystick and mouse on MSDOS.
  AC_DEFINE(HAS_JOYSTICK)
  AC_DEFINE(HAVE_MOUSE)

elif test x"$host_os" = "xcygwin32" -o x"$host_os" = "xmingw32"; then

  dnl This is used by subsequent tests.
  AC_PROG_CC
  ac_cv_prog_gcc=yes
  GCC=yes

  is_win32=yes

  AC_DEFINE(HAS_JOYSTICK)
  AM_CONDITIONAL(HAVE_RS232, false)
  AM_CONDITIONAL(HAVE_PRINTER, false)

else

  if test -z "$CFLAGS" ; then

    dnl Check for the type of compiler first.
    AC_PROG_CC

    if test x"$GCC" = "xyes" ; then

      warnings="-Wall -Wstrict-prototypes -Winline"

      dnl Set appropriate optimization options (better than the default -g -O)
      dnl if using GCC.
      dnl `-pipe' is broken on some Alpha systems, and also `-funroll-loops'
      dnl gives troubles on both Alpha and SPARC.  That's why we use the fancy
      dnl options on x86 only.
      dnl If the user has specified her own `CFLAGS', we do not override them.

      if test "x$host_cpu" = "xi586" -o x"$host_cpu" = "xi486" -o x"$host_cpu" = "xi686" -o x"$host_cpu" = "xi386"; then

        echo using x86-specific optimizing options

        dnl `-DNO_REGPARM' should theoretically make it slower, but
        dnl regparms are so broken on the current GCC/EGCS that it's
        dnl better not to rely on them by default.
        CFLAGS="-g -O5 -fomit-frame-pointer -funroll-loops -DNO_REGPARM $warnings"

      else

        dnl Use -g if available.
        if test x"$ac_cv_prog_cc_g" = "xyes" ; then
           CFLAGS="-g -O5 -finline-functions $warnings"
        else
           CFLAGS="-O5 -finline-functions $warnings"
        fi

      fi

      dnl Check whether the options are OK.
      AC_PROG_CC

    fi

    dnl (If not on GCC, just keep the defaults, which are very conservative).

  else

    dnl The user has specified some `CFLAGS', just keep them.
    AC_PROG_CC

  fi

  is_dos=no
  is_win32=no

  dnl This is only possible on Unix (for now).
  AC_DEFINE(HAVE_RS232)
  AM_CONDITIONAL(HAVE_RS232, true)
  AC_DEFINE(HAVE_PRINTER)
  AM_CONDITIONAL(HAVE_PRINTER, true)
fi

dnl Check for needed external programs.

AC_PROG_CPP
AC_CHECK_PROG(AR, ar, ar, ar)
AC_PROG_RANLIB
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_YACC
AM_PROG_LEX

dnl Check for a perl interpreter.

AC_PATH_PROG(PERL, perl)
AC_SUBST(PERL)


dnl Setup reSID compilation.  We need a C++ compiler for this.

if test x"$with_resid" != "xno" -a -z "$CXX"; then
  AC_CHECK_PROGS(cxx, $CCC c++ g++ gcc CC cxx cc++, no)
  if test x"$cxx" = "xno"; then
    AC_MSG_WARN([C++ compiler missing, reSID will not be configured])
    with_resid=no
  fi
fi

RESID_DIR=
RESID_LIBS=
RESID_INCLUDES=
RESID_DEP=


dnl Disable installation of reSID in $prefix.
ac_cv_install_resid=no

LINKCC='$(CC)'

if test x"$with_resid" = "xno"; then
  dnl Do not attempt to configure reSID.
  dnl NOTE: no_recursion is set because directories specified with
  dnl AC_CONFIG_SUBDIRS are always recursed into regardless of where the
  dnl macro is used.
  dnl Another workaround must be found if other self-contained packages go
  dnl into VICE.
  no_recursion=yes
else
  AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  AC_PROG_CXX

  dnl Set CXXFLAGS. Use -fno-exceptions for G++ if supported.
  if test "$ac_test_CXXFLAGS" != set; then
    if test "$GXX" = yes; then
      CXXFLAGS="$CFLAGS -fno-exceptions"
      AC_MSG_CHECKING([whether the C++ compiler ($CXX $CXXFLAGS $LDFLAGS) works])
      AC_TRY_COMPILER([main(){return(0);}], ac_cv_prog_cxx_works, ac_cv_prog_cxx_cross)
      AC_MSG_RESULT($ac_cv_prog_cxx_works)
      if test $ac_cv_prog_cxx_works = no; then
        CXXFLAGS="$CFLAGS"
      fi
    else
      CXXFLAGS="$CFLAGS"
    fi
  fi

  AC_PROG_CXXCPP
  if test x"$CXX" != "x" ; then
    LINKCC='$(CXX)'
  fi
  if test x"$with_resid" = "xyes" -o x"$with_resid" = "x"; then
    AC_DEFINE(HAVE_RESID)
    AC_CONFIG_SUBDIRS(src/resid)
    RESID_DIR=resid
    RESID_LIBS="\$(top_builddir)/src/resid/libresid.a"
    RESID_INCLUDES="-I\$(top_builddir)/src/resid"
    RESID_DEP=libresid
  else
    dnl reSID is installed elsewhere, no need to configure.
    no_recursion=yes

    LDFLAGS="$LDFLAGS -L$with_resid/lib"
    CPPFLAGS="$CPPFLAGS -I$with_resid/include"

    dnl Test for libresid.a and resid/sid.h
    AC_CHECK_LIB(resid, resid_version_string,
      AC_CHECK_HEADER(resid/sid.h,
        ,
        AC_MSG_ERROR([reSID header file not found])),
      AC_MSG_ERROR([reSID library not found]))

    AC_DEFINE(HAVE_RESID)
    RESID_DIR=
    RESID_LIBS="$with_resid/lib/libresid.a"
    RESID_INCLUDES="-I$with_resid/include"
  fi

  AC_LANG_RESTORE
fi

AC_SUBST(LINKCC)

AM_CONDITIONAL(HAVE_RESID, test x"$with_resid" != "xno")

AC_SUBST(RESID_DIR)
AC_SUBST(RESID_LIBS)
AC_SUBST(RESID_INCLUDES)
AC_SUBST(RESID_DEP)


dnl Check for typedefs, structures, and compiler characteristics.

AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T

dnl Check whether inline functions are available.

AC_C_INLINE
if test x"$ac_cv_c_inline" = "xno" ; then
  CFLAGS="$CFLAGS -DNO_INLINE"
fi

dnl Define the type sizes.

if [[ x"$ac_cv_prog_cc_cross" != "xyes" ]]; then
  AC_C_BIGENDIAN
else
  dnl if cross-compiling, we have to do this by hand
  echo "warning: assuming sizeof(unsigned short) == 2,"
  echo "                  sizeof(unsigned int) == 4,"
  echo "                  sizeof(unsigned long) == 4"
fi

AC_CHECK_SIZEOF(unsigned short, 2)
AC_CHECK_SIZEOF(unsigned int, 4)
AC_CHECK_SIZEOF(unsigned long, 4)

dnl Check whether gcc needs -traditional.

AC_PROG_GCC_TRADITIONAL

dnl Check for header files.

AC_HEADER_DIRENT
AC_CHECK_HEADERS(fcntl.h limits.h strings.h sgtty.h regex.h regexp.h unistd.h)
AC_CHECK_HEADERS(sys/param.h sys/file.h sys/ioctl.h sys/time.h sys/dirent.h)
AC_CHECK_HEADERS(dir.h)

AC_DECL_SYS_SIGLIST

dnl Check for system-specific header files.

if test x"$host_vendor" != "xgo32" -a x"$host_vendor" != "xmsdos" -a x"$host_os" != "xcygwin32" -a x"$host_vendor" != "xmingw32"; then
  AC_CHECK_HEADER(linux/joystick.h,
                  [ AC_DEFINE(HAS_JOYSTICK)
                    AC_DEFINE(LINUX_JOYSTICK)
                    JOY_OBJS='$(ARCHDIR)/joystick.o' ], )
  if test x"$ac_cv_header_linux_joystick_h" = "xyes" ; then
    AC_MSG_CHECKING(whether linux/joystick.h supports digital joysticks)
    AC_TRY_COMPILE([ #include <linux/joystick.h> ],
                   [ struct DJS_DATA_TYPE djs; ],
                   [ AC_DEFINE(HAS_DIGITAL_JOYSTICK)
                     AC_MSG_RESULT(yes) ], AC_MSG_RESULT(no))
  fi
  AC_CHECK_HEADER(machine/joystick.h,
                  [ AC_DEFINE(HAS_JOYSTICK)
                    AC_DEFINE(BSD_JOYSTICK)
                    JOY_OBJS='$(ARCHDIR)/joystick.o' ], )
  AC_SUBST(JOY_OBJS)
fi

dnl Configure sound drivers

SOUND_DRIVERS=""

AC_CHECK_HEADERS(linux/soundcard.h machine/soundcard.h,
                 [SOUND_DRIVERS="$SOUND_DRIVERS sounduss.o"; break])
AC_CHECK_HEADERS(dmedia/audio.h,
                 [SOUND_DRIVERS="$SOUND_DRIVERS soundsgi.o"; break])
AC_CHECK_HEADERS(SDL_audio.h SDL_sleep.h,
                 [SOUND_DRIVERS="$SOUND_DRIVERS soundsdl.o"; break])
AC_CHECK_HEADERS(sys/audioio.h,
                 [SOUND_DRIVERS="$SOUND_DRIVERS soundsun.o"; break])

if test x"$host_os" = "xhpux"; then
  AC_CHECK_HEADERS(sys/audio.h,
                   [SOUND_DRIVERS="$SOUND_DRIVERS soundhpux.o"; break])
fi;

AC_CHECK_HEADERS(UMS/UMSAudioDevice.h,
                 [SOUND_DRIVERS="$SOUND_DRIVERS soundaix.o"; break])

dnl This one is currently unused
dnl AC_CHECK_HEADERS(allegro.h,
dnl                  [SOUND_DRIVERS="$SOUND_DRIVERS soundallegro.o"; break])

if test x"$with_midas" = "xyes"; then
    AC_CHECK_HEADERS(midasdll.h,
                     [SOUND_DRIVERS="$SOUND_DRIVERS soundmidas.o"; break])
else
    AC_CHECK_HEADERS(allegro.h,
                     [SOUND_DRIVERS="$SOUND_DRIVERS soundsb.o"; break])
fi

if [[ x"$is_win32" = "xyes" ]] ; then
    SOUND_DRIVERS="$SOUND_DRIVERS sounddx.o"
fi

AC_SUBST(SOUND_DRIVERS)

AC_CHECK_LIB(audio, ALseterrorhandler,,,$SOUND_LIBS)
AC_CHECK_LIB(UMSobj, UMSAudioDevice_initialize,,,$SOUND_LIBS)
AC_CHECK_LIB(SDL, SDL_OpenAudio,,,$SOUND_LIBS)

AC_SUBST(SOUND_LIBS)

dnl Check for library functions

if test x"$is_dos" = "xno" -a x"$is_win32" = "xno"; then
  AC_FUNC_MEMCMP
fi
AC_TYPE_SIGNAL
AC_FUNC_VFORK
AC_FUNC_ALLOCA
AC_CHECK_FUNCS(gettimeofday memmove atexit strerror strcasecmp strncasecmp)

AC_SUBST(LIBS)

dnl if usleep is not defined, compile our own version for it (usleep.o)
if [[ x"$is_win32" = "xno" ]]; then
  AC_REPLACE_FUNCS(usleep)
fi

dnl Check time.h.

AC_HEADER_TIME
AC_STRUCT_TM

dnl Check whether we have GNU readline.  If not, use our replacement.
dnl The user can force us to use the replacement with `--without-readline'.

if test x"$is_dos" != "xyes" -a x"$is_win32" != "xyes"; then
  if test x"$with_readline" != "xno" ; then
    READLINE=""
    unset ac_cv_lib_readline_readline
    AC_CHECK_LIB(readline, readline,
               [ READLINE="" LIBS="-lreadline $LIBS"],
               [ ],,)
    if test "$ac_cv_lib_readline_readline" = "no"; then
      unset ac_cv_lib_readline_readline
      AC_CHECK_LIB(readline, readline,
               [ READLINE="" LIBS="-lreadline -lncurses $LIBS"],
               [ ], "-lncurses",)
      if test "$ac_cv_lib_readline_readline" = "no"; then
        unset ac_cv_lib_readline_readline
        AC_CHECK_LIB(readline, readline,
               [ READLINE="" LIBS="-lreadline -lcurses $LIBS"],
               [ READLINE="\$(top_builddir)/src/arch/unix/readline/libreadline.a" ],
                "-lcurses",)
      fi
    fi
  else
    READLINE="\$(top_builddir)/src/arch/unix/readline/libreadline.a"
  fi
else
  READLINE=""
fi
AM_CONDITIONAL(NEED_READLINE, test x"$READLINE" = "x")
AC_SUBST(READLINE)

dnl Check for X11 libraries and header files

if test x"$is_dos" != "xyes" -a x"$is_win32" != "xyes"; then

  X_LIBS=""
  AC_PATH_XTRA

  PATH_X_LIBS=$X_LIBS
  LINK_X_LIBS=""

  AC_CHECK_LIB(socket, gethostbyname,[ X_LIBS="-lsocket $X_LIBS";
                                    LINK_X_LIBS="-lsocket $LINK_X_LIBS"],,-lnsl)
  AC_CHECK_LIB(ICE, IceConnectionNumber,[ X_LIBS="-lICE $X_LIBS";
                                    LINK_X_LIBS="-lICE $LINK_X_LIBS"],,$X_LIBS)
  AC_CHECK_LIB(SM, SmFreeProperty,[ X_LIBS="-lSM $X_LIBS";
                                    LINK_X_LIBS="-lSM $LINK_X_LIBS"],,$X_LIBS)

  dnl This is necessary because CPP tests use `CPPFLAGS' instead.
  dnl FIXME: Are we sure `AC_PATH_XTRA' will always put only X11
  dnl include paths in?  Let's hope so.
  CPPFLAGS="$CPPFLAGS $X_CFLAGS"

  MISSING_X_LIBS=""

  AC_CHECK_LIB(X11, XCreateWindow,
               [ X_LIBS="-lX11 $X_LIBS";
                 LINK_X_LIBS="-lX11 $LINK_X_LIBS"],
               [ MISSING_X_LIBS="$MISSING_X_LIBS X11" ],$X_LIBS)

  AC_CHECK_LIB(Xext, XQueryExtension,
               [ X_LIBS="-lXext $X_LIBS";
                 LINK_X_LIBS="-lXext $LINK_X_LIBS"],,$X_LIBS)

  AC_CHECK_LIB(Xt, XtToolkitInitialize,
               [ X_LIBS="-lXt $X_LIBS";
                 LINK_X_LIBS="-lXt $LINK_X_LIBS"],
               [ MISSING_X_LIBS="$MISSING_X_LIBS Xt" ],$X_LIBS)

  AC_CHECK_LIB(Xmu, XInternAtom,
               [ X_LIBS="-lXmu $X_LIBS";
                 LINK_X_LIBS="-lXmu $LINK_X_LIBS"],
               [ MISSING_X_LIBS="$MISSING_X_LIBS Xmu" ],$X_LIBS)

  dnl Check for Xaw.  Use Xaw3d if requested.
  if test x"$with_xaw3d" != "xyes" ; then
    AC_CHECK_LIB(Xaw, XawFormDoLayout,
                 [ X_LIBS="-lXaw $X_LIBS";
                   LINK_X_LIBS="-lXaw $LINK_X_LIBS"],
                 [ MISSING_X_LIBS="$MISSING_X_LIBS Xaw" ],
                 $X_LIBS $X_PRE_LIBS)
  else
    AC_CHECK_LIB(Xaw3d, XawFormDoLayout,
                 [ X_LIBS="-lXaw3d $X_LIBS";
                   LINK_X_LIBS="-lXaw3d $LINK_X_LIBS"],
                 [ MISSING_X_LIBS="$MISSING_X_LIBS Xaw3d" ],
                 $X_LIBS $X_PRE_LIBS)
  fi

  AC_CHECK_HEADER(X11/extensions/XShm.h,,)
  if test x"$ac_cv_header_X11_extensions_XShm_h" = "xyes" ; then
    AC_CHECK_LIB(Xext, XShmPutImage,
                 [ AC_DEFINE(USE_MITSHM) ],,$X_LIBS)
  fi


  AC_CHECK_LIB(Xpm, XpmCreatePixmapFromData,
               [ X_LIBS="-lXpm $X_LIBS";
                 LINK_X_LIBS="-lXpm $LINK_X_LIBS";
                 AC_DEFINE(HAVE_LIBXPM) ],,$X_LIBS)

  if test x"$MISSING_X_LIBS" != "x"; then
    echo
    echo "+++ Warning: the following important X11 libraries were not found: $MISSING_X_LIBS"
    echo "+++ You might have to edit the Makefile by hand to compile properly"
    echo
  fi

  AC_CHECK_HEADERS(X11/Sunkeysym.h X11/xpm.h)

  dnl Check for XFree86 header and library extensions.
  if test x"$enable_fullscreen" != "xno"; then
    AC_CHECK_HEADER(X11/extensions/xf86vmode.h,,)
    if test x"$ac_cv_header_X11_extensions_xf86vmode_h" = "xyes" ; then
    AC_CHECK_LIB(Xxf86vm, XF86VidModeQueryVersion,
                 [ X_LIBS="-lXxf86vm $X_LIBS";
                   LINK_X_LIBS="-lXxf86vm $LINK_X_LIBS";
                   AC_DEFINE(USE_VIDMODE_EXTENSION) ],,$X_LIBS)
    fi
  fi
  
  X_LIBS="$PATH_X_LIBS $LINK_X_LIBS"

  LIBS="$LIBS -lm"

  dnl We always have a mouse on UNIX.
  AC_DEFINE(HAVE_MOUSE)

elif [[ x"$is_dos" != "xno" ]]; then

  dnl On MS-DOS, we already know what we want.

  LIBS="-lm -lalleg $LIBMIDAS"
  AC_SUBST(LDFLAGS)

elif [[ x"$is_win32" != "xno" ]]; then

  dnl On Windows, we already know what we want.

  LIBS="-lkernel32 -luser32 -lgdi32 -lwinmm -lcomdlg32 -lcomctl32 -lddraw -ldsound -ldinput"

  x64_LDFLAGS="-mwindows"
  x128_LDFLAGS="-mwindows"
  xvic_LDFLAGS="-mwindows"
  xpet_LDFLAGS="-mwindows"
  xcbm2_LDFLAGS="-mwindows"

  X64_WINRES="\$(top_builddir)/src/arch/win32/resc64.o"
  X128_WINRES="\$(top_builddir)/src/arch/win32/resc128.o"
  XVIC_WINRES="\$(top_builddir)/src/arch/win32/resvic.o"
  XPET_WINRES="\$(top_builddir)/src/arch/win32/respet.o"
  XCBM2_WINRES="\$(top_builddir)/src/arch/win32/rescbm2.o"

  AC_SUBST(LDFLAGS)

  AC_SUBST(WINDRES)

fi

AC_SUBST(x64_LDFLAGS)
AC_SUBST(x128_LDFLAGS)
AC_SUBST(xvic_LDFLAGS)
AC_SUBST(xpet_LDFLAGS)
AC_SUBST(xcbm2_LDFLAGS)

AC_SUBST(X64_WINRES)
AC_SUBST(X128_WINRES)
AC_SUBST(XVIC_WINRES)
AC_SUBST(XPET_WINRES)
AC_SUBST(XCBM2_WINRES)

dnl Setup the system-specific object files.

if test x"$is_dos" != "xyes" -a x"$is_win32" != "xyes" -a x"$is_riscos" != "xyes"; then
  ARCH_DIR="\$(top_builddir)/src/arch/unix"
  ARCH_LIBS="$ARCH_DIR/libarch.a $ARCH_DIR/xaw/libxawui.a $ARCH_DIR/xaw/widgets/libwidgets.a"
  ARCH_INCLUDES="-I\$(top_srcdir)/src/arch/unix/ -I\$(top_srcdir)/src/arch/unix/xaw"
  AM_CONDITIONAL(UNIX_COMPILE, true)
  AM_CONDITIONAL(WIN32_COMPILE, false)
  AM_CONDITIONAL(MSDOS_COMPILE, false)
  AM_CONDITIONAL(RISCOS_COMPILE, false)
  AC_DEFINE(HAVE_READLINE)
elif [[ x"$is_win32" != "xno" ]]; then
  ARCH_DIR="\$(top_builddir)/src/arch/win32"
  ARCH_LIBS="$ARCH_DIR/libarch.a"
  ARCH_INCLUDES="-I\$(top_srcdir)/src/arch/win32/"
  AM_CONDITIONAL(UNIX_COMPILE, false)
  AM_CONDITIONAL(WIN32_COMPILE, true)
  AM_CONDITIONAL(MSDOS_COMPILE, false)
  AM_CONDITIONAL(RISCOS_COMPILE, false)
elif [[ x"$is_dos" != "xno" ]]; then
  ARCH_INCLUDES="-I\$(top_srcdir)/src/arch/msdos/"
  ARCH_DIR="\$(top_builddir)/src/arch/msdos"
  ARCH_LIBS="$ARCH_DIR/libarch.a"
  AM_CONDITIONAL(UNIX_COMPILE, false)
  AM_CONDITIONAL(WIN32_COMPILE, false)
  AM_CONDITIONAL(MSDOS_COMPILE, true)
  AM_CONDITIONAL(RISCOS_COMPILE, false)
else
  ARCH_INCLUDES="-I\$(top_srcdir)/src/arch/riscos/"
  ARCH_DIR="\$(top_builddir)/src/arch/riscos"
  ARCH_LIBS="$ARCH_DIR/libarch.a"
  AM_CONDITIONAL(UNIX_COMPILE, false)
  AM_CONDITIONAL(WIN32_COMPILE, false)
  AM_CONDITIONAL(MSDOS_COMPILE, false)
  AM_CONDITIONAL(RISCOS_COMPILE, true)
fi

AC_SUBST(HAVE_READLINE)
AC_SUBST(ARCH_INCLUDES)
AC_SUBST(ARCH_LIBS)
AC_SUBST(ARCH_DIR)
AC_SUBST(LIBOBJS)
AC_SUBST(SUBDIRS)
AC_SUBST(SOUND_USS_OBJ)
AC_SUBST(SOUND_SGI_OBJ)
AC_SUBST(SOUND_HPUX_OBJ)
AC_SUBST(SOUND_AIX_OBJ)
AC_SUBST(SOUND_MIDAS_OBJ)
AC_SUBST(SOUND_SDL_OBJ)

if test "$prefix" = NONE && test "$exec_prefix" = NONE; then
  AC_DEFINE_UNQUOTED(PREFIX, "$ac_default_prefix")
elif test "$prefix" = NONE; then
  AC_DEFINE_UNQUOTED(PREFIX, "$exec_prefix")
else
  AC_DEFINE_UNQUOTED(PREFIX, "$prefix")
fi

if false ; then
    dnl Now produce the directories & Makefiles.

    mkdir -p arch/msdos
    mkdir -p arch/riscos
    mkdir -p arch/win32
    mkdir -p arch/unix/widgets
    mkdir -p arch/unix/readline
    mkdir -p arch/unix/xaw
    mkdir -p c64
    mkdir -p pet
    mkdir -p vic20

    if test x"$srcdir" != "x." ; then
        BINDIR="./bin"
        mkdir -p "$BINDIR"
        rm -f "$BINDIR/C64" "$BINDIR/PET" "$BINDIR/VIC20"
        $LN_S "../$srcdir/../bin/C64" "$BINDIR/C64"
        $LN_S "../$srcdir/../bin/PET" "$BINDIR/PET"
        $LN_S "../$srcdir/../bin/VIC20" "$BINDIR/VIC20"
    else
        BINDIR="../bin"
    fi

    AC_SUBST(BINDIR)
fi

AC_OUTPUT([Makefile
           data/Makefile
           data/C128/Makefile
           data/C64/Makefile
           data/CBM-II/Makefile
           data/DRIVES/Makefile
           data/PET/Makefile
           data/VIC20/Makefile
           doc/Makefile
           doc/html/Makefile
           man/Makefile
           src/Makefile
           src/arch/Makefile
           src/arch/msdos/Makefile
           src/arch/riscos/Makefile
           src/arch/unix/Makefile
           src/arch/unix/readline/Makefile
           src/arch/unix/xaw/Makefile
           src/arch/unix/xaw/widgets/Makefile
           src/arch/win32/Makefile
           src/c128/Makefile
           src/c64/Makefile
           src/cbm2/Makefile
           src/drive/Makefile
           src/pet/Makefile
           src/raster/Makefile
           src/sid/Makefile
           src/sounddrv/Makefile
           src/vdrive/Makefile
           src/vic20/Makefile
           src/vicii/Makefile
           src/crtc/Makefile
           ])

dnl Local Variables:
dnl mode: autoconf
dnl compile-command: "autoconf"
dnl End:
