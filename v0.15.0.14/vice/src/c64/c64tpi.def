/* -*- C -*-
 * c64tpi.def - IEEE488 interface for the C64.
 *
 * Written by
 *   André Fachat (a.fachat@physik.tu-chemnitz.de)
 *
 * This file is part of VICE, the Versatile Commodore Emulator.
 * See README for copyright notice.
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 *  02111-1307  USA.
 *
 */

#define	mytpi	tpi

#define	MYTPI	TPI

INCLUDES()
{
#include "parallel.h"
#include "tpi.h"

#define	mycpu_set_int(a,b)		do {} while(0)
#define	mycpu_restore_int(a,b)		do {} while(0)

#define	TPI_SET_CA(a)
#define	TPI_SET_CB(a)
}

RESET()
{
	/* assuming input after reset */
	par_set_atn(0);
	par_set_ndac(0);
	par_set_nrfd(0);
	par_set_dav(0);
	par_set_eoi(0);
	par_set_bus(0);
}

STORE_PA()
{
	{ BYTE tmp = ~byte;
	    par_set_atn( tmp & 0x08 );
	    par_set_dav( tmp & 0x10 );
	    par_set_eoi( tmp & 0x20 );
	    par_set_ndac( tmp & 0x40 );
	    par_set_nrfd( tmp & 0x80 );
	}
}

STORE_PB()
{
	par_set_bus( ~byte );
}

UNDUMP_PA()
{
	{ BYTE tmp = ~byte;
	    par_set_atn( tmp & 0x08 );
	    par_set_dav( tmp & 0x10 );
	    par_set_eoi( tmp & 0x20 );
	    par_set_ndac( tmp & 0x40 );
	    par_set_nrfd( tmp & 0x80 );
	}
}

UNDUMP_PB()
{
	par_set_bus( ~byte );
}

#define	STORE_PC
#define	UNDUMP_PC

READ_PA()
{
	byte = 0x07;
	byte += par_atn ? 0 : 8;
	byte += par_dav ? 0 : 16;
	byte += par_eoi ? 0 : 32;
	byte += par_ndac ? 0 : 64;
	byte += par_nrfd ? 0 : 128;

	byte = (byte & ~tpi[TPI_DDPA]) | (tpi[TPI_PA] & tpi[TPI_DDPA]);
}

READ_PB()
{
	byte = par_bus;
	byte = (byte & ~tpi[TPI_DDPB]) | (tpi[TPI_PB] & tpi[TPI_DDPB]);
}

READ_PC()
{
	byte = (0xff & ~tpi[TPI_DDPC]) | (tpi[TPI_PC] & tpi[TPI_DDPC]);
}

