dnl
dnl This file is part of VICE, the Versatile Commodore Emulator.
dnl See README for copyright notice.
dnl
dnl Process this file with GNU autoconf to produce a configure script.
dnl

AC_INIT(src/maincpu.c)
AM_INIT_AUTOMAKE(vice, 1.9.68)
AM_CONFIG_HEADER(src/config.h)

AC_DEFINE(UNSTABLE)

is_dos=no
is_win32=no
is_riscos=no
is_os2=no
is_beos=no

dnl Try to find out which system we are on...
AC_CANONICAL_HOST

dnl Command-line options

AC_ARG_ENABLE(textfield,[  --disable-textfield     disable enhanced text field widget])
AC_ARG_WITH(xaw3d, [  --with-xaw3d            use Xaw3d library instead of plain Xaw])
AC_ARG_WITH(readline, [  --without-readline      do not try to use the system's readline library])
AC_ARG_WITH(midas, [  --with-midas            use MIDAS sound system instead of Allegro for audio])
AC_ARG_WITH(arts, [  --with-arts             use aRts sound system])
AC_ARG_ENABLE(sdl, [  --with-sdl              use sdl sound system])
AC_ARG_WITH(resid, [  --without-resid         do not use the reSID engine])
AC_ARG_ENABLE(fullscreen, [  --enable-fullscreen     enable XFree86 fullscreen detection], [ echo checking for XFree86 fullscreen requested...], [enable_fullscreen="no"; echo no explicit checking for XFree86 fullscreen requested, disabling fullscreen...])
AC_ARG_ENABLE(gnomeui,[  --enable-gnomeui        enables gnome ui support])
AC_ARG_ENABLE(nls,[  --disable-nls        disables national language support])

if test x"$enable_gnomeui" = "xyes" ; then
  AC_DEFINE(USE_GNOMEUI)
fi

AM_CONDITIONAL(GNOMEUI, test x"$enable_gnomeui" = "xyes")

if test x"$enable_textfield" != "xno"; then
  AC_DEFINE(ENABLE_TEXTFIELD)
  echo "using TextField widget."
else
  echo "using ugly Athena text widget."
fi

user_cflags=$CFLAGS
AC_PROG_CC

dnl Setup DJGPP crosscompiling.

if test x"$host_vendor" = "xgo32" -o x"$host_vendor" = "xmsdos" -o x"$host_os" = "xmsdosdjgpp"; then

  dnl Some GCC cross-compilers are installed with a different name
  dnl instead of using the GCC architecture targeting features.
  dnl Check for the most common ones.

  if test "x$CC" = "xgcc" -a "x$host_vendor" != "xmsdos" -a "x`uname -s`" != "xMS-DOS"; then
    CFLAGS="$CFLAGS -b i386-go32"
    LDFLAGS="$CFLAGS -b i386-go32"
  fi

  dnl This is used by subsequent tests.
  ac_cv_prog_gcc=yes
  GCC=yes

  is_dos=yes

  if test x"$with_midas" = "xyes" ; then
      AC_DEFINE(USE_MIDAS_SOUND)
      LIBMIDAS="-lmidas"
      echo "configuring support for MIDAS Sound System"
  else
      LIBMIDAS=""
      echo "using Allegro sound driver"
  fi

  AM_CONDITIONAL(USE_MIDAS_SOUND, test x"$with_midas" = "xyes")
  AM_CONDITIONAL(HAVE_RS232, false)

  dnl We always have a joystick and mouse on MSDOS.
  AC_DEFINE(HAS_JOYSTICK)
  AC_DEFINE(HAVE_MOUSE)
  AC_DEFINE(HAS_SINGLE_CANVAS)

elif test x"$host_os" = "xcygwin32" -o x"$host_os" = "xmingw32"; then

  dnl This is used by subsequent tests.
  ac_cv_prog_gcc=yes
  GCC=yes

  is_win32=yes

  AC_DEFINE(HAS_JOYSTICK)
  AC_DEFINE(HAVE_MOUSE)
  AM_CONDITIONAL(HAVE_RS232, false)

  AC_TRY_LINK([#include <windows.h>], [LARGE_INTEGER li; return (int) li.QuadPart],
  	 AC_DEFINE(HAS_LONGLONG_INTEGER),)
  AC_TRY_LINK([#include <windows.h>], [HGLOBAL hGlobal; UnlockResource(hGlobal); return 0],
         AC_DEFINE(HAS_UNLOCKRESOURCE),)

elif test x"$host_vendor" = "xbeos"; then

  dnl This is used by subsequent tests.
  ac_cv_prog_gcc=yes
  GCC=yes

  is_beos=yes

  AC_DEFINE(HAS_JOYSTICK)
  AC_DEFINE(HAVE_MOUSE)
  AM_CONDITIONAL(HAVE_RS232, false)

else

  if test -z "$user_cflags" ; then

    dnl Check for the type of compiler first.
    if test x"$GCC" = "xyes" ; then

      if test x"$enable_gnomeui" != "xyes" ; then
          warnings="-Wall -Wstrict-prototypes -Winline"
      else
	  dnl "-Wstrict-prototypes" gives zillions of warnings in gtk headers
	  warnings="-Wall -Winline"
      fi

      dnl Set appropriate optimization options (better than the default -g -O)
      dnl if using GCC.
      dnl `-pipe' is broken on some Alpha systems, and also `-funroll-loops'
      dnl gives troubles on both Alpha and SPARC.  That's why we use the fancy
      dnl options on x86 only.
      dnl If the user has specified her own `CFLAGS', we do not override them.

      if test "x$host_cpu" = "xi586" -o x"$host_cpu" = "xi486" -o x"$host_cpu" = "xi686" -o x"$host_cpu" = "xi386"; then

        echo using x86-specific optimizing options

        dnl `-DNO_REGPARM' should theoretically make it slower, but
        dnl regparms are so broken on the current GCC/EGCS that it's
        dnl better not to rely on them by default.
        CFLAGS="-g -O5 -DNO_REGPARM $warnings"

      else

        dnl Use -g if available.
        if test x"$ac_cv_prog_cc_g" = "xyes" ; then
           CFLAGS="-g -O5 -finline-functions $warnings"
        else
           CFLAGS="-O5 -finline-functions $warnings"
        fi

      fi

      dnl Check whether the options are OK.
      AC_PROG_CC

    fi

    dnl (If not on GCC, just keep the defaults, which are very conservative).

  fi

  is_dos=no
  is_win32=no
  is_riscos=no
  is_os2=no
  is_beos=no

  dnl This is only possible on Unix (for now).
  AC_DEFINE(HAVE_RS232)
  AM_CONDITIONAL(HAVE_RS232, true)

  AC_DEFINE(USE_COLOR_MANAGEMENT)
fi

AM_CONDITIONAL(DOS_OR_WIN, test x"$is_dos" = "xyes" -o x"$is_win32" = "xyes")

dnl Check for needed external programs.

AC_PROG_CPP
AC_CHECK_PROG(AR, ar, ar, ar)
AC_PROG_RANLIB
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_YACC
AM_PROG_LEX

dnl NLS stuff
dnl Its has been rejected to use the full GNU gettext package 
dnl delivered within the source. This is a minimum replacement implementing
dnl a simple check to find `libintl.h' and `gettext'.
dnl

dnl Add new languages here
ALL_LINGUAS="de fr it sv pl"

dnl These rules are solely for the distribution goal.  While doing this
dnl we only have to keep exactly one list of the available catalogs
dnl in configure.in.
for lang in $ALL_LINGUAS; do
  GMOFILES="$GMOFILES $lang.gmo"
  POFILES="$POFILES $lang.po"
done
AC_SUBST(GMOFILES)
AC_SUBST(POFILES)

if test x"$enable_nls" != x"no" ; then
  AC_CHECK_HEADER(libintl.h,
    [AC_CACHE_CHECK([for gettext in libc], gt_cv_func_gettext_libc,
      [AC_TRY_LINK([#include <libintl.h>], [return (int) gettext ("")],
  	 gt_cv_func_gettext_libc=yes, gt_cv_func_gettext_libc=no)])
     if test "$gt_cv_func_gettext_libc" = "yes" \
  	|| test "$gt_cv_func_gettext_libintl" = "yes"; then
  	AC_DEFINE(HAVE_GETTEXT)
  	AM_PATH_PROG_WITH_TEST(MSGFMT, msgfmt,
  	  [test -z "`$ac_dir/$ac_word -h 2>&1 | grep 'dv '`"], no)dnl
  	if test "$MSGFMT" != "no"; then
  	  AC_CHECK_FUNCS(dcgettext)
  	  AC_PATH_PROG(GMSGFMT, gmsgfmt, $MSGFMT)
  	  AM_PATH_PROG_WITH_TEST(XGETTEXT, xgettext,
  	    [test -z "`$ac_dir/$ac_word -h 2>&1 | grep '(HELP)'`"], :)
  	  AC_TRY_LINK(, [extern int _nl_msg_cat_cntr;
  			 return _nl_msg_cat_cntr],
  	    [CATOBJEXT=.gmo
  	     DATADIRNAME=share],
  	    [CATOBJEXT=.mo
  	     DATADIRNAME=lib])
  	  INSTOBJEXT=.mo
  	fi
        USE_NLS=yes
	AC_DEFINE(ENABLE_NLS)
	AC_DEFINE(HAVE_LIBINTL_H)
	AC_DEFINE_UNQUOTED(DATADIRNAME, "$DATADIRNAME")
	dnl this is prefixed with PREFIX
	AC_DEFINE(NLS_LOCALEDIR, PREFIX"/"DATADIRNAME"/locale")
      else
        AC_MSG_WARN([libintl.h not found, disabling NLS])
        USE_NLS=no
      fi
  ])
  dnl Test whether we really found GNU xgettext.
  if test "$XGETTEXT" != ":"; then
    dnl If it is no GNU xgettext we define it as : so that the
    dnl Makefiles still can work.
    if $XGETTEXT --omit-header /dev/null 2> /dev/null; then
      : ;
    else
      AC_MSG_RESULT(
    	[found xgettext program is not GNU xgettext; ignore it])
      XGETTEXT=":"
    fi
  fi

  dnl Test wether GMSGFMT is there. Should fix `make dist'.
  if test "$GMSGFMT" = "" ; then
    GMSGFMT=":"
  fi

  # We need to process the po/ directory.
  POSUB=po
  
  AC_OUTPUT_COMMANDS(
    [case "$CONFIG_FILES" in *po/Makefile.in*)
      sed -e "/POTFILES =/r po/POTFILES" po/Makefile.in > po/Makefile
    esac])
  
  dnl Make all variables we use known to autoconf.
  AC_SUBST(USE_INCLUDED_LIBINTL)
  AC_SUBST(CATALOGS)
  AC_SUBST(DATADIRNAME)
  AC_SUBST(INSTOBJEXT)
  AC_SUBST(INTLDEPS)
  AC_SUBST(INTLLIBS)
  AC_SUBST(INTLOBJS)
  AC_SUBST(POSUB)
  AC_SUBST(GENCAT)

  dnl If the AC_CONFIG_AUX_DIR macro for autoconf is used we possibly
  dnl find the mkinstalldirs script in another subdir but ($top_srcdir).
  dnl Try to locate is.
  MKINSTALLDIRS=
  if test -n "$ac_aux_dir"; then
    MKINSTALLDIRS="$ac_aux_dir/mkinstalldirs"
  fi
  if test -z "$MKINSTALLDIRS"; then
    MKINSTALLDIRS="\$(top_srcdir)/mkinstalldirs"
  fi
  AC_SUBST(MKINSTALLDIRS)

  dnl currently no catgets support, can't check it.
  GENCAT=
  AC_SUBST(GENCAT)
else
  AC_MSG_WARN([disabling NLS on user request])
  USE_NLS=no
fi

if test x"$USE_NLS" = x"" ; then
  USE_NLS=no
fi
if test "$MSGFMT" = "no" ; then
  dnl Fallback to shipped .gmo 
  dnl Those should work on x86 linux systems.
  AC_MSG_WARN([msgfmt not found, falling back to default catalogs (x86/Linux)])
  CATOBJEXT=".gmo"
fi
AC_SUBST(CATOBJEXT)
AC_SUBST(USE_NLS)
AC_SUBST(NLS_LOCALEDIR)

dnl Check for a perl interpreter.
AC_PATH_PROG(PERL, perl)
AC_SUBST(PERL)
 
dnl Check and setup aRts compilation.
if test x"$with_arts" = "xyes"; then
	AC_CHECK_PROGS(artsc_config, artsc-config, no)
	if test x"$artsc_config" = "xno"; then
		AC_MSG_WARN([artsc-config not found. aRts will not be configured])
                with_arts=no
        fi
else
	with_arts=no
fi

dnl Check and setup SDL compilation.
if test x"$with_sdl" = "xyes"; then
	AC_CHECK_PROGS(sdl_config, sdl-config, no)
	if test x"$sdl_config" = "xno"; then
		AC_MSG_WARN([sdl-config not found. SDL will not be configured])
                with_sdl=no
        fi
else
	with_sdl=no
fi

dnl Setup reSID compilation.  We need a C++ compiler for this.

if test x"$with_resid" != "xno" -a -z "$CXX"; then
  AC_CHECK_PROGS(cxx, $CCC c++ g++ gcc CC cxx cc++, no)
  if test x"$cxx" = "xno"; then
    AC_MSG_WARN([C++ compiler missing, reSID will not be configured])
    with_resid=no
  fi
fi

RESID_DIR=
RESID_LIBS=
RESID_INCLUDES=
RESID_DEP=


LINKCC='$(CC)'

if test x"$with_resid" = "xno"; then
  dnl Do not attempt to configure reSID.
  dnl NOTE: no_recursion is set because directories specified with
  dnl AC_CONFIG_SUBDIRS are always recursed into regardless of where the
  dnl macro is used.
  dnl Another workaround must be found if other self-contained packages go
  dnl into VICE.
  no_recursion=yes
else
  AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  AC_PROG_CXX

  dnl Set CXXFLAGS. Use -fno-exceptions for G++ if supported.
  if test "$ac_test_CXXFLAGS" != set; then
    if test "$GXX" = yes; then
      CXXFLAGS="$CFLAGS -fno-exceptions"
      AC_MSG_CHECKING([whether the C++ compiler ($CXX $CXXFLAGS $LDFLAGS) works])
      AC_TRY_COMPILE([],
                     [ int test; ],
                     [ AC_MSG_RESULT(yes) ],
                     [ AC_MSG_RESULT(no)
                       CXXFLAGS="$CFLAGS"
                       ])
    else
      CXXFLAGS="$CFLAGS"
    fi
  fi

  AC_PROG_CXXCPP
  if test x"$CXX" != "x" ; then
    LINKCC='$(CXX)'
  fi
  if test x"$with_resid" = "xyes" -o x"$with_resid" = "x"; then
    AC_DEFINE(HAVE_RESID)
    AC_CONFIG_SUBDIRS(src/resid)
    RESID_DIR=resid
    RESID_LIBS="\$(top_builddir)/src/resid/libresid.a"
    RESID_INCLUDES="-I\$(top_builddir)/src/resid"
    RESID_DEP=libresid
  else
    dnl reSID is installed elsewhere, no need to configure.
    no_recursion=yes

    LDFLAGS="$LDFLAGS -L$with_resid/lib"
    CPPFLAGS="$CPPFLAGS -I$with_resid/include"

    dnl Test for libresid.a and resid/sid.h
    AC_CHECK_LIB(resid, resid_version_string,
      AC_CHECK_HEADER(resid/sid.h,
        ,
        AC_MSG_ERROR([reSID header file not found])),
      AC_MSG_ERROR([reSID library not found]))

    AC_DEFINE(HAVE_RESID)
    RESID_DIR=
    RESID_LIBS="$with_resid/lib/libresid.a"
    RESID_INCLUDES="-I$with_resid/include"
  fi

  AC_LANG_RESTORE
fi

AC_SUBST(LINKCC)

AM_CONDITIONAL(HAVE_RESID, test x"$with_resid" != "xno")

AC_SUBST(RESID_DIR)
AC_SUBST(RESID_LIBS)
AC_SUBST(RESID_INCLUDES)
AC_SUBST(RESID_DEP)


dnl Check for typedefs, structures, and compiler characteristics.

AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T

dnl Check whether inline functions are available.

AC_C_INLINE
if test x"$ac_cv_c_inline" = "xno" ; then
  CFLAGS="$CFLAGS -DNO_INLINE"
fi

dnl Define the type sizes.

if [[ x"$ac_cv_prog_cc_cross" != "xyes" ]]; then
  AC_C_BIGENDIAN
else
  dnl if cross-compiling, we have to do this by hand
  echo "warning: assuming sizeof(unsigned short) == 2,"
  echo "                  sizeof(unsigned int) == 4,"
  echo "                  sizeof(unsigned long) == 4"
fi

AC_CHECK_SIZEOF(unsigned short, 2)
AC_CHECK_SIZEOF(unsigned int, 4)
AC_CHECK_SIZEOF(unsigned long, 4)

dnl Check whether gcc needs -traditional.

AC_PROG_GCC_TRADITIONAL

dnl Check for header files.

AC_HEADER_DIRENT
AC_CHECK_HEADERS(fcntl.h limits.h strings.h sgtty.h regex.h regexp.h \
unistd.h sys/param.h sys/types.h sys/ioctl.h sys/time.h sys/dirent.h \
dir.h commctrl.h shlobj.h errno.h io.h sys/stat.h signal.h)

AC_DECL_SYS_SIGLIST

dnl Check for system-specific header files.

if test x"$host_vendor" != "xgo32" -a x"$host_vendor" != "xmsdos" -a x"$host_os" != "xcygwin32" -a x"$host_vendor" != "xmingw32"; then
  AC_CHECK_HEADER(linux/joystick.h,
                  [ AC_DEFINE(HAS_JOYSTICK)
                    AC_DEFINE(LINUX_JOYSTICK)
                    JOY_OBJS='$(ARCHDIR)/joystick.o' ], )
  if test x"$ac_cv_header_linux_joystick_h" = "xyes" ; then
    AC_MSG_CHECKING(whether linux/joystick.h supports digital joysticks)
    AC_TRY_COMPILE([ #include <linux/joystick.h> ],
                   [ struct DJS_DATA_TYPE djs; ],
                   [ AC_DEFINE(HAS_DIGITAL_JOYSTICK)
                     AC_MSG_RESULT(yes) ], AC_MSG_RESULT(no))
  fi
  AC_CHECK_HEADER(machine/joystick.h,
                  [ AC_DEFINE(HAS_JOYSTICK)
                    AC_DEFINE(BSD_JOYSTICK)
                    JOY_OBJS='$(ARCHDIR)/joystick.o' ], )
  AC_SUBST(JOY_OBJS)
fi

dnl Configure sound drivers

SOUND_DRIVERS=""

if test x"$is_dos" != "xyes" -a x"$is_win32" != "xyes" -a x"$is_beos" != "xyes"; then

if test x"$with_arts" = "xyes"; then
	AC_DEFINE(USE_ARTS)
	CFLAGS="$CFLAGS `artsc-config --cflags`"
	LIBS="$LIBS `artsc-config --libs`"
	SOUND_DRIVERS="$SOUND_DRIVERS soundarts.o"
fi

if test x"$with_sdl" = "xyes"; then
	SOUND_DRIVERS="$SOUND_DRIVERS soundsdl.o"
fi

AC_CHECK_HEADERS(linux/soundcard.h machine/soundcard.h,
                 [SOUND_DRIVERS="$SOUND_DRIVERS sounduss.o"; break])
AC_CHECK_HEADERS(dmedia/audio.h,
                 [SOUND_DRIVERS="$SOUND_DRIVERS soundsgi.o"; break])
AC_CHECK_HEADERS(sys/audioio.h,
                 [SOUND_DRIVERS="$SOUND_DRIVERS soundsun.o"; break])
AC_CHECK_HEADERS(esd.h,
                 [SOUND_DRIVERS="$SOUND_DRIVERS soundesd.o"; break])

if test x"$with_sdl" = "xyes"; then
  AC_CHECK_HEADERS(SDL/SDL_audio.h,
                   [SOUND_DRIVERS="$SOUND_DRIVERS soundsdl.o"; break])
fi

if test x"$host_os" = "xhpux"; then
  AC_CHECK_HEADERS(sys/audio.h,
                   [SOUND_DRIVERS="$SOUND_DRIVERS soundhpux.o"; break])
fi;

AC_CHECK_HEADERS(UMS/UMSAudioDevice.h,
                 [SOUND_DRIVERS="$SOUND_DRIVERS soundaix.o"; break])
fi

if [[ x"$is_dos" = "xyes" ]] ; then
    if test x"$with_midas" = "xyes"; then
        AC_CHECK_HEADERS(midasdll.h,
                         [SOUND_DRIVERS="$SOUND_DRIVERS soundmidas.o"; break])
    else
        AC_CHECK_HEADERS(allegro.h,
                         [SOUND_DRIVERS="$SOUND_DRIVERS soundsb.o"; break])
    fi
fi

if [[ x"$is_win32" = "xyes" ]] ; then
    SOUND_DRIVERS="$SOUND_DRIVERS sounddx.o soundwmm.o"
fi

if [[ x"$is_beos" = "xyes" ]] ; then
    SOUND_DRIVERS="$SOUND_DRIVERS soundbeos.o"
fi

AC_SUBST(SOUND_DRIVERS)

if test x"$with_arts" = "xyes"; then
	AC_CHECK_LIB(artsc, arts_init,,,$SOUND_LIBS)
fi

if test x"$with_sdl" = "xyes"; then
	LIBS="$LIBS `sdl-config --libs`"
	AC_CHECK_LIB(SDL, SDL_OpenAudio,,,$SOUND_LIBS)
fi

AC_CHECK_LIB(audio, ALseterrorhandler,,,$SOUND_LIBS)
AC_CHECK_LIB(UMSobj, UMSAudioDevice_initialize,,,$SOUND_LIBS)
AC_CHECK_LIB(esd, esd_open_sound,,,$SOUND_LIBS)

AC_SUBST(SOUND_LIBS)

dnl Check for library functions

if test x"$is_dos" = "xno" -a x"$is_win32" = "xno"; then
  AC_FUNC_MEMCMP
fi
AC_TYPE_SIGNAL
AC_FUNC_VFORK
AC_CHECK_FUNCS(gettimeofday memmove atexit strerror strcasecmp strncasecmp)

AC_SUBST(LIBS)

dnl if usleep is not defined, compile our own version for it (usleep.o)
if [[ x"$is_win32" = "xno" ]]; then
  AC_REPLACE_FUNCS(usleep)
fi

dnl Check time.h.

AC_HEADER_TIME
AC_STRUCT_TM

dnl Check whether we have GNU readline.  If not, use our replacement.
dnl The user can force us to use the replacement with `--without-readline'.

if test x"$is_dos" != "xyes" -a x"$is_win32" != "xyes" -a x"$is_beos" != "xyes"; then
  if test x"$with_readline" != "xno" ; then
    READLINE=""
    unset ac_cv_lib_readline_readline
    AC_CHECK_LIB(readline, readline,
               [ READLINE="" LIBS="-lreadline $LIBS"],
               [],,)
    if test "$ac_cv_lib_readline_readline" = "no"; then
      unset ac_cv_lib_readline_readline
      AC_CHECK_LIB(readline, readline,
               [ READLINE="" LIBS="-lreadline -lncurses $LIBS"],
               [], "-lncurses",)
      if test "$ac_cv_lib_readline_readline" = "no"; then
        unset ac_cv_lib_readline_readline
        AC_CHECK_LIB(readline, readline,
               [ READLINE="" LIBS="-lreadline -lcurses $LIBS"],
               [ READLINE="\$(top_builddir)/src/arch/unix/readline/libreadline.a" ],
                "-lcurses",)
      else
        AC_CHECK_LIB(readline, rl_readline_name,
                     [ AC_DEFINE(HAVE_RLNAME) ],,)
      fi
    else
      AC_CHECK_LIB(readline, rl_readline_name,
                   [ AC_DEFINE(HAVE_RLNAME) ],,)
    fi
  else
    READLINE="\$(top_builddir)/src/arch/unix/readline/libreadline.a"
  fi
else
  READLINE=""
fi
AM_CONDITIONAL(NEED_READLINE, test x"$READLINE" != "x")
AC_SUBST(READLINE)


dnl Check for zlib

AC_CHECK_HEADER(zlib.h,,)
if test x"$ac_cv_header_zlib_h" = "xyes" ; then
  AC_CHECK_LIB(z, zlibVersion,
               [ LIBS="-lz $LIBS";
                 AC_DEFINE(HAVE_ZLIB) ],,)
fi

dnl Configure graphics output drivers

GFXOUTPUT_DRIVERS=""

if test x"$is_dos" != "xyes" -a x"$is_beos" != "xyes"; then
  dnl Check for the PNG library.
  AC_CHECK_HEADER(png.h,,)
  if test x"$ac_cv_header_png_h" = "xyes" ; then
    unset ac_cv_lib_png_png_check_sig
    AC_CHECK_LIB(png, png_check_sig,
                 [ LIBS="-lpng $LIBS";
                   GFXOUTPUT_DRIVERS="$GFXOUTPUT_DRIVERS pngdrv.o";
                   AC_DEFINE(HAVE_PNG) ],,)
    if test "$ac_cv_lib_png_png_check_sig" = "no"; then
      unset ac_cv_lib_png_png_check_sig
      AC_CHECK_LIB(png, png_check_sig,
                   [ LIBS="-lpng -lz $LIBS";
                     GFXOUTPUT_DRIVERS="$GFXOUTPUT_DRIVERS pngdrv.o";
                     AC_DEFINE(HAVE_PNG) ],,"-lz")
    fi
  fi
fi

AC_SUBST(GFXOUTPUT_DRIVERS)


dnl Check for X11 libraries and header files

if test x"$is_dos" != "xyes" -a x"$is_win32" != "xyes" -a x"$is_beos" != "xyes" -a x"$enable_gnomeui" != "xyes" ; then

  X_LIBS=""
  AC_PATH_XTRA

  PATH_X_LIBS=$X_LIBS
  LINK_X_LIBS=""

  AC_CHECK_LIB(socket, gethostbyname,[ X_LIBS="-lsocket $X_LIBS";
                                    LINK_X_LIBS="-lsocket $LINK_X_LIBS"],,-lnsl)
  AC_CHECK_LIB(ICE, IceConnectionNumber,[ X_LIBS="-lICE $X_LIBS";
                                    LINK_X_LIBS="-lICE $LINK_X_LIBS"],,$X_LIBS)
  AC_CHECK_LIB(SM, SmFreeProperty,[ X_LIBS="-lSM $X_LIBS";
                                    LINK_X_LIBS="-lSM $LINK_X_LIBS"],,$X_LIBS)

  dnl This is necessary because CPP tests use `CPPFLAGS' instead.
  dnl FIXME: Are we sure `AC_PATH_XTRA' will always put only X11
  dnl include paths in?  Let's hope so.
  CPPFLAGS="$CPPFLAGS $X_CFLAGS"

  MISSING_X_LIBS=""

  AC_CHECK_LIB(X11, XCreateWindow,
               [ X_LIBS="-lX11 $X_LIBS";
                 LINK_X_LIBS="-lX11 $LINK_X_LIBS"],
               [ MISSING_X_LIBS="$MISSING_X_LIBS X11" ],$X_LIBS)

  AC_CHECK_LIB(Xext, XQueryExtension,
               [ X_LIBS="-lXext $X_LIBS";
                 LINK_X_LIBS="-lXext $LINK_X_LIBS"],,$X_LIBS)

  AC_CHECK_LIB(Xv, XvQueryExtension,
               [ X_LIBS="-lXv $X_LIBS";
                 LINK_X_LIBS="-lXv $LINK_X_LIBS";
                 AC_DEFINE(HAVE_XVIDEO) ],,$X_LIBS)

  AC_CHECK_LIB(Xt, XtToolkitInitialize,
               [ X_LIBS="-lXt $X_LIBS";
                 LINK_X_LIBS="-lXt $LINK_X_LIBS"],
               [ MISSING_X_LIBS="$MISSING_X_LIBS Xt" ],$X_LIBS)

  AC_CHECK_LIB(Xmu, XInternAtom,
               [ X_LIBS="-lXmu $X_LIBS";
                 LINK_X_LIBS="-lXmu $LINK_X_LIBS"],
               [ MISSING_X_LIBS="$MISSING_X_LIBS Xmu" ],$X_LIBS)

  dnl Check for Xaw.  Use Xaw3d if requested.
  if test x"$with_xaw3d" != "xyes" ; then
    AC_CHECK_LIB(Xaw, XawFormDoLayout,
                 [ X_LIBS="-lXaw $X_LIBS";
                   LINK_X_LIBS="-lXaw $LINK_X_LIBS"],
                 [ MISSING_X_LIBS="$MISSING_X_LIBS Xaw" ],
                 $X_LIBS $X_PRE_LIBS)
  else
    AC_CHECK_LIB(Xaw3d, XawFormDoLayout,
                 [ X_LIBS="-lXaw3d $X_LIBS";
                   LINK_X_LIBS="-lXaw3d $LINK_X_LIBS"],
                 [ MISSING_X_LIBS="$MISSING_X_LIBS Xaw3d" ],
                 $X_LIBS $X_PRE_LIBS)
  fi

  AC_CHECK_HEADER(X11/extensions/XShm.h,,)
  if test x"$ac_cv_header_X11_extensions_XShm_h" = "xyes" ; then
    AC_CHECK_LIB(Xext, XShmPutImage,
                 [ AC_DEFINE(USE_MITSHM) ],,$X_LIBS)
  fi


  AC_CHECK_LIB(Xpm, XpmCreatePixmapFromData,
               [ X_LIBS="-lXpm $X_LIBS";
                 LINK_X_LIBS="-lXpm $LINK_X_LIBS";
                 AC_DEFINE(HAVE_LIBXPM) ],,$X_LIBS)

  if test x"$MISSING_X_LIBS" != "x"; then
    echo
    echo "+++ Warning: the following important X11 libraries were not found: $MISSING_X_LIBS"
    echo "+++ You might have to edit the Makefile by hand to compile properly"
    echo
  fi

  AC_CHECK_HEADERS(X11/Sunkeysym.h X11/xpm.h)

  dnl Check for XFree86 header and library extensions.
  FULLSCREEN_DRIVERS=""
  if test x"$enable_fullscreen" != "xno"; then
    AC_CHECK_HEADER(X11/extensions/xf86vmode.h,,)
    if test x"$ac_cv_header_X11_extensions_xf86vmode_h" = "xyes" ; then
      AC_CHECK_LIB(Xxf86vm, XF86VidModeQueryVersion,
                   [ X_LIBS="-lXxf86vm $X_LIBS";
                     LINK_X_LIBS="-lXxf86vm $LINK_X_LIBS";
                     FULLSCREEN_DRIVERS="$FULLSCREEN_DRIVERS vidmode.o";
                     AC_DEFINE(USE_XF86_VIDMODE_EXT)
		     AC_DEFINE(USE_XF86_EXTENSIONS)],,$X_LIBS)
      if test x"$ac_cv_lib_Xxf86vm_XF86VidModeQueryVersion" = "xyes" ; then
        AC_CHECK_HEADER(X11/extensions/xf86dga.h,,)
        if test x"$ac_cv_header_X11_extensions_xf86dga_h" = "xyes" ; then
          AC_CHECK_LIB(Xxf86dga, XF86DGAQueryExtension,
                       [ X_LIBS="-lXxf86dga $X_LIBS";
                         LINK_X_LIBS="-lXxf86dga $LINK_X_LIBS";
                         FULLSCREEN_DRIVERS="$FULLSCREEN_DRIVERS dga1.o";
                         AC_DEFINE(USE_XF86_EXTENSIONS)
                         AC_DEFINE(USE_XF86_DGA1_EXTENSIONS)],,$X_LIBS)
        fi
      fi
    fi
    AC_CHECK_HEADER(X11/extensions/xf86dga.h,,)
    if test x"$ac_cv_header_X11_extensions_xf86dga_h" = "xyes" ; then
      AC_CHECK_LIB(Xxf86dga, XDGAQueryExtension,
                   [ X_LIBS="-lXxf86dga $X_LIBS";
                     LINK_X_LIBS="-lXxf86dga $LINK_X_LIBS";
		     FULLSCREEN_DRIVERS="$FULLSCREEN_DRIVERS dga2.o";
		     AC_DEFINE(USE_XF86_EXTENSIONS)
		     AC_DEFINE(USE_XF86_DGA2_EXTENSIONS)],,$X_LIBS)
    fi
  fi
  AC_SUBST(FULLSCREEN_DRIVERS)

  X_LIBS="$PATH_X_LIBS $LINK_X_LIBS"

  LIBS="$LIBS -lm"

  dnl We always have a mouse on UNIX.
  AC_DEFINE(HAVE_MOUSE)

elif [[ x"$is_dos" != "xno" ]]; then

  dnl On MS-DOS, we already know what we want.

  LIBS="$LIBS -lm -lalleg $LIBMIDAS"
  AC_SUBST(LDFLAGS)

elif [[ x"$is_beos" != "xno" ]]; then

  dnl On BEOS, we already know what we want.

  LIBS="$LIBS -lbe -ltracker -ldevice -lgame"
  AC_SUBST(LDFLAGS)

elif [[ x"$is_win32" != "xno" ]]; then

  dnl On Windows, we already know what we want.

  LIBS="$LIBS -lkernel32 -luser32 -lgdi32 -lwinmm -lcomdlg32 -lcomctl32 -lddraw -ldsound -ldinput"

  AC_CHECK_LIB(dxguid, GUID_SysMouse,[LIBS="$LIBS -ldxguid"; AC_DEFINE(HAVE_GUIDLIB)],,$LIBS)

  AC_MSG_CHECKING([whether DWORD is defined as unsigned long or unsigned int in the Mingw32 headers])
  AC_TRY_COMPILE([#include <windows.h>
extern DWORD test;
unsigned long test; ],
                 ,
                 [ AC_DEFINE(DWORD_IS_LONG)
                   AC_MSG_RESULT(unsigned long) ], AC_MSG_RESULT(unsigned int))

  x64_LDFLAGS="-mwindows"
  x128_LDFLAGS="-mwindows"
  xvic_LDFLAGS="-mwindows"
  xpet_LDFLAGS="-mwindows"
  xplus4_LDFLAGS="-mwindows"
  xcbm2_LDFLAGS="-mwindows"

  X64_WINRES="\$(top_builddir)/src/arch/win32/resc64.o"
  X128_WINRES="\$(top_builddir)/src/arch/win32/resc128.o"
  XVIC_WINRES="\$(top_builddir)/src/arch/win32/resvic.o"
  XPET_WINRES="\$(top_builddir)/src/arch/win32/respet.o"
  XPLUS4_WINRES="\$(top_builddir)/src/arch/win32/resplus4.o"
  XCBM2_WINRES="\$(top_builddir)/src/arch/win32/rescbm2.o"

  AC_SUBST(LDFLAGS)

  if test -z "$WINDRES" ; then
    WINDRES="windres"
  fi

  AC_SUBST(WINDRES)

elif [[ x"${enable_gnomeui}" = x"yes" ]] ; then

  LIBS="${LIBS} `gnome-config --libs gnomeui`"

  dnl We always have a mouse on UNIX/Gnome.
  AC_DEFINE(HAVE_MOUSE)

  dnl Check for XFree86 header and library extensions.

  AC_CHECK_LIB(Xv, XvQueryExtension,
               [ X_LIBS="-lXv $X_LIBS";
                 LINK_X_LIBS="-lXv $LINK_X_LIBS";
                 AC_DEFINE(HAVE_XVIDEO) ],,$X_LIBS)

  AC_CHECK_LIB(Xext, XShmQueryExtension,
               [ AC_DEFINE(USE_MITSHM) ],,$X_LIBS)

  dnl Check for XFree86 header and library extensions.
  FULLSCREEN_DRIVERS=""
  if test x"$enable_fullscreen" != "xno"; then
    AC_CHECK_HEADER(X11/extensions/xf86vmode.h,,)
    if test x"$ac_cv_header_X11_extensions_xf86vmode_h" = "xyes" ; then
      AC_CHECK_LIB(Xxf86vm, XF86VidModeQueryVersion,
                   [ X_LIBS="-lXxf86vm $X_LIBS";
                     LINK_X_LIBS="-lXxf86vm $LINK_X_LIBS";
                     FULLSCREEN_DRIVERS="$FULLSCREEN_DRIVERS vidmode.o";
                     AC_DEFINE(USE_XF86_VIDMODE_EXT)
                     AC_DEFINE(USE_XF86_EXTENSIONS)],,$X_LIBS)
      if test x"$ac_cv_lib_Xxf86vm_XF86VidModeQueryVersion" = "xyes" ; then
        AC_CHECK_HEADER(X11/extensions/xf86dga.h,,)
        if test x"$ac_cv_header_X11_extensions_xf86dga_h" = "xyes" ; then
          AC_CHECK_LIB(Xxf86dga, XF86DGAQueryExtension,
                       [ X_LIBS="-lXxf86dga $X_LIBS";
                         LINK_X_LIBS="-lXxf86dga $LINK_X_LIBS";
                         FULLSCREEN_DRIVERS="$FULLSCREEN_DRIVERS dga1.o";
                         AC_DEFINE(USE_XF86_EXTENSIONS)
                         AC_DEFINE(USE_XF86_DGA1_EXTENSIONS)],,$X_LIBS)
        fi
      fi
    fi
    AC_CHECK_HEADER(X11/extensions/xf86dga.h,,)
    if test x"$ac_cv_header_X11_extensions_xf86dga_h" = "xyes" ; then
      AC_CHECK_LIB(Xxf86dga, XDGAQueryExtension,
                   [ X_LIBS="-lXxf86dga $X_LIBS";
                     LINK_X_LIBS="-lXxf86dga $LINK_X_LIBS";
                     FULLSCREEN_DRIVERS="$FULLSCREEN_DRIVERS dga2.o";
                     AC_DEFINE(USE_XF86_EXTENSIONS)
                     AC_DEFINE(USE_XF86_DGA2_EXTENSIONS)],,$X_LIBS)
    fi
  fi
  AC_SUBST(FULLSCREEN_DRIVERS)

fi

AC_SUBST(x64_LDFLAGS)
AC_SUBST(x128_LDFLAGS)
AC_SUBST(xvic_LDFLAGS)
AC_SUBST(xpet_LDFLAGS)
AC_SUBST(xplus4_LDFLAGS)
AC_SUBST(xcbm2_LDFLAGS)

AC_SUBST(X64_WINRES)
AC_SUBST(X128_WINRES)
AC_SUBST(XVIC_WINRES)
AC_SUBST(XPET_WINRES)
AC_SUBST(XPLUS4_WINRES)
AC_SUBST(XCBM2_WINRES)

dnl Setup the system-specific object files.

if test x"$is_dos" != "xyes" -a x"$is_win32" != "xyes" -a x"$is_riscos" != "xyes" -a x"$is_os2" != "xyes" -a x"$is_beos" != "xyes"; then
  ARCH_DIR="\$(top_builddir)/src/arch/unix"
  if test x"$enable_gnomeui" != "xyes" ; then
    ARCH_LIBS="$ARCH_DIR/libarch.a $ARCH_DIR/x11/libx11ui.a $ARCH_DIR/x11/xaw/libxawui.a $ARCH_DIR/x11/xaw/widgets/libwidgets.a $ARCH_DIR/libarch.a $ARCH_DIR/x11/libx11ui.a"
    ARCH_INCLUDES="-I\$(top_srcdir)/src/arch/unix"
  else
    ARCH_LIBS="$ARCH_DIR/x11/gnome/libgnomeui.a $ARCH_DIR/libarch.a $ARCH_DIR/x11/libx11ui.a $ARCH_DIR/x11/gnome/libgnomeui.a $ARCH_DIR/x11/libx11ui.a $ARCH_DIR/libarch.a"
    ARCH_INCLUDES="-I\$(top_srcdir)/src/arch/unix `gnome-config --cflags gnomeui`"
  fi
  AM_CONDITIONAL(UNIX_COMPILE, true)
  AM_CONDITIONAL(WIN32_COMPILE, false)
  AM_CONDITIONAL(MSDOS_COMPILE, false)
  AM_CONDITIONAL(RISCOS_COMPILE, false)
  AM_CONDITIONAL(OS2_COMPILE, false)
  AM_CONDITIONAL(BEOS_COMPILE, false)
  AC_DEFINE(HAVE_READLINE)
elif [[ x"$is_win32" != "xno" ]]; then
  ARCH_DIR="\$(top_builddir)/src/arch/win32"
  ARCH_LIBS="$ARCH_DIR/libarch.a"
  ARCH_INCLUDES="-I\$(top_srcdir)/src/arch/win32/"
  AM_CONDITIONAL(UNIX_COMPILE, false)
  AM_CONDITIONAL(WIN32_COMPILE, true)
  AM_CONDITIONAL(MSDOS_COMPILE, false)
  AM_CONDITIONAL(RISCOS_COMPILE, false)
  AM_CONDITIONAL(OS2_COMPILE, false)
  AM_CONDITIONAL(BEOS_COMPILE, false)
elif [[ x"$is_dos" != "xno" ]]; then
  ARCH_INCLUDES="-I\$(top_srcdir)/src/arch/msdos/"
  ARCH_DIR="\$(top_builddir)/src/arch/msdos"
  ARCH_LIBS="$ARCH_DIR/libarch.a"
  AM_CONDITIONAL(UNIX_COMPILE, false)
  AM_CONDITIONAL(WIN32_COMPILE, false)
  AM_CONDITIONAL(MSDOS_COMPILE, true)
  AM_CONDITIONAL(RISCOS_COMPILE, false)
  AM_CONDITIONAL(OS2_COMPILE, false)
  AM_CONDITIONAL(BEOS_COMPILE, false)
elif [[ x"$is_os2" != "xno" ]]; then
  ARCH_INCLUDES="-I\$(top_srcdir)/src/arch/os2/"
  ARCH_DIR="\$(top_builddir)/src/arch/os2"
  ARCH_LIBS="$ARCH_DIR/libarch.a"
  AM_CONDITIONAL(UNIX_COMPILE, false)
  AM_CONDITIONAL(WIN32_COMPILE, false)
  AM_CONDITIONAL(MSDOS_COMPILE, false)
  AM_CONDITIONAL(RISCOS_COMPILE, false)
  AM_CONDITIONAL(OS2_COMPILE, true)
  AM_CONDITIONAL(BEOS_COMPILE, false)
elif [[ x"$is_beos" != "xno" ]]; then
  ARCH_INCLUDES="-I\$(top_srcdir)/src/arch/beos/"
  ARCH_DIR="\$(top_builddir)/src/arch/beos"
  ARCH_LIBS="$ARCH_DIR/libarch.a"
  AM_CONDITIONAL(UNIX_COMPILE, false)
  AM_CONDITIONAL(WIN32_COMPILE, false)
  AM_CONDITIONAL(MSDOS_COMPILE, false)
  AM_CONDITIONAL(RISCOS_COMPILE, false)
  AM_CONDITIONAL(OS2_COMPILE, false)
  AM_CONDITIONAL(BEOS_COMPILE, true)
else
  ARCH_INCLUDES="-I\$(top_srcdir)/src/arch/riscos/"
  ARCH_DIR="\$(top_builddir)/src/arch/riscos"
  ARCH_LIBS="$ARCH_DIR/libarch.a"
  AM_CONDITIONAL(UNIX_COMPILE, false)
  AM_CONDITIONAL(WIN32_COMPILE, false)
  AM_CONDITIONAL(MSDOS_COMPILE, false)
  AM_CONDITIONAL(RISCOS_COMPILE, true)
  AM_CONDITIONAL(OS2_COMPILE, false)
  AM_CONDITIONAL(BEOS_COMPILE, false)
fi

dnl Check wether we have gcc and solaris /usr/openwin stuff.
dnl The headers there give zillions of warnings because of implicit int 
dnl declarations. gcc's >= 2.6.3 know the `-Wno-implicit-int' option so I 
dnl don't care about checking it out. MP

if test x"$GCC" = "xyes" ; then
  case "$host_os" in
    solaris*)
      if echo ${CFLAGS} ${ARCH_INCLUDES} | grep "I/usr/openwin/include" > /dev/null 2>&1 ; then
  	CFLAGS="${CFLAGS} -Wno-implicit-int"
      fi
      ;;
    *)
      ;;  
  esac
fi

AC_SUBST(HAVE_READLINE)
AC_SUBST(ARCH_INCLUDES)
AC_SUBST(ARCH_LIBS)
AC_SUBST(ARCH_DIR)
AC_SUBST(LIBOBJS)
AC_SUBST(SOUND_USS_OBJ)
AC_SUBST(SOUND_SGI_OBJ)
AC_SUBST(SOUND_HPUX_OBJ)
AC_SUBST(SOUND_AIX_OBJ)
AC_SUBST(SOUND_MIDAS_OBJ)
AC_SUBST(SOUND_SDL_OBJ)

if test "$prefix" = NONE && test "$exec_prefix" = NONE; then
  AC_DEFINE_UNQUOTED(PREFIX, "$ac_default_prefix")
elif test "$prefix" = NONE; then
  AC_DEFINE_UNQUOTED(PREFIX, "$exec_prefix")
else
  AC_DEFINE_UNQUOTED(PREFIX, "$prefix")
fi

if false ; then
    dnl Now produce the directories & Makefiles.

    mkdir -p arch/beos
    mkdir -p arch/msdos
    mkdir -p arch/os2
    mkdir -p arch/os2/dialogs
    mkdir -p arch/os2/icons
    mkdir -p arch/os2/kbd
    mkdir -p arch/os2/snippets
    mkdir -p arch/os2/vac++
    mkdir -p arch/riscos
    mkdir -p arch/unix
    mkdir -p arch/unix/readline
    mkdir -p arch/unix/x11
    mkdir -p arch/unix/x11/gnome
    mkdir -p arch/unix/x11/xaw
    mkdir -p arch/unix/x11/xaw/widgets
    mkdir -p arch/win32
    mkdir -p c128
    mkdir -p c64
    mkdir -p c64/cart
    mkdir -p cbm2
    mkdir -p crtc
    mkdir -p diskimage
    mkdir -p drive
    mkdir -p fsdevice
    mkdir -p gfxoutputdrv
    mkdir -p imagecontents
    mkdir -p monitor
    mkdir -p pet
    mkdir -p plus4
    mkdir -p printerdrv
    mkdir -p resid
    mkdir -p sid
    mkdir -p sounddrv
    mkdir -p tape
    mkdir -p vdc
    mkdir -p vdrive
    mkdir -p vic20
    mkdir -p vicii
    mkdir -p video 

    if test x"$srcdir" != "x." ; then
        BINDIR="./bin"
        mkdir -p "$BINDIR"
        rm -f "$BINDIR/C64" "$BINDIR/PET" "$BINDIR/VIC20"
        $LN_S "../$srcdir/../bin/C64" "$BINDIR/C64"
        $LN_S "../$srcdir/../bin/PET" "$BINDIR/PET"
        $LN_S "../$srcdir/../bin/VIC20" "$BINDIR/VIC20"
    else
        BINDIR="../bin"
    fi

    AC_SUBST(BINDIR)
fi

AC_OUTPUT([Makefile
           data/Makefile
           data/C128/Makefile
           data/C64/Makefile
           data/CBM-II/Makefile
           data/DRIVES/Makefile
           data/PET/Makefile
           data/PLUS4/Makefile
           data/PRINTER/Makefile
           data/VIC20/Makefile
           data/fonts/Makefile
           doc/Makefile
           doc/html/Makefile
           man/Makefile
           src/Makefile
           src/arch/Makefile
           src/arch/beos/Makefile
           src/arch/msdos/Makefile
           src/arch/os2/Makefile
           src/arch/os2/dialogs/Makefile
           src/arch/os2/kbd/Makefile
           src/arch/os2/snippets/Makefile
           src/arch/os2/ui/Makefile
           src/arch/os2/vac++/Makefile
           src/arch/riscos/Makefile
           src/arch/unix/Makefile
           src/arch/unix/readline/Makefile
           src/arch/unix/x11/Makefile
           src/arch/unix/x11/gnome/Makefile
           src/arch/unix/x11/xaw/Makefile
           src/arch/unix/x11/xaw/widgets/Makefile
           src/arch/win32/Makefile
           src/c128/Makefile
           src/c64/Makefile
           src/c64/cart/Makefile
           src/cbm2/Makefile
           src/crtc/Makefile
           src/diskimage/Makefile
           src/drive/Makefile
           src/fsdevice/Makefile
           src/gfxoutputdrv/Makefile
           src/imagecontents/Makefile
           src/monitor/Makefile
           src/pet/Makefile
           src/plus4/Makefile
           src/printerdrv/Makefile
           src/raster/Makefile
           src/sid/Makefile
           src/sounddrv/Makefile
           src/tape/Makefile
           src/vdc/Makefile
           src/vdrive/Makefile
           src/vic20/Makefile
           src/vicii/Makefile
           src/video/Makefile
           src/version.h
	   po/Makefile.in
           ])

dnl Local Variables:
dnl mode: autoconf
dnl compile-command: "autoconf"
dnl End:
