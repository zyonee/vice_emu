1998-09-13  Ettore Perazzoli  <ettore@comm2000.it>

	* drive/drive.c (drive_move_head): Do not display the drive track.
	(drive_enable): Force an update of the UI elements.

	* arch/unix/xaw/ui.c (ui_display_drive_led): New parameter
 	`drive_number'.
	(ui_display_drive_led): Do not realize unrealized widgets.
	(ui_display_drive_track): Do not realize unrealized widgets.

	* drive/drive.c (drive_update_ui_status): Update tracks and LEDs
 	for both drives.

	* arch/unix/xaw/ui.c: Added `drive_status' to `app_shells'; it
	replaces `drive_track_label' and `drive_led'.
	(ui_open_canvas_window): Create two drive track labels and two
	drive LEDs and initialize `drive_status'.
	(ui_toggle_drive_status): Removed.
	(ui_enable_drive_status): New function.
	(ui_display_drive_track): New parameter `drive_number'.

1998-09-13  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* drive/drivecpu-tmpl.c (mydrive_cpu_prevent_clk_overflow): Added
 	call to `mywd1770_prevent_clk_overflow()'.

	* drive/wd1770.c: #include "interrupt.h".
	(wd1770_command_restore): New function.
	((wd1770_command_seek): New function.
 	(wd1770_command_step): New function.
 	(wd1770_command_stepin): New function.
 	(wd1770_command_stepout): New function.
 	(wd1770_command_readsector): New function.
 	(wd1770_command_writesector): New function.
 	(wd1770_command_readaddress): New function.
 	(wd1770_command_forceint): New function.
 	(wd1770_command_readtrack, wd1770_command_writetrack): New
 	functions.
	(wd1770d0_prevent_clk_overflow, wd1770d1_prevent_clk_overflow):
 	New functions to prevent counter overflow.
	(store_wd1770, read_wd1770): Added WD1770 register structure.
	(wd1770_update_track_register, wd1770_motor_control): New
 	functions.

	* drive/wd1770.h: New struct `wd1770_t'.
	* c128/Makefile.am: Added `-I$(top_srcdir)/src/sid' to `INCLUDES'.
	* c64/Makefile.am: Changed likewise

	* c610/Makefile.am: Added `-I$(top_srcdir)/src/sid' to `INCLUDES'.
	Added `c610acia1.def' to `libc610_a_SOURCES'.

	* c610/c610acia1.def: Added missing file.
	* sid/sid.h: Added missing file

	* sid/Makefile.am: Added `sid.h' to `libsid_a_SOURCES'.

1998-09-13  Ettore Perazzoli  <ettore@comm2000.it>

	* c128/c128mem.c (mem_set_vbank): Really update the video bank.

1998-09-12  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.15.0.6.

	* arch/unix/vsync.c (set_timer_speed): Restored correct
	calculation of `timer_ticks'.

	* Makefile.am: Added `@RESID_LIBS@' to the X610 library list.

	* sid/resid.cc (resid_sound_machine_read): Added `int' cast to
 	shut down compiler.
	(resid_sound_machine_store): Likewise.
	(resid_sound_machine_calculate_samples): Likewise.

	* arch/unix/xaw/c64ui.c: Fixed `CheckSsColl' -> `CheckSbColl'
 	typo.

1998-09-11  André Fachat  <fachat@physik.tu-chemnitz.de>

	* Makefile.am (cpucore_sources): define for dependencies of
	6510core.c
	(maincpu_sources): added maincpu.def
	(EXTRA_DIST): added cpu-tmpl.c
	(BUILT_SOURCES): added maincpu.c
	(maincpu.c): added rule to build from maincpu.def and cpu-tmpl.c

	* c128/Makefile.am (libc128_a_SOURCES): added c128cpu.def
	(c128cpu.c): added rule to build from c128cpu.def and ../cpu-tmpl.c

	* c128/c128cpu.def: new file to make a cpu-tmpl.c a c128cpu.c

	* c610/Makefile.am (libc610_a_SOURCES): added c610cpu.def
	(c610cpu.c): added rule to build from c610cpu.def and ../cpu-tmpl.c

	* c610/c610cpu.def: new file to make a cpu-tmpl a c610cpu.c

	* cpu-tmpl.c: new file. maincpu template, derived from maincpu.c,
	c128cpu.c and c610cpu.c

	* maincpu.def: new file to make a maincpu.c out of cpu-tmpl.c

	* mem.h: removed MOS6509 and _MAINCPU_C conditional defines

	* arch/unix/xaw/c610ui.c (c610_memsize_submenu): add 1M memory
	size entry
	(model_defaults_submenu): add 620+ model (1M)
	(model_settings_submenu): add toggles for Ram1, Ram2, Ram4, Ram6

	* c610/c610cia1.def (cia1_set_ieee_dir): use oldpa
	[STORE_CIAPA]: comply with new I/O port handling
	[READ_CIAPA]: dito

	* c610/c610mem.c (set_ramsize): allow 512 and 1024k as well
	(cart1_ram, cart2_ram, cart4_ram, cart6_ram): new resources
	for setting bank15 at those places to RAM instead of ROM.
	(ram): now 1M in size for 16 possible banks of 64k
	[STORE_ZERO, STORE_RAM, READ_ZERO, READ_RAM]: defines to
	build banked memory access functions.
	(initialize_memory): check ramsize and set RAM memory functions
	as well as check cart*_ram and set RAM in bank 15
	(banknames, banknums): add more RAM banks for monitor access.
	(mem_bank_read, mem_bank_write): handle new banks

	* c610/c610mem.h [C610_RAM_SIZE]: change to 1M

	* c610/c610tpi.def [STORE_PA]: fix call to cia1_set_ieee_dir

	* crtc-tmpl.c, pet/crtc.def, c610/crtc.def [MY_WINDOW_TITLE]:
	new define for the window title.

	* c64/c64mem.c (page_zero): removed

	* pet/petmem.c (page_zero): removed

	* vic20/vic20mem.c (page_zero): removed

	* mem.h (page_zero, PAGE_ZERO): if MOS6509, then define PAGE_ZERO
	to page_zero, otherwise define PAGE_ZERO to ram
	[LOAD_ZERO]: use PAGE_ZERO instead of page_zero

1998-09-11  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.15.0.5.

	* pet/petmem.c (petmem_dump): Use the new `snapshot_module_*'
 	functions.
	(petmem_undump): Use the new `snapshot_module_*' functions.

	* pet/pet.c (pet_dump): Use the new `snapshot_module_*' functions.
	(pet_undump): Use the new `snapshot_module_*' functions.

	* interrupt.h: #include "snapshot.h".

	* via-tmpl.c (myvia_write_snapshot_module): Use the new
 	`snapshot_module_*' functions.
	(myvia_read_snapshot_module): Use the new `snapshot_module_*'
 	functions.

	* c64/c64mem.c (mem_write_snapshot_module): Use the new
 	`snapshot_module_*' functions.
	(mem_read_snapshot_module): Use the new `snapshot_module_*'
 	functions.

	* interrupt.c (interrupt_write_snapshot): Parameter `FILE *f'
 	replaced by parameter `snapshot_module_t *m'.  Use the new
 	`snapshot_module_*' functions.
	(interrupt_read_snapshot): Likewise.

	* maincpu.c (maincpu_write_snapshot_module): Use the new
 	`snapshot_module_*' functions.
	(maincpu_read_snapshot_module): Use the new `snapshot_module_*'
 	functions.

	* cia-tmpl.c (mycia_write_snapshot_module): Use the new
 	`snapshot_module_*' functions.
	(mycia_read_snapshot_module): Use the new `snapshot_module_*'
 	functions.

	* snapshot.c: New type `snapshot_module_t'.
	(snapshot_module_write_byte): New function.
	(snapshot_module_write_word): New function.
	(snapshot_module_write_dword): New function.
	(snapshot_module_write_padded_string): New function.
	(snapshot_module_write_byte_array): New function.
	(snapshot_module_read_byte): New function.
	(snapshot_module_read_word): New function.
	(snapshot_module_read_dword): New function.
	(snapshot_module_read_byte_array): New function.
	(snapshot_write_module_header): Removed.
	(snapshot_read_module_header): Removed.
	(snapshot_module_create): New function.
	(snapshot_module_open): New function.
	(snapshot_module_close): New function.

1998-09-11  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* drive/drive.c (drive_read_image_d64_d71): Handle D64 images
	attached to a 1571 like D71 images.

1998-09-11  Ettore Perazzoli  <ettore@comm2000.it>

	* arch/unix/kbd.c (kbd_event_handler): `XK_Prior' works as Restore
 	too.

	* arch/msdos/menudefs.c (ui_create_main_menu): Added back "Change
 	working directory" command.

1998-09-10  Ettore Perazzoli  <ettore@comm2000.it>

	* c64/vicii.c (vic_ii_set_ram_base): Dispatch pending alarms and
	update memory pointers.

	* c128/c128cia1.def (UNDUMP_CIAPA, UNDUMP_CIAPB): #define to
 	empty.
	(STORE_CIAPB): Handle light pen as in `c64cia1.def'.
	(READ_CIAPB): Use `oldpa' as in `c64cia1.def'.
	(READ_CIAPA): Use `oldpa' and `oldpb' as in `c64cia1.def'.

1998-09-10  André Fachat  <fachat@physik.tu-chemnitz.de>

	* c64/c64rsuser.c (c64_rsuser_init): call rsuser with the number of
	cycles for the CPU.
	* vic20/vic20rsuser.c (vic20_rsuser_init): ditto.

	* rsuser.c (rsuser_init): change parameter from clk ratio to
	cycles per seconds for the CPU. Compute cycles per bit and per
	character accurately.

	* rsuser.h (rsuser_init): changed prototype

1998-09-09  Ettore Perazzoli  <ettore@comm2000.it>

	* c64/c64rsuser.h: New file.  Include `c64_rsuser_init()'
 	prototype.

	* rsuser.h: Removed prototypes of `c64_rsuser_init()' and
 	`vic20_rsuser_init()'.

1998-09-08  Tibor Biczo  <crown@mail.matav.hu>

	* Makefile.am: Removed -lm from x64_LDADD, x128_LDADD, xvic_LDADD,
        xpet_LDADD.  It's now set in LIBS in ../configure.in .

1998-09-09  Ettore Perazzoli  <ettore@comm2000.it>

	* c128/c128mem.c (store_mmu): Argh.  When calculating the VIC-II
 	RAM base, shift bits 7 & 6 in RCR by 10 positions, not 2!

1998-09-09  André Fachat  <fachat@physik.tu-chemnitz.de>

	* data/C128/default.vkm: move alternate keyboard joystick one col
 	to the right, to fit german keyboards

	* data/C64/default.vkm: ditto

	* data/PET/busi_uk.vkm: ditto

	* doc/vice.texi: change custom joystick mapping description

	* Makefile.am (printer_ldadd, rs232_printer_ldadd): change
	printer_ldadd to rs232_printer_ldadd, add check for HAVE_RS232
	and rsuser.o
	(rs232_source): new define for rsuser.[ch]

	* arch/unix/xaw/petui.c (pet_rs232_submenu): moved from uisettings.c
	here.

	* arch/unix/xaw/uisettings.c (rsuser_device_submenu,
	acia1_device_submenu, ser1_baud_submenu, ser2_baud_submenu,
	set_rs232_device_file, set_rs232_exec_file): exported (i.e.
	removed the "static" keyword. Now they are used in the petui.c and
	vic20ui.c files
	(pet_rs232_submenu): removed -> petui.c

	* arch/unix/xaw/uisettings.h (ser1_baud_submenu, ser2_baud_submenu,
	rsuser_device_submenu, acia1_device_submenu, set_rs232_device_file,
	set_rs232_exec_file): new prototypes

	* arch/unix/xaw/vic20ui.c: new toggle `RsUser'
	(vic20_rs232_submenu): new menu for VIC20 RS232 emulation settings
	(rs232_settings_menu): new menu to include in right button menu
	(vic20_ui_init): use rs232_settings_menu) for right button menu

	* c128/c128.c (machine_init): change rsuser_init to c64_rsuser_init

	* c128/c128cia1.def [STORE_SDR]: change userport_serial_write_sr
	to rsuser_tx_byte.

	* c64/Makefile.am (resid_acia_libadd): change rsuser.o to c64rsuser.o
	(EXTRA_libc64_a_SOURCES, EXTRA_libc64c128_a_SOURCES): remove
	rsuser.[ch], add c64rsuser.c

	* c64/c64.c (machine_init): change rsuser_init to c64rsuser_init

	* c64/c64cia1.def (STORE_SDR): change userport_serial_write_sr
        to rsuser_tx_byte.

	* c64/c64cia2.def (RESET): change userport_serial_write_ctrl to
	rsuser_write_ctrl, add call to rsuser_set_tx_bit.
	(STORE_CIAPB): change userport_serial_write_ctrl to
        rsuser_write_ctrl

	* c64/c64rsuser.c: new file for C64 specific userport RS232 init
	(c64_rsuser_init): new function

	* c64/rsuser.c, c64/rsuser.h: removed

	* rsuser.c: new file (moved from c64/rsuser.c)
	changed userport_serial_* to rsuser_*
	(rsuser_init): three new parameter: clk ratio (factor to 1MHz
	CPU clock), and functions to call for start bit trigger and
	if a full byte has been received

	* rsuser.h: new file (moved from c64/rsuser.h)

	* via-tmpl.c (store_myvia): for timer B, call mycpu_set_alarm_clk
	instead of mycpu_set_alarm.
	(int_myviat2): reset myviatbi to 0 when alarm disabled.
	(myvia_read_snapshot_module): for timer B, call mycpu_set_alarm_clk
        instead of mycpu_set_alarm

	* vic20/Makefile.am (rs232_libadd): new define for vic20rsuser.o

	* vic20/vic20.c: include rs232.h and rsuser.h if HAVE_RS232
	(machine_init_resources): call rs232_init_resources and
	rsuser_init_resources.
	(machine_init_cmdline_options): call rs232_init_cmdline_options and
	rsuser_init_cmdline_options
	(machine_reset): set maincpu_int_status.alarm_handler[A_RSUSER]
	to int_rsuser; call rs232_reset and rsuser_reset
	(vsync_hook): call rsuser_prevent_clk_overflow

	* vic20/vic20rsuser.c: new file for VIC20 specific RS232
	initialization

	* vic20/vic20via2.def: include rsuser.h
	(STORE_PRB): call rsuser_write_ctrl
	(STORE_PCR): call rsuser_set_tx_bit
	(RESET): call rsuser_write_ctrl and rsuser_set_tx_bit.
	(READ_PRB): call rsuser_read_ctrl

1998-09-08  Ettore Perazzoli  <ettore@comm2000.it>

	* arch/msdos/ui.c (ui_jam_dialog): Return `UI_JAM_HARD_RESET'.

	* Version 0.15.0.4.

	* maincpu.c (maincpu_read_snapshot_module): Megakludge: Set
	`rmw_flag' to -1.

	* c64/vicii.c (vic_ii_read_snapshot_module): Call
 	`force_repaint()'.
	(vic_ii_read_snapshot_module): Handle `overscan_background_color'
	and `force_black_overscan_background_color'.

	* c128/c128cpu.c: Type of `last_opcode_info' changed to `DWORD'.

	* maincpu.c: Type of `last_opcode_info' changed to `DWORD'.
	(maincpu_write_snapshot_module): Dump `last_opcode_info'.
	(maincpu_read_snapshot_module): Undump `last_opcode_info'.

	* pet/pet.c (machine_write_snapshot): New function; it does
 	nothing for now.
	(machine_read_snapshot): Ditto.

	* vic20/vic20.c (machine_write_snapshot): New function; it does
	nothing for now.
	(machine_read_snapshot): Ditto.

	* c128/c128.c (machine_write_snapshot): New function; it does
	nothing for now.
	(machine_read_snapshot): Ditto.

	* c64/vicii.c (vic_ii_read_snapshot_module): Update `blank'.

	* cia-tmpl.c (mycia_read_snapshot_module): Make sure the port A/B
 	values have effect.

	* sounddrv/soundsun.c [__NetBSD__]: #include <sys/ioctl.h> and
 	<string.h> [reported by Ben <ben@cs.washington.edu> through the
 	online bugreport sytem].

	* c64/vicii.c (vic_ii_read_snapshot_module): Update color
 	variables.

	* cia-tmpl.c (mycia_read_snapshot_module): Do not change the IRQ
 	line.

	* c64/vicii.c (vic_ii_read_snapshot_module): Set `oldclk'.

	* maincpu.c (maincpu_read_snapshot_module): Write PC as a word.
	(maincpu_write_snapshot_module): Write PC as a word.

	* 6510core.c (IMPORT_REGISTERS): Use `JUMP' to change PC.

	* arch/unix/xaw/uicommands.c: Snapshot commands
 	`ui_snapshot_commands_menu'.

	* interrupt.h: Removed unused member
	`should_check_pending_interrupt' in `struct cpu_int_status'.

1998-09-08  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* arch/unix/xaw/uisettings.c (drive_settings_submenu): New menu
	entry `DriveTrueEmulation'.

	* autostart.c (set_true1541_mode, get_true1541_state): Changed
	resource `Drive8' to `DriveTrueEmulation'.

	* c128/Makefile.am: Added `.def' to `SUFFIXES'.  Added `c128iec.c',
	`c128cia1.def' and `c128cia1.c' to `libc128_a_SOURCES'. Added rule
	to create `c128cia1.c' from `c128cia1.def'.

	* c128/c128cia1.def: New file.

	* c128/c128iec.c: New file.

	* c64/Makefile.am: Removed `c64cia1.c', `c64cia1.def', `c64iec.c'
	and `c64iec.h' from `libc64c128_a_SOURCES'.

	* c64/c64cia2.def: Changed all references to `drive_enabled[]' to
	`drive[].enable'.
	* c64/c64iec.c: Changed likewise.
	* vic20/vic20iec.c: Changed likewise.
	* drive/drive.c: Changed likewise.

	* c64/c64iec.c (iec_fast_drive_write): Added stub
	`iec_fast_drive_write'.
	* vic20/vic20iec.c: Likewise.

	* cia1571drive0.def, cia1571drive1.def: Added #include
	"iecdrive.h".  (STORE_SDR): New function.

	* cia1581drive0.def, cia1581drive1.def (STORE_SDR): New function.

	* drive/drive.c: Moved `drive_enabled[]', `idling_method[]' and
	`drive_rom_idle_trap[]' to struct drive_t.
	Updated comments and error messages to new two drive support.
	(set_drive_true_emulation): New function to switch true drive
	emulation.  Just a stub yet.
	(drive_set_1571_side): Call `GCR_data_writeback' when the side is
	changed.

	* drive/drive.h: Added new members `enable', `idling_method' and
	`rom_idle_trap' to struct drive_t.

	* iecdrive.h: New prototypes `iec_fast_drive_write' and
	`iec_fast_cpu_write'.

1998-09-0  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* cia-tmpl.c (mycia_undump): instead of STORE_* use UNDUMP_* for
	the port values.

	* via-tmpl.c (myvia_undump): ditto

	* c64/c64cia1.def, c64/c64cia2.def, c64/c64tpi.def,
 	drive/cia1571drive0.def, drive/cia1571drive1.def,
 	drive/cia1581drive0.def, drive/cia1581drive1.def,
 	drive/via1drive0.def, drive/via1drive1.def, drive/via2drive0.def,
 	drive/via2drive1.def, pet/petvia.def, vic20/vic20via1.def,
 	vic20/vic20via2.def (UNDUMP_PRA, UNDUMP_PRB, UNDUMP_CIAPA,
 	UNDUMP_CIAPB): new definitions to be used when undumping an I/O
 	port.

1998-09-08  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* via-tmpl.c (oldpa, oldpb, READ_PRA, READ_PRB, STORE_PRA,
 	STORE_PRB): now both READ_* set the value "byte" to the value from
 	the outside, and in via-tmpl.c it is masked with the data
 	direction register and output register value.  Both STORE_* now
 	get as "byte" the value newly written to the pins, i.e. input pins
 	are set high already. They can now use oldpa and oldpb as the
 	values previously seen on the output pins.

	* cia-tmpl.c (oldpa, oldpb, READ_CIAPA, READ_CIAPB, STORE_CIAPA,
 	STORE_CIAPB): see via-tmpl.c

	* tpi-tmpl.c (oldpa, oldpb, oldpc): see via-tmpl.c

	* c64/c64cia1.def, c64/c64cia2.def, c64/c64tpi.def,
 	drive/cia1571drive0.def, drive/cia1571drive1.def,
 	drive/cia1581drive0.def, drive/cia1581drive1.def,
 	drive/via1drive0.def, drive/via1drive1.def, drive/via2drive0.def,
 	drive/via2drive1.def, pet/petvia.def, vic20/vic20via1.def,
 	vic20/vic20via2.def
	(STORE_PRA, STORE_PRB, STORE_CIAPA, STORE_CIAPB, READ_PRA,
 	READ_PRB, READ_CIAPA, READ_CIAPB): adapt to above change.

1998-09-07  Ettore Perazzoli  <ettore@comm2000.it>

	* maincpu.c (maincpu_write_snapshot_module): Dump interrupt
 	status.
	(maincpu_read_snapshot_module): Undump interrupt status.

	* interrupt.c (interrupt_read_snapshot): New function.
	(interrupt_write_snapshot): New function.

	* c64/c64.c (machine_read_snapshot): Read CIA modules.
	(machine_write_snapshot): Write CIA modules.

	* via-tmpl.c (myvia_undump): Renamed to
 	`myvia_read_snapshot_module()'.
	(myvia_dump): Renamed to `myvia_write_snapshot_module()'.

	* cia-tmpl.c (mycia_undump): Renamed to
 	`mycia_read_snapshot_module()'.
	(mycia_dump): Renamed to `mycia_write_snapshot_module()'.

	* Version 0.15.0.3.

	* arch/win32/Makefile.am (libarch_a_LIBADD): Add `resc64.o' to
	`libarch.a' using `libarch_a_LIBADD'.
	(resc64.o): Use `$<' and `$@' instead of hardcoded values.

	* Makefile.am: Removed `WIN32' conditionals.

	* utils.c (spawn) [WIN32]: Return -1.

1998-09-07  Tibor Biczo  <crown@mail.matav.hu>

	* Makefile.am: Added Win32 specific x64_LDADD variable.  Made
 	win32 specific .PHONY dependency settings.

	* arch/win32: New directory.

	* arch/Makefile.am: Added support for Win32 compile.

	* c64/cartridge.c: Removed the line including <sys/param.h>,
	vice.h already includes it, in the correct way.

	* vic20/cartridge.c: Same as above.

	* mon.c (readline): Removed static declaration. Linker couldn't
	find it.
	(add_history): Same here.

	* sound.c (sound_init): Added call to sound_init_dx_device, when
	compiling for Win32.

	* sound.h: Added prototype for sound_init_dx_device .

	* sounddrv/Makefile.am: Added sounddx.x into
 	EXTRA_libsounddrv_a_SOURCES.

	* sounddrv/sounddx.c: New file.

	* utils.c: Prevented including <sys/wait.h> while compiling for
 	Win32.
	(spawn): Emptied function when compiling for Win32.

1998-09-07  Ettore Perazzoli  <ettore@comm2000.it>

	* arch/win32/Makefile.am: New file.
	* arch/win32/c64.ico: New file.
	* arch/win32/c64kbd.c: New file.
	* arch/win32/c64ui.c: New file.
	* arch/win32/c64ui.h: New file.
	* arch/win32/dirent.c: New file.
	* arch/win32/dirent.h: New file.
	* arch/win32/joystick.c: New file.
	* arch/win32/joystick.h: New file.
	* arch/win32/kbd.c: New file.
	* arch/win32/kbd.h: New file.
	* arch/win32/lose32.h: New file.
	* arch/win32/print.c: New file.
	* arch/win32/resc64.h: New file.
	* arch/win32/resc64.r: New file.
	* arch/win32/ui.c: New file.
	* arch/win32/ui.h: New file.
	* arch/win32/uiattach.c: New file.
	* arch/win32/uiattach.h: New file.
	* arch/win32/video.c: New file.
	* arch/win32/video.h: New file.
	* arch/win32/vsync.c: New file.
	* arch/win32/vsync.h: New file.
	* arch/win32/winmain.c: New file.
	* arch/win32/winmain.h: New file.

1998-09-07  André Fachat  <fachat@physik.tu-chemnitz.de>

	* cia-tmpl.c (mycia_dump): replace "clk" with "myclk"
	(mycia_undump): ditto

	* pet/pet.c: include snapshot.h
	include rs232.h if necessary
	(pet_dump, pet_undump): new functions to dump the PET configuration.

	* pet/petmem.c: include snapshot.h
	(petmem_dump, petmem_undump): new functions to dump PET memory

	* pet/petmem.h (petmem_dump, petmem_undump): new prototypes

	* via-tmpl.c: include snapshot.h
	(myvia_dump, myvia_undump): new functions to dump the VIA state
	* cia-tmpl.c (mycia_dump): new function to dump a CIA snapshot
	(mycia_undump): new function to read in a snapshot

	* arch/unix/xaw/uisettings.c (RsUser): changed from TOGGLE to
	RADIO.
	(rs232_submenu): change 9600 baud userport entry to baud rate
	radio selection.

	* c128/c128.c (vsync_hook): call rsuser_prevent_clk_overflow
	* c64/c64.c (vsync_hook): ditto

	* c64/c64cia2.def (STORE_CIAPA): add call to rsuser_set_tx_bit()
	when writing to port A

	* c64/rsuser.c (char_clk_ticks): number of clk ticks per character
	(bit_clk_ticks): number of clk ticks per data bit
	(set_up_enabled): compute *_clk_ticks values after baud rate,
	assuming 1M CPU clock frequency
	(cmdline_options): remove "+rsuser", as "-rsuser" is a radio not
	a toggle anymore
	(rsuser_reset): clear clk_start* values
	(rsuser_setup): new function to setup the rs232 stuff
	(userport_serial_write_ctrl): don't care about DTR from the
	C64, as this stuff is buggy.
	(userport_serial_read_ctrl): call rsuser_get_rx_bit()
	(keepup_tx_buffer): new function; fill buf with bits from userport
	but not for 9600 baud
	(rsuser_set_tx_bit): new function, get a new output from the C64
	(rsuser_get_rx_bit): new function, reads a bit from the incoming
	rs232 data stream
	(userport_serial_write_sr): call check_tx_buffer to send the data
	(int_rsuser): handle clk_start_rx.
	(rsuser_prevent_clk_overflow): new function, handles clk overflow

	* c64/rsuser.h (rsuser_prevent_clk_overflow, rsuser_get_rx_bit,
	rsuser_set_tx_bit): new prototypes

1998-09-06  Ettore Perazzoli  <ettore@comm2000.it>

	* resid: Added reSID distribution.

	* c64/sid.c (read_sid) [HAVE_MOUSE]: When reading from $D419 or
	$D41A, use the values from `mouse_get_x()' and `mouse_get_y()'
	without any changes.

	* arch/msdos/mouse.h (mouse_get_x): Return the value shifted right
	by 1 and ANDed with 0x7e.
	(mouse_get_y): Return the value inverted, shifted right by 1 and
	ANDed with 0x7e.

	* arch/msdos/menudefs.c (attach_disk_callback): Allow attaching of
	`.g64' files.

1998-09-06  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* arch/unix/xaw/uicommands.c (attach_disk): Changed dir mask to
	show *.D71 and *.D81 as well.

	* c1541.c: Changed `sector_map' to `sector_map_1541' and
	`speed_map' to `speed_map_1541'.
	* drive/drive.c: Changed likewise.
	* vdrive.c: Changed likewise.

	* drive/drive.c (read_image_d64): Added support for importing D71
	disk images. Renamed to `drive_read_image_d64_d71'.
	(read_image_gcr): Renamed to `drive_read_image_gcr'.
	(drive_init, drive_set_disk_drive_type): Set disk side to `0'.
	(drive_attach_floppy): Allow attaching of 1571 disks
	(drive_set_half_track): Check for 1571 track limits.
	(drive_move_head): Changed likewise.
	(GCR_data_writeback): Added support for writing D71 disk images.
	(drive_set_1571_side): New function.

	* drive/drive.h: Added new member `side' to `drive_t'.  Changed
	constants from `MAX_TRACKS_1541' to `MAX_TRACKS_1571'.

	* drive/via1drive0.def (STORE_PRA): Call `drive_set_1571_side'
	whenever sides are changed.
	(READ_PRA): Added detection of track `1'.
	* drive/via1drive1.def: Changed likewise.

	* fs_cbm.h: Added `d71' and `d81' to `hdrinfo'.

	* vdrive.c (attach_floppy_image): Allow attaching D71 disk images.
	(get_std71_header): New function.
	(check_header): Check for D71 disk images.
	(read_disk_image_contents): Set flag `D64_Header' for any disk
 	image type without header.

	* vdrive.h: Define D71 and D81 constants.

	* arch/unix/xaw/uisettings.c (set_drive9_type_submenu): Fixed
 	typo.

	* c64/c64iec.c: #include "ciad.h".
	(iec_cpu_write): Added 1581 IEC bus handling.

	* drive/Makefile.am: Added `wd1770.c' and `wd1770.h' to
	`libdrive_a_SOURCES'.

	* drive/cia1581drive0.def (STORE_CIAPB): Fixed 1581 IEC bus
	handling.
	(READ_CIAPA): Return device number.
	* drive/cia1581drive1.def: Changed likewise.

	* drive/drivecpu-tmpl.c: #include "wd1770.h".
	(reset): Reset WD1770 too.
	(mydrive_mem_init): Added WD1770 memory banking.

	* drive/drivecpu0.def: Define mywd1770.
	* drive/drivecpu1.def: Define mywd1771.

	* drive/wd1770.c: New file to handle WD1770 disk controller.
	* drive/wd1770.h: New file.

1998-09-06  Ettore Perazzoli  <ettore@comm2000.it>

	* c128/c128cpu.c: Updated `maincpu_monitor_interface' to support
 	banking.

	* arch/msdos/menudefs.c (attach_disk_callback): Allow attaching of
	`.g64' images.

1998-09-06  Dag Lem  <resid@nimrod.no>

	* Makefile.am: Support for included reSID distribution.

1998-09-03  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.15.0.2.

	* c64/c64mem.c: `exrom' and `game' in `export' changed from `int'
	to `BYTE'.
	(mem_write_snapshot_module): New function.
	(mem_read_snapshot_module): New function.

	* maincpu.c (maincpu_write_snapshot_module): New function.
	(maincpu_read_snapshot_module): New function.

	* interrupt.c: New file.
	(prevent_clk_overflow): Moved here from `interrupt.h'.
	(cpu_int_status_init): Likewise.
	(cpu_int_status_write_snapshot_module): New function.
	(cpu_int_status_read_snapshot_module): New function.

	* interrupt.h: If functions must not be inlined, compile them into
	`interrupt.o' instead of `maincpu.o'; so check for `_INTERRUPT_C'
	instead of `_MAINCPU_C'.

	* c64/c64.c (machine_write_snapshot): New function.
	(machine_read_snapshot): New function.

	* c64/vicii.c: Type of `vic' changed to BYTE.
	(vic_ii_read_snapshot_module): New function.
	(vic_ii_write_snapshot_module): New function.

	* snapshot.c: New file.
	(snapshot_write_byte): New function.
	(snapshot_write_word): New function.
	(snapshot_write_dword): New function.
	(snapshot_write_padded_string): New function.
	(snapshot_write_byte_array): New function.
	(snapshot_read_byte): New function.
	(snapshot_read_word): New function.
	(snapshot_read_dword): New function.
	(snapshot_read_byte_array): New function.
	(snapshot_create): New function.
	(snapshot_open): New function.
	(snapshot_write_module_header): New function.
	(snapshot_read_module_header): New function.
	(snapshot_close): New function.

	* drive/drivecpu-tmpl.c (mydrive_store_ram): Handle all addresses
	up to $1FFF.

	* c64/c64cia1.def: #define `myclk' to `clk', not `maincpu_clk'.
	* c64/c64cia2.def: Likewise.

	* cia-tmpl.c (store_mycia, read_mycia, peek_mycia): Use `myclk'
	instead of `clk'.
	(int_myciata, int_myciata, int_myciatb, int_myciatod): Likewise.
	(mycia_set_flag, mycia_set_sdr): Likewise.
	(mycia_prevent_clk_overflow): Likewise.
	(mycia_dump): Likewise.

	* drive/Makefile.am (drivecpu0.c, drivecpu1.c): Take the template
	file from `$(drivedir)'.

1998-09-03  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* arch/unix/xaw/c64ui.c (attach_cartridge_image_submenu): Added
	new menu entry for Super Snapshot 4 cartridge.

	* c64/c64mem.c: New variables `ramconfig' and `romconfig'.
	(store_io2, read_io2, store_io1, read_io1): Added banking for SS4
	cartridge.  (initialize_memory): Initialize SS4 cart.
	(mem_attach_cartridge): Added support for SS4 cart.
	(cartridge_config_changed): Set `romh_bank' too.

	* c64/cartridge.c (cartridge_attach_image): Added SS4 cart
	support.  (cartridge_trigger_freeze): Likewise.

	* cartridge.h: New define `CARTRIDGE_SUPER_SNAPSHOT'.

1998-09-03  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* c128/c128mem.c (store_bank_io, read_bank_io, peek_bank_io): remove
	bogus "=" in switch.

	* c64/c64mem.c (store_bank_io, read_bank_io, peek_bank_io): remove
	bogus "=" in switch.
	(mem_bank_read): use only the right address bits for chargen_rom
	access.

	* maincpu.c (maincpu_monitor_interface): replace mem_read/mem_store
	with banked mem functions.

	* mon.c (mon_cmd_array): fix entry for "bank"
	(mon_bank): new function to be called when "bank" command is used
	(get_mem_val, set_mem_val): use current_bank from mon_interfaces[]
	for banked memory functions.

	* mon.h (monitor_interface): change read_func and store_func to
	the banked memory functions.
	[STATE_BNAME]: new state for the parser.
	(mon_bank): new prototype

	* mon_lex.l: new state BNAME, to be entered after "bank" command.
	In BNAME state parse an ASCII string and return BANKNAME.

	* mon_parse_y (machine_state_rules): fix CMD_BANK entry.
	(opt_bankname): add new parse rule

	* true1541/1541cpu.c (tru1541_monitor_interface): replace
	true1541_read/store with banked memory functions.
	(true1541_bank_read, true1541_bank_peek, true1541_bank_store):
	new functions. They ignore the bank parameter as here is no banking.

	* true1541/1541cpu.h (true1541_bank_read, true1541_bank_peek,
	true1541_bank_store): new prototypes.

	* acia-tmpl.c (rs232_open, rs232_close, rs232_putc, rs232_getc):
 	New dummy functions if `HAVE_RS232' is not #defined.

	* arch/msdos/petui.c (pet_model_items): Added entry for SuperPET
	(special_menu_items): Added SuperPET toggle.

	* arch/unix/xaw/petui.c (model_defaults_submenu): Added entry for
 	SuperPET
	(model_settings_submenu): New SuperPET I/O toggle.  Also calling
 	pet_rs232_submenu for ACIA settings.

	* arch/unix/xaw/uisettings.c (pet_rs232_submenu): New menu for
 	single-ACIA RS232 handling (PET, and later CBM610?)

	* pet/Makefile.am (libpet_a_SOURCES): Added petacia.h, petacia1.c
	and petacia1.def.
	(BUILT_SOURCES): Added petacia1.c.
	(petacia1.c): Added rule to build it from acia-tmpl.c.

	* pet/pet.c: #Include "petacia.h"
	(machine_init_resources): Call acia1_init_resources and
	rs232_init_resources.
	(machine_init_cmdline_options): Call acia1_init_cmdline_resources
	and rs232_init_cmdline_resources.
	(machine_reset): Call superpet_reset to reset SuperPET I/O latches.

	* pet/petacia.h: New file.  Prototypes for SuperPET acia.

	* pet/petacia1.def: New file.  Definitions for SuperPET ACIA.

	* pet/petmem.c: #Include petacia.h
	(spet_ramen, spet_bank, spet_ctrlwp, spet_diag, spet_ramwp) new
	flags to save the state of the SuperPET latches.
	(superpet_reset): reset latches
	(superpet_powerup): reset latches that are reset only after powerup
	(superper_diag): return state of the diag latch, that is connected
	to the userport DIAG pin
	(read_super_io, store_super_io): new functions to handle the latches
	(read_super_9, store_super_9): new functions to access 64k
	expansion RAM.
	(set_std_9tof): in $9*** set *_super_9() if it is superpet.
	Also in $EF** set *_super_io() if it is superpet
	(mem_powerup): call superpet_powerup

	* pet/petmem.h (superpet_reset, superpet_diag): new prototypes

	* pet/pets.c (pet_table): add field for machine being a SuperPET
	Add SuperPET entry.
	(pet_set_model): set SuperPET resource from model info.
	(check_info): if SuperPET, disable 8x96 memory expansion
	(set_superport_enables): new function to set resource
	(resources): add "SuperPET" resource
	(cmdline_options): add "-superpet" and "+superpet" options

	* pet/pets.h (PetInfo): add field for Superpet in struct definition.

	* pet/pia.c: include petmem.h
	(read_pia1): check superpet_diag for diagnostic pin

1998-09-02  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.15.0.1.

1998-09-02  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* 6510core.c (LOCAL_SET_OVERFLOW): Call `_drive_set_byte_ready'
 	instead of `true1541_set_byte_ready'.
	(TRACE): Replaced `true1541_clk' with `drive0_clk'.
	(PHP): Call `_drive_byte_ready' instead of `true1541_byte_ready'.
	(BVC): Changed likewise.
	(BVS): Changed likewise.

	* Makefile.am: Changed library from `true1541_lib' to `drive_lib'.
	* arch/msdos/Makefile.am: Likewise.
	* arch/unix/xaw/Makefile.am: Likewise.
	* c128/Makefile.am: Likewise.
	* c64/Makefile.am: Likewise.
	* vic20/Makefile.am: Likewise.

	* arch/msdos/menudefs.c: Replaced #include "drive.h" with #include
	"vdrive.h" and #include "true1541.h" with #include "drive.h".
	* c128/c128.c: Changed likewise.

	* arch/msdos/vsync.c: Replaced #include "true1541.h" with #include
	"drive.h".
	* arch/unix/xaw/uisettings.c: Changed likewise.
	* c128/c128mem.c: Changed likewise.
	* c64/c64.c:  Changed likewise.
	* c64cia2.def: Changed likewise.
	* c64/c64iec.c: Changed likewise.
	* c64/c64mem.c: Changed likewise.
	* vic20/vic20.c: Changed likewise.
	* vic20/vic20iec.c: Changed likewise.
	* vic20/vic20via1.def: Changed likewise.
	* vic20/vic20via2.def: Changed likewise.

	* arch/unix/xaw/uicommands.c: Replaced #include "drive.h" with
	#include "vdrive.h".
	* attach.c: Changed likewise.
	* attach.h: Changed likewise.
	* autostart.c: Changed likewise.
	* c1541.c: Changed likewise.
	* c1541.h: Changed likewise.
	* fs_cbm.h: Changed likewise.
	* fsdevice.c: Changed likewise.
	* maincpu.c: Changed likewise.
	* mon.c: Changed likewise.
	* pet/pet.c: Changed likewise.
	* prdevice.c: Changed likewise.
	* serial.c: Changed likewise.
	* tape.c: Changed likewise.
	* tapeunit.c: Changed likewise.

	* arch/unix/xaw/c128ui.c (c128_ui_init): Changed menu entry from
	`ui_true1541_settings_menu' to `ui_drive_settings_menu'.
	* arch/unix/xaw/c64ui.c: Changed likewise.
	* arch/unix/xaw/vic20ui.c: Changed likewise.

	* arch/unix/xaw/uisettings.c: Changed all references of `true1541'
	to `drive'.
	* arch/unix/xaw/uisettings.h: Changed likewise.
	* c128/c128.c: Changed likewise.
	* c64/c64.c:Changed likewise.
	* c64/c64iec.c:Changed likewise.
	* vic20/vic20.c:Changed likewise.
	* vic20/vic20iec.c:Changed likewise.

	* c128/c128.c: Removed #include "1541cpu.h"
	* vic20/vic20.c: Likewise.

	* c64/c64.c (machine_init): Set hooks for drive #9.  Changed
	`true1541_monitor_interface' to `drive0_monitor_interface'.
	(vsync_hook): Call `drive_prevent_clk_overflow()' to prevent both
	drives from overflowing.

	* c64/c64cia2.def (READ_CIAPA): Remove call to
	`true1541_cpu_execute()'. Call `drive0_cpu_execute()' and
	`drive0_cpu_execute()' instead.  (READ_CIAICR): Changed likewise.

	* c64/c64iec.c (update_ports): Update IEC status for drive #9 too.
	(iec_cpu_write): Changed likewise.  (iec_cpu_read, iec_cpu_write,
	parallel_cable_cpu_read, parallel_cable_cpu_write): Removed call
	to `true1541_cpu_execute()'.  Call `drive0_cpu_execute()' and
	`drive0_cpu_execute()' instead.  (iec_cpu_write): Do not update
	`iec_info.drive[01].data if drive is disabled.

	* iecdrive.h: Added new members `drive2_bus', `drive2_port' and
	`drive2_data' to struct `iec_info_t'

	* interrupt.h: Replaced `true1541_clk' with `drive_clk[2]'.
	Replaced `true1541_int_status' with `drive0_int_status' and
	`drive1_int_status'.  Changed all defines from `true1541' to
	`drive0'. Added defines for `drive1'.

	* Renamed directory `true1541' to `drive'.

	* drive/Makefile.am: Changed all references of `true1541' to
	`drive'.  Updated `libdrive_a_SOURCES'.  Removed rules for
	`viad1.c' and `viad2.c'.  Added new rules for `via1drive0.c',
	`via2drive0.c', `via1drive1.c', `via2drive1.c', `drivecpu0.c' and
	`drivecpu1.c'.

	* drive/1541cpu.c: Renamed to `drivecpu-tmpl.c'. Changed all
	functions and variables including `true1541' to `mydrive'.
	Removed `true1541_clk'. Define `_drive_set_byte_ready' and
	`_drive_byte_ready'.

	* drive/1541cpu.h: Changed all references to `true1541' to
	`drive'.

	* drive/drivecpu0.def, drive/drivecpu1.def: New files for `drive0'
	and `drive1' specific defines.

	* drive/true1541.c: Renamed to `drive.c'.  Moved `led_status',
	`current_half_track', `*true1541_floppy', `byte_ready', `diskID1',
	`diskID2', `GCR_dirty_track', `GCR_write_value', `GCR_speed_zone',
	`GCR_track_size', `GCR_track_start_ptr', `GCR_current_track_size',
	`GCR_data', `GCR_head_offset', `read_write_mode', `GCR_read',
	`byte_ready_active', `byte_ready_active', `attach_clk',
	`detach_clk', `bits_moved', `accum', `finish_byte', `last_mode',
	`rotation_last_clk', `have_new_disk', `*rotation_table_ptr',
	`rotation_table', `old_led_status', `old_half_track' to struct
	`drive_t'.
	Changed all function and variable names including `true1541' to
	`drive0' and `drive1'.  New array `drive_t drive[2]'.
	Replaced `true1541_ram' with `drive0_ram' and `drive1_ram'.
	(drive_set_half_track): Made static.
	(drive_init): Initialize `drive_clk[0]' and `drive_clk[1]' and
	`drive[]' structure.  Set IEC lines of disabled drives to `1'.
	(drive_attach_floppy): Use `floppy->unit' to find out to which
	drive the disk should be attached to.
	(drive_detach_floppy): Changed likewise.
	(drive1_trap_handler): New function to handle traps of drive1.
	(drive_disable): Enable traps when no drive is enabled.  Set IEC
	lines of disabled drives to `1'.
	(drive_update_ui_status): Changed to handle drive #8. Currently
	the UI LED is used for both drives.

	* drive/true1541.h: Renamed to drive.h.  Changed function names
	including `true1541' to `drive'.  Added new defines for the VIAs
	of drive1. Define `NUM_BYTES_SECTOR_GCR', `NUM_MAX_BYTES_TRACK',
	`ROTATION_TABLE_SIZE' and `ACCUM_MAX' here.
	Added parameter `local_dnr' indicating the current drive to
	`drive_move_head', `drive_byte_ready', `drive_set_byte_ready',
	`drive_rotate_disk', `drive_read_disk_byte', `drive_write_gcr',
	`drive_update_zone_bits', `drive_prevent_clk_overflow',
	`drive_read_viad2_prb', `drive_update_viad2_pcr' and
	`drive_motor_control'.

	* drive/viad.h: Added new prototypes for VIAs of drive1.

	* drive/via1d0.def, drive/via2d1.def, drive/via1d1.def,
	drive/via2d1.def: New files for VIA1 and VIA2 specifiy defines of
	drive0 and drive1.

	* vic20/vic20iec.c: (iec_pa_write): Use `via1d0_set_atn' instead
	of `set_atn'.


See `ChangeLog.1' for earlier changes.
