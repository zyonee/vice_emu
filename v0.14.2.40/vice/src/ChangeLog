Wed Jun 17 00:01:28 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* arch/unix/coproc.c: #include <sys/types.h>

	* arch/unix/kbd.c: Removed a few debugging messages.

	* vice.h: Don't care about `HAVE_LIBXEXT' when deciding whether
	`MITSHM' should be #defined or not.

Tue Jun 16 21:51:01 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* pet/pet.c (machine_init): Pass zero as `_handle_true1541' to
 	`autostart_init()'.

	* vic20/vic20.c, c64/c64.c, c128/c128.c (machine_init): Pass 1 as
 	`_handle_true1541' to `autostart_init()'.

	* autostart.c (autostart_init): New parameter `_handle_true1541'.
  	The value is stored in a flag `handle_true1541'.
	(autostart_advance): Do not read or modify the `NoTraps' and
 	`True1541' resources if `handle_true1541' is zero.

	* arch/msdos/menudefs.c (attach_disk_callback): Use
 	`file_system_attach_disk()' instead of `serial_select_file()'.

	* autostart.c (autostart_disk): Use `file_system_attach_disk()'
	instead of `serial_select_file()'.

	* pet/pet.c (machine_init): Initialize autostart.

	* Makefile.am: Link `x64', `x128, `xpet' and `xvic' to `@X_LIBS@'
 	and `@READLINE".

	* petcat.c: #define `PETCATVERSION' and `PETCATLEVEL'; do not
	#include "patchlevel.h"

Mon Jun 15 23:55:43 1998  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* acia-tmpl.c: Replaced all occurences of mycpu_set_alarm(,0) with
 	mycpu_unset_alarm()...  New cmdline option to set the device
 	number of the acia emulation.  Renamed `MyAcia' device number
 	resources to `MyAciaDev'.

	* arch/unix/coproc.c, arch/unix/coproc.h: New files to allow
 	forking of another process whose stdin/stdout is piped to
 	filedescriptors that are returned.  Kind of bi-directional
 	popen().

	* arch/unix/rs232.c (rs232_open): Add coprocess handling filename
 	handling is symmetric, i.e. all files starting with '|' are opened
 	as coprocess (without the '|'), all terminals are opened as
 	terminals and the rest as dump file.
	(resources): New resources for fourth device, the exec device.
	(struct RS232): Split filedescriptor to one for reading and one
 	for writing. fixed all occurances.
	(rs232_reset): Now call rs232_close() on all open files.
	(rs232_close): Fix to unset raw mode on open tty files.

	* arch/unix/xaw/c64ui.c (acia1_device_submenu,
 	acia2_device_submenu): renamed Acia[12] device number resources to
 	Acia[12]Dev.
	(set_rs232_exec_file): New function to set the program filename
 	for RS232 device 4 (exec).
	(rs232_submenu): Switched D6** and DE** entries,as DE** is acia1,
 	and d6** is acia2

	* c64/c64.c: Call acia[12]_init_cmdline_options.

	* c64/c64acia.h: Prototypes for acia[12]_init_cmdline_options.

	* c64/c64mem.c: Rename acia_de and acia_d6 to acia1 and acia2
 	cmdline options.

	* main.c: added cmdline option "-?" for help.

	* c64/c64cia1.def (INCLUDES): Added `c64cia.h'.

	* cia-tmpl.c: Replaced all occurances of `maincpu' with `mycpu'.
	(int_myciata): IRQ mask condition for scheduling alarm changed.
  	Now only scheduled when IRQ line is not already set.  Still
 	scheduled for SDR, cascade and PB6 output operation.

	* acia-tmpl.c: Removed `DEBUG' #define.

	* arch/unix/petkmap.c: Changed default of graphics positional
 	mapping keymap file to the already distributed `posg_de.vkm'.

	* arch/unix/xaw/petui.c: Renamed PET 2001 to PET 2001-8N
	(8k memory, graphics keyboard).

	* pet/petmem.c (initialize_memory): Removed debug print.
	(mem_load): Add checksum identification check of 2001 kernal.

	* pet/pets.c (pet_table): Added pet 2001 ident flag to table
	(pet_set_model): Transfer pet2k entry from table to current mode
 	struct
	(set_kernal_rom_name): Do not set pet2k flag depending on kernal
 	name anymore

	* pet/pets.h: Removed `keyb_gr' and `keyb_bs' keymap file name
 	entries from `petinfo' struct.

Sun Jun 14 21:25:53 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* pet/crtc.c (crtc_set_screen_mode): Set `memptr_inc' according to
 	the new video width; resize the width of the window proportionally
 	to the change in the number of columns if not in double size mode
 	(otherwise, don't change it).  Don't change the window height.

	* arch/unix/xaw/uisettings.c: #include <errno.h>.

Sun Jun 14 19:48:20 1998  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* arch/unix/kbd.c (set_keymap_index): New function to set the
 	index of the currently used keymap file in a table.  The table
 	contains a list of resource names, where the resources then have
 	the filename.  Even numbers have a symbol mapping, odd numbers the
 	corresponding positional mapping.
	(do_kbd_init_resources, do_kbd_init_cmdline_options): Renamed to
 	call them from the C64/C128/VIC20 and the PET file.
	(keymap_res_name_list): List of resource names for the keymap
 	files
	(kbd_dump_keymap): Fix a bug in dumping joystick mappings.  Works
 	now.

	* arch/unix/kbd.h: Fixed prototypes.  do_* are in kbd.c, the
 	corresponding * files are in kmap.c and the corresponding pet_*
 	files are in petkmap.c

	* arch/unix/kmap.c: New file.  Handles the standard keymap file
 	list (of two files, default.vkm for symbol mapping and
 	position.vkm for positional mapping)

	* arch/unix/kmap.c: New file.  Handles the keymap file list for
 	the PET. has four instead of two entries, two for graphics and two
 	for business UK keyboards.

	* arch/unix/xaw/c128ui.c, arch/unix/xaw/c64ui.c,
 	arch/unix/xaw/vic20ui.c: use ui_keyboard_settings_menu

	* arch/unix/xaw/petui.c (petui_set_model): call ui_update_menus() to
	update menus.
	(set_KeyboardType): Switch between graphics and business keyboard,
	called from `pet_keybd_submenu()'.
	`pet_custom_model_submenu' moved to model_settings_submenu.
	`model_defaults_submenu' cut from model_settings_submenu.
	`model_settings_submenu' moved default model settings to submenu
	and the custom menus in here to reduce menu depth.

	* arch/unix/xaw/uisettings.c (set_keymap_type, dump_keymap):
 	Select between symbol and positional mapping, set new filenames
 	for the keymap filenames and dump keymap.
  	(keyboard_maptype_submenu, select_user_keymap): Likewise.
	(keyboard_settings_submenu): Likewise.

	* c128/c128.c, c64/c64.c, pet/pet.ci, vic20/vic20.c: call
	kbd_init_resources and kbd_init_cmdline...

	* mon.c: Fix "m" output: 16 bytes per line and 128 byte if no end
 	address given.  Insert a space after each four bytes for
 	readability

	* pet/pets.h, pet/pets.c: Switch graphics/business keyboard value
 	in default table.  Default is 8032 and therefore keymap index 0
 	should be KeymapBusinessUKSymFile.
	(pet_set_model): Fix to use keymap index.

Sun Jun 14 18:18:36 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* arch/msdos/menudefs.c (create_special_submenu): New parameter
 	`has_serial_traps'.  If nonzero, add the `Remove serial traps'
 	menu item.
	(ui_create_main_menu): New parameter `has_serial_traps'.  Pass it
	to `create_special_submenu'.  Callers updated.

	* arch/msdos/c64ui.c: Fixed/added some shortcuts.

	* arch/msdos/petui.c: Added palette menu.

	* arch/msdos/menudefs.c: Miscellaneous little fixes.

	* vmachine.h [!HAVE_RS232]: Do not add the ACIA special
	alarms.

	* c64/c64mem.c, c64/c64.c [!HAVE_RS232]: Disable RS232 stuff.

Sun Jun 14 01:42:52 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* arch/unix/xaw/uicommands.c (detach_cartridge): Removed
 	`suspend_speed_eval()'.  Changed item `Set cartridge as default'
 	from a switch to a command.

	* c64/c64mem.c (store_io2, read_io2, read_io1): Added KCS power
 	cartridge support.
	(initialize_memory): Initialize KCS power cartridge if enabled.
	(mem_attach_cartridge): Allow to attach KCS power cartridge.

	* cartridge.c: Removed `cartridge_default_enabled' and
 	`set_cartridge_default_enabled()'.  New variables `carttype' and
 	`cartfile'.
	(cartridge_attach_image): Fixed some typos.  Added KCS power
 	cartridge support.
	(cartridge_detach_image): Do not change resources anymore.
	(cartridge_set_default): New function.

	* cartridge.h: Reassigned cartridge type defines.

Sat Jun 13 17:45:08 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* arch/msdos/kbd.c (handle_joy_emu): Removed.
	(my_kbd_interrupt_handler): Call `joystick_handle_key()' instead
	of `handle_joy_emu()'.

	* arch/msdos/joystick.c: `joystick_available' renamed to
 	`num_joysticks'.  New resources and command-line options to setup
 	joystick devices.
	(joystick_init): Try to autodetect dual joysticks.
	(joystick_handle_key): New function.
	(joystick_update): Use the new resources and handle the second
	joystick if present.

	* icon.h: Removed.

	* rs232.h (rs232_getc): Avoid multiple inclusion via CPP.
	#include "types.h".
	(rs232_init_cmdline_options): Prototype.
	(rs232_init_resources): Prototype.

	* arch/unix/rs232.c: #include <termios.h>, <string.h>.

Sat Jun 13 13:22:05 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* fsdevice.c (open_fs): Always convert file name.

	* drive.c (open_1541): Limit file name to 16 chars.
	(do_validate): Write back BAM only if validate was successful.

Fri Jun 12 23:58:16 1998  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* acia-tmpl.c: New file, ACIA 6551 template.  This handles the
 	ACIA RS232 emulation and calls arch-specific stuff in rs232.c

	* acia.h: ACIA register definitions

	* arch/unix/rs232.c: New file, handles `/dev/ttyS*' and file dump
 	handling for any rs232 emulation (ACIA, UART, 9600, standard)
	(msdos needs stubs that return -1 in any case...).

	* arch/unix/xaw/c64ui.c: Added RS232 menus.

	* c64/Makefile.am: Added dependencies for c64acia*.c to build from
 	../acia-tmpl.c

	* c64/c64.c: Added initialization of acia1/acia2 resources, RS232
 	resources and command line options, interrupt calling
 	int_acia[12], reset_acia[12],

	* c64/c64acia.h: Function prototypes for c64acia files.

	* c64/c64acia1.c, c64/c64acia2.c: New files, derived from
	acia-tmpl.c.

	* c64/c64acia1.def, c64/c64acia2.def: Definitions for building
	c64acia[12].c.

	* c64/c64mem.c: New resources AciaDE and AciaD6 to enable acia1
 	and acia2
	(store_io1, read_io1): Call read_acia1/store_acia1 if appropriate
	(store_d6, read_d6): New functions to call read_acia2/store_acia2
 	if appropriate or read_sid/store_sid if not

	* rs232.h: New file.  Defines the general rs232 interface used by
 	the chip emulations.  Hides all the external device stuff from the
 	real emulation

	* vmachine.h: Added A_ACIA1, A_ACIA2, I_ACIA1, and I_ACIA2.
  	increased NUMOFALARM and NUMOFINT

Fri Jun 12 17:47:37 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* fsdevice.c (flush_fs, open_fs, read_fs): Put a '/' after the
 	device-specific path.
	(fs_test_pc64_name, fs_find_pc64_name): Likewise.
	(fsdevice_compare_file_name, fsdevice_create_file_p00): Likewise.

	* arch/unix/xaw/uisettings.c (UiSetCustom1541SyncFactor): Renamed
 	to `set_custom_true1541_sync_factor'.
	(UiSetFSDeviceDirectory): Renamed to `set_fsdevice_directory'.
  	Use a simple text requester instead of the file selector.

	* c128/c128.c (machine_init): (Temporarily) call `c64_kbd_init()',
 	not `c128_kbd_init()'.

	* arch/msdos/menudefs.c: New settings for FS/P00 access.

	* arch/msdos/c128ui.c, arch/msdos/c128ui.h: New files.

	* arch/msdos/video.c: New variable `in_gfx_mode'.
	(enable_text, video_init): Set `in_gfx_mode' to 0.
	(disable_text, canvas_set_vga_mode): Set `in_gfx_mode' to 1.
	(canvas_set_palette): If in graphics mode, set the new VGA palette
 	colors.
	(canvas_set_vga_mode): Set the VGA palette colors.

Thu Jun 11 20:54:20 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* arch/msdos/menudefs.c: Removed some unused conditionals.
	(attach_disk_callback, attach_tape_callback): Handle the case when
	no file is attached to the device and `serial_get_file_name()'
	returns NULL.

Wed Jun 10 22:26:59 1998  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* arch/unix/xaw/petui.h: defined new PET model menues
	(toggle_Crtc, toggle_Ram9, toggle_RamA, radio_VideoSize,
	radio_RamSize, radio_IOSize, petui_set_model).

	* pet/pet.c (set_model_name): Fixed `pet_set_model()' parameters.
	Removed PET model resource/cmdline options.

	* pet/petmem.c: Removed lots of single-variable resources moved
 	resource change functions and resource and cmdline option tables
 	to `pet/pets.c'.
	(initialize_memory): Fixed to use `PetInfo pet' struct for mapping
 	info (`pet' is the new resource).
	(mem_load): Use pet struct for ROM filenames.  Only set screen
 	width if video resource is set to Auto and we actually found a
 	known ROM
	(set_screen): New function to set the screen width to the crtc.

	* pet/pets.c (pet_table): Fixed up to new format.
	(pet_set_model): Use resource fucntions to set all values from the
 	table to the pet struct (the new resource).
	(check_info): New function.  Sets up derived variables in pet
 	struct
	(set_iosize, set_crtc_enabled, set_kbd_type, set_ramsize,
 	set_video, set_ram_9_enabled, set_ram_a_enabled,
 	set_chargen_rom_name, set_kernal_rom_name, set_editor_rom_name,
 	set_rom_module_9_name, set_rom_module_a_name,
 	set_rom_module_b_name): resource change functions partly new and
 	partly moved from pet/petmem.c
	(resources, pet_mem_init_resources, cmdline_options,
 	pet_mem_init_cmdline_options): PET hardware resources & cmdline
 	opts.

	* pet/pets.h: New format of `struct PetInfo'.

Mon Jun  8 11:08:16 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* maincpu.c: Use `mem_rom_trap_allowed()' instead of the removed
 	`rom_trap_allowed()'.
	* c128/c128cpu.c: Likewise.

	* pet/pet.c (machine_init_resources): Don't initialize
 	trap-related resources (no traps are used in xpet).
	(machine_init_cmdline_options): Don't inititialize trap-related
	command-line options.

	* c64/c64.c, vic20/vic20.c, pet/pet.c, c128/c128mem.c
 	(rom_trap_allowed): Removed.
	* c64/c64mem.c, vic20/vic20mem.c, pet/petmem.c, c128/c128mem.c
 	(mem_rom_trap_allowed): Moved here.

	* c64/c64.c, vic20/vic20.c, c128/c128.c (machine_init): Load
 	`default.vkm' instead of `vice.vkm'.

	* arch/unix/xaw/petui.c (pet_ui_init): Disable drive status line.

	* resources.c (resources_load): Print the "Reading..." message
 	after the file has been successfully open.

	* arch/unix/xaw/vic20ui.c: Added options to setup the memory
	configuration at runtime.

	* vic20/vic20mem.c (cmdline_memory): Default to "no expansion".
	(vic20_mem_disable_ram_block): Removed debugging message.

	* arch/unix/xaw/uicommands.c (attach_cartridge): Removed temporary
 	`title' variable.  Do not pass `read_disk_image_contents' to
 	`ui_select_file'.

Mon Jun  8 00:19:05 1998  Daniel Sladic  <sladic@eecg.toronto.edu>

	* mon.c: Support 'next' and 'return' instructions. Lots of stuff
 	to fix wraparound ranges and default address handling.  Change SR
 	to show unused bit as '1' not 'x'.  Added displaying binary data
 	with 'm'.  Fixed memory space handling of label files.

	* mon.h: Added `mon_instruction_return()' prototype.

	* mon_lex.l: Allow all characters in filenames.

	* mon_parse.y: Handle immediate constants > 0xff.  Add
	'return' command.  Fix block disk commands.

Sun Jun  7 22:19:16 1998  Andreas Boose  <unixserv@linux.rz.fh-hannover.de>

	* attach.c: Turn on file system devices by default.

	* fsdevice.c (fsdevice_init_cmdline_options): New function.
	(cmdline_fsdirectory): New function.

	* fsdevice.h: Added `fsdevice_init_cmdline_options'.

	* main.c (main): Initialize file system device specific
	command-line options.

	* Makefile.am: Added `cartridge.h' to `noinst_HEADERS' and
 	`cartridge.c' to `base_sources'.

	* arch/unix/xaw/c64ui.c: Removed callback `ActionReplay'.  Added
 	new `ui_cartridge_commands_menu' menu.

	* arch/unix/xaw/uicommands.c: Added new callbacks
 	`attach_cartridge' and `detach_cartridge'.  Added new menus
 	`attach_cartridge_image_submenu' and `ui_cartridge_commands_menu'.

	* arch/unix/xaw/uicommands.h: Added `ui_cartridge_commands_menu'.

	* c64/c64mem.c: Removed `action_replay_enabled'.  Added new
 	variable `mem_cartridge_type' instead.  Changed to new cartridge
 	handling.
	(mem_attach_cartridge, mem_detach_cartridge): New functions.
	(set_action_replay_enabled): Removed.
	(action_config_changed): Renamed to `cartridge_config_changed'.

	* cartridge.c, cartridge.h: New files.

	* main.c (main): Initialize cartridge support.

	* mem.h: Added `mem_attach_cartridge' and `mem_detach_cartridge'.

	* c128/c128mem.c, pet/petmem.c, vic20/vic20mem.c: Added stubs
	for cartridge support.

Sun Jun  7 11:40:41 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* c128/c128mem.c (store_mmu): Set the VIC-II video-bank base
	according to bits 7 and 6 stored to $D506.

	* c64/vicii.c: New variable `ram_base'.  All the functions in this
	file use that one instead of `ram'.
	(vic_ii_set_ram_base): New function.

	* arch/unix/xaw/uicommands.c (do_exit): Just call `ui_exit()'.

	* arch/unix/xaw/ui.c (ui_exit): New function.
	(close_action): Call it.

	* drive.c (open_1541): Do not try to open the file on the file
	system if no disk is attached.  Generate an `IPE_NOT_READY' error
	and return `SERIAL_ERROR' instead of `SERIAL_NO_DEVICE'.

	* arch/unix/xaw/ui.c (ui_popup): Make sure the widget is fully
	visible when positioning it.

	* arch/unix/xaw/uimenu.c: New variable `top_menu'.
	(menu_popup_callback): If this is the top menu, set `top_menu' to
 	this widget.
	(popdown_submenus_action): Popdown the top menu too.

	* arch/unix/xaw/uimenu.c (popdown_submenus_action): Popdown the
	two main menus.

	* arch/unix/xaw/c64ui.c, arch/unix/xaw/c128ui.c: Added palette
	setting submenu.
	* arch/unix/xaw/petui.c: Likewise.

	* pet/crtc.c (set_palette_file_name): Load the new palette file if
	the name changes.

	* c64/vicii.c (set_palette_file_name): Always physically load the
 	new palette, even if not on MS-DOS.
	(set_palette_file_name): If `palette' is NULL, only set the value
 	of `PaletteName' without trying to load the palette file.

	* arch/unix/xaw/uimenu.h (UI_MENU_DEFINE_STRING_RADIO): New macro.

	* arch/unix/xaw/ui.c (ui_canvas_set_palette): New function.

	* arch/unix/video.c (canvas_set_palette): New function.

	* arch/msdos/video.c (canvas_set_palette): Return type changed to
	`int'.  Return 0.

	* arch/unix/xaw/ui.c: New variable `have_truecolor'.
	(ui_init_finish): If using a TrueColor visual, set
	`have_truecolor' to 1, otherwise to 0.
	(alloc_colormap): Always install a private colormap if using a
	TrueColor visual (`have_truecolor' != 0).

Sat Jun  6 11:11:11 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* c128/c128mem.c (read_basic_lo, store_basic_lo): Do not check for
 	shared memory, because these addresses cannot be shared.
	(read_basic_hi, store_basic_hi): Likewise.
	(store_ddxx, read_ddxx, store_dcxx, read_dcxx): Handle shared
 	memory.
	(store_d8xx, read_d8xx, store_d6xx, read_d6xx): Likewise.
	(store_d5xx, read_d5xx, store_d4xx, read_d4xx): Likewise.
	(store_d0xx, read_d0xx, store_empty_io, read_empty_io): Likewise.
	(store_editor): Always store in RAM.
	(store_mmu): Print out messages only if `DEBUG_MMU' is #defined.
	(store_rom): Added missing `break' statement.

	* cmdline.c (cmdline_show_help): Output to `stdout', not `stderr'.

Thu Jun  4 00:51:18 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.33.

	* c128/c128.c (machine_init): Call `c128_ui_init()', not
 	`c64_ui_init()'.

	* true1541/1541cpu.c: Never #define `TRACE'.

	* c128/c128mem.c (mem_load): Removed BASIC patch.

	* c64/vicii.c (vic_ii_init): Adapt the VIC-II window title to the
	the running emulator, using `machine_name'.

	* c64/vicii.h: Removed `VIC_II_WINDOW_TITLE' #define.

	* arch/unix/xaw/c128icon.xpm: New file.

	* arch/unix/xaw/c128ui.c, arch/unix/xaw/c128ui.h: New files.

	* drive.c (open_1541): Do not report an error if opening the
	command channel or a memory buffer with no image attached.
	(do_block_command): If block commands `R' or `W' fail, report a
	`IPE_NOT_READY' error.

	* c64/vicii.c (reset_vic_ii): Set the IRQ line number to 0 and
	prepare the corresponding alarm.  Set $D01A to zero.

	* c128/c128.c (machine_reset): Call `initialize_memory()'.

	* c128/c128mem.c: New C128-specific memory access scheme
 	implemented.

	* c128/c128cpu.c: #define `PAGE_ONE' to `page_one'.

Wed Jun  3 19:18:28 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Makefile.am: Link `x128' to `c64/libc64c128.a'.

	* c64/Makefile.am: New `libc64c128.a' library.

Tue Jun  2 01:52:39 1998  Daniel Sladic  <sladic@eecg.toronto.edu>

	* mon.c: Added new commands to mon_cmd_array[]. Changed the
 	default number of displayed numbers to 80.  Fixed range checking.
  	Added functions check_positive_range(), and get_range_info().
  	Fixed goto command.  Change 0x to $ for diehard 64 fans.  Lots of
 	fixes in mon_display_data() and mon_display_memory().  First try
 	at handling 0-ffff wrap.  Support for > command.

	* mon.h: Change mon_display_data() prototype.

	* mon_lex.l: Fix error reporting for 'a' command.  Remove
 	requirement of a space after @, >, and ~ commands.

	* mon_parse.y: Handle addresses > $ffff.  Add >, mc, ms, and i
 	commands.  Change check_addr_limits() to CHECK_ADDR().

Tue Jun  2 00:22:02 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* c128/c128.c (machine_init_cmdline_options): Initialize
 	sound-specific command-line options.
	(machine_init_resources): Initialize sound-specific resources.

	* 6510core.c (BRANCH): Increment PC at the end of the opcode only.
	(STA_ZERO, STX_ZERO, STY_ZERO): Store before incrementing PC.
	(STA, STX, STY): Use `tmp' instead of `addr' when storing.

	* c128/vdc.c: `vdc' made static.

	* tapeunit.c (SET_ST, findheader): Use `mem_store()' instead of
 	`STORE()'.
	(SET_ST): Use `mem_read()' instead of `LOAD()'.
	(findheader): Use `mem_read()' instead of `LOAD_ZERO()' or
 	`LOAD()'..

	* misc.c (sprint_ophex, sprint_opcode, eff_address): Use
 	`mem_load()' instead of `LOAD()'.
	(eff_address): Use `mem_read()' instead of `LOAD_ZERO_ADDR()'.

	* c128/vdc.c (store_vdc): Use `mem_read()' instead of `LOAD()'.

	* c64/reu.c (reu_dma): Use `mem_read()' instead of `LOAD()' and
 	`mem_store()' instead of `STORE()'.

	* serial.c (serialattention, serialsendbyte): Use `mem_read()'
	instead of `LOAD()'.
	(serialreceivebyte): Use `mem_store()' instead of `STORE()'.

	* arch/unix/xaw/ui.h: Don't try to #include "xdebug.h" anymore.

	* sounddrv/soundsdl.c: Put back in.

	* maincpu.c: #define `_MAINCPU_C' before #including anything.

	* mem.h: Do not define the memory access macro unless `_MAINCPU_C'
 	is #defined.

	* c128/c128cpu.c, c128/c128cpu.h: New files.

	* 6510core.c (STA): use `tmp' instead of using `addr' again.
	(DCP, DEC, INC, LSR, RLA, ROL, SRE): Store the address into a
 	temporary variable instead of evaluating it more than once.
	(JSR): Type of `tmp_addr' changed to `unsigned int'.

Mon Jun  1 21:46:49 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.32.

	* c64/vicii.c (store_d011): (Hopefully) fixed 24->25 and 25->24
 	line mode switches on the start/stop lines of the respective modes.

Mon Jun  1 15:40:19 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* attach.c (file_system_attach_disk): Fixed typo.

Mon Jun  1 00:23:30 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* vice.h: Added `alloca()' portability stuff, ripped from GNU
 	make.

	* Makefile.am: Link all the executables to `@ALLOCA@' and
 	`@LIBOBJS@'.  Removed depenendencies to `.PHONY' target from
	executable targets.

	* alloca.c: New file.

	* arch/unix/xaw/widgets/FileSel.c: #define `VICE'.

	* arch/unix/xaw/ui.c (ui_init): Call `ui_hotkey_init()'.

	* arch/unix/xaw/uicommands.c: Added a few shortcuts for attaching
	disk images and resetting the machine.

	* arch/unix/xaw/ui.c (handle_hotkeys): Removed.

	* arch/unix/xaw/uimenu.c (ui_menu_create): If this is item has no
 	submenu and the `hotkey_keysym' is nonzero, register the specified
 	`hotkey_keysym'/`hotkey_modifier' couple as an hotkey shortcut for
 	it.

	* arch/unix/xaw/uimenu.h: New members `hotkey_keysym' and
	`hotkey_modifier' in `ui_menu_entry_t'.

	* arch/unix/xaw/ui.c (ui_open_canvas_window): Add
 	`ui_hotkey_event_handler' as the event handler for `KeyPress' and
 	`KeyRelease' events.

Sun May 31 23:24:06 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* arch/unix/xaw/uihotkey.c, arch/unix/xaw/uihotkey.h: New files.

	* arch/unix/xaw/uicommands.c (browse_manual): Browse the docs in
	`DOCDIR', not in `LIBDIR "/" DOCDIR'.

	* vice.h: Changed `DOCDIR' to `LIBDIR "/doc"'.

	* arch/unix/xaw/ui.c (activate_xdebug_window): Removed.
	(ui_jam_dialog): Removed "Debug" button.
	(close_action): Do not handle the XDebugger special case anymore.

	* arch/unix/xaw/uicommands.c: Removed commands for activating the
 	XDebugger.

	* arch/unix/xaw/xdebug.c, arch/unix/xaw/xdebug.h: Removed.
  	Requiescat In Pace.

	* arch/unix/xaw/uicommands.c (do_exit): Added missing space in
	quit message.

	* arch/unix/xaw/uisettings.c (set_maximum_speed): Fixed to set the
	speed correctly.
	(set_maximum_speed, set_custom_maximum_speed): Update the tick of
	the "Custom" entry properly.
	(set_refresh_rate, set_custom_refresh_rate): Update the tick of
	the "Custom" entry properly.

Sun May 31 16:47:59 1998  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* fsdevice.c (fs_error): Updated identification string.
	(flush_fs): Implemented P00 scratch and rename support.
	(write_fs): Allow writes if the file is opened in append mode.
	(open_fs): Rewritten to handle P00 files and append mode access.
	(fs_buffer_info): New member `type'.
	(fsdevice_evaluate_name_p00): New function.
	(flush_fs): Added P00 file scratch support.
	(read_fs): New file type handling.
	(open_fs): Added access mode override support.

Sat May 30 15:26:02 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* c64/vicii.c (set_palette_file_name): Load the new palette file
 	correctly.

Thu May 28 19:25:28 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.31.

	* arch/unix/xaw/vic20ui.c (UiSetJoystickDevice1): Renamed to
 	`set_joystick_device'.

	* arch/unix/xaw/c64ui.c (UiSetJoystickDevice1): Renamed to
 	`set_joystick_device_1'.
	(UiSetJoystickDevice2): Renamed to `set_joystick_device_2'.

	* arch/unix/xaw/petui.c (UiSetJoystickDevice1): Renamed to
 	`set_joystick_device_1'.
	(UiSetJoystickDevice2): Renamed to `set_joystick_device_2'.

	* arch/msdos/tuifs.c (file_list_read): Set a few bits in
 	`_djstat_flags' to make `stat()' faster.
	(file_list_add_item): Use `xmalloc()'/`xrealloc()' instead of
 	`malloc()'/`realloc()'.

	* c64/vicii.c (set_palette_file_name) [__MSDOS__]: Load the new
 	palette if the value changes.

	* arch/msdos/c64ui.c: Implemented submenu for palette selection.

	* arch/msdos/video.c (canvas_set_palette): New function.
	(disable_text): Re-initialize the VGA palette according to the
	values in the `colors' member of `canvas_t'.

	* arch/msdos/menudefs.c (attach_disk_callback): Start the file
	selector with the name of the currently attached disk image as the
	default.
	(attach_tape_callback): Likewise.

	* arch/msdos/tuifs.c (tui_file_selector): New parameters
 	`directory' and `default_item'.  Do not call `chdir()' anymore,
 	just move around using `return_path' as the currently selected
 	directory.  If `default' is non-NULL and it points to the name of
 	any of the files in the directory, position the cursor on that
 	file.

	* arch/msdos/tuimenu.c (tui_menu_add): New function.

	* arch/msdos/ui.c: Removed all the menu implementation (moved to
 	`arch/msdos/menudefs.c').
	(ui_init_finish): Do not create the main menu anymore.

	* c64/c64.c (machine_init) [__MSDOS__]: Call `c64_kbd_init()'
	instead of `kbd_init()'.

	* c128/c128.c (machine_init) [__MSDOS__]: Call `c128_kbd_init()'
 	instead of `kbd_init()'.

	* vic20/vic20.c (machine_init) [__MSDOS__]: Call `vic20_kbd_init()'
	instead of `kbd_init()'.

	* pet/pet.c (machine_init) [__MSDOS__]: Call `pet_kbd_init()'
 	instead of `kbd_init()'.

	* arch/msdos/menudefs.c, arch/msdos/menudefs.h: New files.

	* arch/msdos/c64kbd.c, arch/msdos/c64kbd.h: New files.

	* arch/msdos/vic20kbd.c, arch/msdos/vic20kbd.h: New files.

	* arch/msdos/petkbd.c, arch/msdos/petkbd.h: New files.

	* arch/msdos/c64ui.c, arch/msdos/c64ui.h: New files.

	* arch/msdos/vic20ui.c, arch/msdos/vic20ui.h: New files.

	* arch/msdos/petui.c, arch/msdos/petui.h: New files.

	* true1541/true1541.c (true1541_set_ntsc_sync_factor): Do not do
	anything if `ntsc_cycles_per_sec' is still zero.
	(true1541_set_pal_sync_factor): Do not do anything if
	`pal_cycles_per_sec' is still zero.

	* main.c: `progname' and `boot_path' made non-const.
	(set_boot_path): Use `fname_split()' instead of `fnsplit' and
 	`fnmerge'.

	* utils.c (fname_split): New function.

	* c64/c64mem.c: Size of `export_ram0' changed from 0x1fff to
 	0x2000 elements.

	* sound.c (sound_init): #ifdef `HAVE_AUDIOIO_H' -> #ifdef
 	`HAVE_SYS_AUDIOIO_H'.

Wed May 27 20:48:34 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Makefile.am: Added `mon_parse.h' and `mon_parse.c' to
 	`BUILT_SOURCES'.

	* main.c [__MSDOS__] (set_boot_path): Fixed path composition.

	* resources.c (default_resource_file) [__MSDOS__]: Added missing
 	`/' after `boot_path' when composing the file name.

Tue May 26 20:56:23 1998  Daniel Sladic  <sladic@eecg.toronto.edu>

	* Makefile.am: Added `-d' to `YFLAGS' to generate header file.

	* c64/c64mem.c: Transformed all watchpoint functions into a
	single function.

	* misc.c: Renamed `symbol_table_lookup_name' to
 	`mon_symbol_table_lookup_name'.

	* mon.c/mon.h: Lots.

	* mon_lex.l: Made `yywrap' and `resolve_datatype' static.  Changed
 	datatype handling to radix handling.

	* mon_parse.y: Removed address ranges.  Changed datatype handling
 	to radix handling.  Added `mon_' prefix to all monitor functions.
  	Made local functions static.

	* pet/petmem.c: Added watchpoint handling.

	* vic20/vic20mem.c: Transformed all watchpoint functions into a
	single function.

	* true1541/1541cpu.c: Transformed all watchpoint functions into a
	single function.

Sat May 23 15:40:04 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* mon.c [!HAVE_READLINE] (readline, add_history): Simple
 	replacements for the readline functions.

	* sounddrv/soundmidas.c: #include <stdio.h>.
	(midas_close): Added parameter `w'.

	* arch/msdos/vsync.c (vsync_disable_timer): New (dummy) function.

	* arch/msdos/ui.c (ui_init_resources, ui_init_cmdline_options):
	New (dummy) functions.

	* arch/msdos/vsync.c: Implemented new-style resource handling.

	* arch/msdos/vsync.c (vsync_prevent_clk_overflow): Made public;
 	new parameter `sub'.  Only subtracts `sub' from
 	`speed_eval_prev_clk' now.
	(do_vsync): Do not call `flush_sound' anymore.
	(do_drive): Removed.
	(vsync_init): New parameters `hz', `cycles', `hook'.  Do not call
	`joystick_init()' anymore.

	* arch/msdos/menudefs.c, arch/msdos/menudefs.h: New files.

	* resources.c (resources_toggle): New function.

	* arch/msdos/tui.c, arch/msdos/tui_backend.c: Do not #include
 	"patchlevel.h".

	* arch/msdos/kbd.c (kbd_init): Added (currently unused)
	`keymap_name' parameter.

	* arch/msdos/kbdef.h: Temporarily enable the C64 keyconvmap only;
	disabled the PET ones.

	* arch/msdos/kbd.c: #include "vice.h"; do not #include "macro.h".

	* arch/msdos/joystick.c (joystick_init_resources): New dummy
 	function.
	(joystick_init_cmdline_options): New dummy function.
	(joystick_update): Temporarily removed assignment to `joy'
	(waiting for a complete support for new-style resources and
	command-line options).

	* Reintroduced MS-DOS sources.

	* mon.h: #undef `TRUE' and `FALSE' before redefining them.

	* pet/crtc.c, vic20/vic.c: Do not #define `pixel_width' or
 	`pixel_height'.

Fri May 22 18:00:00 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.30.

Fri May 22 00:52:42 1998  Daniel Sladic  <sladic@eecg.toronto.edu>

	* data/C64/vice.vkm, data/C128/vice.vkm: Setup custom key joystick.

	* arch/unix/joystick.c (joyport1select, joyport2select): Support
	custom key joysticks.

	* arch/unix/kbd.c: Added functions `kbd_add_custom_joykeys' and
 	`kbd_remove_custom_joykeys'.  Added arrays `custom_joykeys' and
 	`custom_joykeys_backup'.
	(kbd_event_handler): Handle custom key joysticks.
	(kbd_parse_entry): Store custom key entries and make backups of
 	keys that they replace.

	* arch/unix/kbd.h: Added functions `kbd_add_custom_joykeys' and
 	`kbd_remove_custom_joykeys'.

	* uisettings.h (UiSetJoystickDevice1, UiSetJoystickDevice2): Removed.
	(UiSwapJoystickPorts, UiSetNumpadJoystickPort): Removed.
	(ui_joystick_settings_menu): Removed.

	* mon.c (symbol_table_lookup_addr): Removed debugging output.
	(watch_push_store_addr): `watch_load_count' ->
 	`watch_store_count'.
	(watchpoints_check_loads): While loop test changed to `count'.

Fri May 22 00:17:16 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* arch/unix/xaw/uisettings.c: Added new menu entries to toggle
	P00 save support.

	* c64/c64iec.c: Changed to include `c64cia.h'.
	New variable `iec_fast_1541' to save the IEC status when true1541
	emulation is disabled.  (iec_cpu_write, iec_cpu_read): Changed to
	return the correct IEC status.

	* c64/c64mem.c (initialize_memory): Initialize Action Replay
	if enabled.

	* fsdevice.c: Added new functions `fsdevice_create_file_p00',
	`fsdevice_reduce_filename_p00' and `fsdevice_eliminate_char_p00'.
	Added P00 save support switches to resources.  (open_fs): Do not
	convert CBM file names and call `fsdevice_create_file_p00' if P00
	save support is enabled.

Wed May 20 19:20:21 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.29.

	* arch/unix/readline: `Readline' replacement put back in.

Wed May 20 00:06:34 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* fsdevice.c (fs_test_pc64_name): Changed to handle separate
 	directories.
	(fsdevice_compare_pc64_name, fsdevice_compare_file_name): New
 	functions.
	(open_fs): Changed to handle wildcards.

Tue May 19 00:07:35 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.28.

	* true1541/1541cpu.c (true1541_cpu_reset): Set `last_clk' to zero.

Mon May 18 23:04:00 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* c128/c128.c: Corrected return addresses for "SerialReady" traps.

	* c128/c128mem.c (initialize_memory): Fixed typo in `shared_size'
 	assignment.
	(store_mmu): Re-initialize memory when register 0 is written to.

Mon May 18 17:52:09 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.27.

	* c64/sid.c (doosc): Removed temporary fix.

	* Makefile.am: Set `YFLAGS' to `-t'.

	* c128/c128mem.c (initialize_memory): Initialize `mem_read_tab[1]'
	and `mem_write_tab[1]' properly.

	* sound.c (set_device_name, set_device_arg): Reallocate the
 	resource value instead of just assigning the pointer.

Min May 18 17:34:22 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* arch/unix/xaw/uisettings.c: New UI callback
 	`UiSetFSDeviceDirectory' to select a directory.  Splitted UI
 	callback `FSDeviceConvertP00' into one callback per fsdevice.  New
 	menus `set_file_system_device_directory_submenu' and
 	`set_file_system_device_p00_support_submenu'.

	* c64/c64iec.c: #include "cia.h".

	* drive.h (_DRIVE): New member `unit'.

	* drive.c (initialize_1541): Initialize drive number.

	* fsdevice.c: #include "utils.h".
	(fsdevice_set_directory): New function.
	(fsdevice_get_path): New function.
	(read_fs): Changed to handle separate directories.
	(fs_find_pc64_name): Changed likewise.
	(open_fs): Changed likewise.  Removed old P00 support.
	(resources): Added new resources to handle separate fsdevice
 	directory and P00 support.

Mon May 18 00:55:51 1998  Daniel Sladic  <sladic@eecg.toronto.edu>

	* joystick.h: Updated function prototypes according to the changes
 	in `joystick.c'.  Added `JOYDEV_*' #defines.

	* joystick.c: Renamed `hjoyport' to `joystick_port_map'.  Added
 	resource and commandline handling: new arrays `resources[]' and
 	`cmdline_options[]'.
	(joystick_init_resources, joystick_init_cmdline_options): New
	functions.
	(joyset): Removed.
	(joyini): Renamed to `joystick_init'.
	(joyclose): Renamed to `joystick_close'.
        [!HAS_JOYSTICK] (joystick_init, joystick_close): Dummy.
	(joystick): Changed device constants to `JOYDEV_*' #defines.

	* kbd.c (kbd_event_handler): Only allow numpad emulation if
	selected.

	* arch/unix/xaw/c64ui.c, arch/unix/xaw/petui.c: New menus
 	`set_joystick_device_1_submenu', `set_joystick_device_2_submenu',
 	`joystick_settings_submenu'.  Added joystick entry to machine
 	menu.
	(UiSetJoystickDevice1, UiSetJoystickDevice2): New callbacks.
	(UiSwapJoystickPorts): New callback.

	* arch/unix/xaw/vic20ui.c: New menus
 	`set_joystick_device_1_submenu', `ui_joystick_settings_submenu'.
  	Added joystick entry to menu.
 	(UiSetJoystickDevice): New callback.

	* c64/c64.c (vsync_hook): Add ';' after `joystick()'.

	* c64/c64cia1.def (READ_CIAPA, READ_CIAPB): Fixed joystick
	handling.

	* main.c (main): Added joystick resource/cmdline handling.

	* mon.c, mon.h: Changed `malloc' calls to `xmalloc'.

	* mon_lex.l: Changed `strdup' calls to `stralloc'.

	* mon_parse.y: Some rule rearrangement for readability.  Added
 	some error reporting.  Removed `yydebug', `yyin' definitions.

Sun May 17 21:06:32 1998  Teemu Rantanen  <tvr@cs.hut.fi>

	* c64/sid.c (hassid): New variable to know when we have sound code
	running.

	* c64/sid.c (read_sid): Reimplemented sid osc3 finetuning on reads.

	* c64/sid.c (reset_sid): Fixed reset -problems with stored clks.

	* vic20/soundvic20.c (sound_reset): Fixed reset -problems with stored
	clks.

	* pet/soundpet.c (petsnd_reset): Fixed reset -problems with stored
	clks.

	* maincpu.c (reset): Reset clk after machine_reset(), not before.
	This may cause some problems, so reset functions around the code must
	be rechecked.

Fri May 15 13:13:41 1998  Teemu Rantanen  <tvr@cs.hut.fi>

	* warn.c: Added missing vice.h -include.

	* include/sound.h: Removed PETSND_* -macros (where did they came
	from?)

	* include/sound.h (sound_sample_position): New prototype.

	* sound.c (sound_sample_position): New functions. Returns the
	relative position of last calculated sample and the next one based
	on clk.

	* sound.c (sound_flush): Removed extra check for unexpected clk
	changes.

Sun May 17 09:33:04 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.26.

	* machspec.h: Renamed to `machine.h'.

	* c128/c128.c, c128/c128.h, c128/c128mem.c, c128/c128mem.h: New
	files.

	* c64/sid.c (doosc) [WAVETABLE]: Temporary fix for SID segfaults:
	return 0 if `wt' is NULL.

	* arch/unix/xaw/petui.c (pet_ui_init): Set icon.

	* arch/unix/xaw/vic20ui.c (vic20_ui_init): Set icon.

	* arch/unix/xaw/c64ui.c (c64_ui_init): Set icon.

	* arch/unix/xaw/ui.c: Removed all the `XPM'-dependent parts.
	(ui_set_application_icon): New function.
	(ui_open_canvas_window): Attach existing icon pixmap if defined.

	* arch/unix/xaw/ui.c (ui_set_left_menu, ui_set_right_menu):
 	Physically override the translations of the already open windows
 	so that the menus are properly attached, no matter what their name
 	is.
	(ui_open_canvas_window): If any translations for the left or right
 	menus have already been defined, use apply them to the new window.

	* c64/c64.c, vic20/vic20.c (machine_init): Set
 	`true1541_attach_floppy' and `true1541_detach_floppy' as hooks to
 	drive 8.

	* attach.c (initialize_drives): Renamed to `file_system_init'.
	(file_system_set_hooks): New function.

	* vic20/via1.def, vic20/via2.def: Renamed to `vic20/vic20via1.def'
	and `vic20/vic20via2.def'.  Now produce `vic20/vic20via1.c' and
	`vic20/vic20via2.c' instead of `vic20/via1.c' and `vic20/via2.c'.

	* machspec.h: Renamed to `machine.h'.

	* c64/c64.c, vic20/vic20.c, pet/pet.c: Removed `machdesc' struct.
	Kept only a `machine_name' extern variable.

	* c64/sid.c (reset_sid): Renamed to `sid_reset'.

	* arch/unix/xaw/petui.c (pet_ui_init): New file, new function.

	* pet/pia.c: Implemented resource handling.

	* vic20/soundvic20.c, vic20/soundvic20.h: Renamed to
	`vic20/vic20sound.c' and `vic20/vic20sound.h' respectively.

	* pet/soundpet.c, pet/soundpet.h: Renamed to `pet/petsound.c' and
	`pet/petsound.h' respectively.

	* maincpu.h (maincpu_num_write_cycles): Compile on all the
 	machines.

	* pet/pet.c (set_model_name): Added resource/command-line option
 	handling.

	* pet/petmem.c: Added resource/command-line option handling.

	* pet/pets.c (pet_set_model): Changed return type to int, added
	parameter `model_name'.  Do not change resource values; just find
	the appropriate model and set the `pet' struct accordingly.
	Return -1 on error, 0 on success.
	(pet_set_video_width): Removed.
	(pet_set_keyboard_type): Removed.

	* vice.h: Removed lots of machine-specific CPP hacks.

	* c64/cia1.c, c64/cia1.def, c64/cia2.c, c64/cia2.def: Renamed to
	`c64/c64cia1.c, `c64/c64cia1.def', `c64/c64cia2.c',
	`c64/c64cia2.def', respectively.

	* c64/c64cia.h: New file.

	* cia.h: Removed C64 CIA prototypes.

	* pet/petvia.h: New file with PET-specific prototypes.

	* pet/viap.c: Renamed to `pet/petvia.c'.

	* pet/pet.h: New file.

Sat May 16 18:55:05 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Whole source reorganized to use automake.

	* mon_parse.y: `yydebug' made non-extern.

	* vic20.h: Include VIC20 specific parts of old `via.h' here.

	* via.h: Removed PET- and VIC20-specific parts.

Thu May 14 21:02:07 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.25.

	* Makefile.in: Added missing files.

	* Version 0.14.2.24.

Thu May 14 00:08:06 1998  Teemu Rantanen  <tvr@cs.hut.fi>

	* sid.c, include/sid.h: Removed. All this code is split into many
	files. Also some renaming of the public prototypes has been done.

	* sound.c: New file. All common sound code is now here.

	* include/sound.h: New file. Common sound prototypes.

	* c64/sid.c: New file. Implementation of SID.

	* c64/sid.h: New file. SID prototypes.

	* vic20/soundvic20.c: New file. Implementation of VIC20 sound.

	* vic20/soundvic20.h: New file. VIC20 sound prototypes.

	* c64/c64.c (machine_init_resources): Added initialization of
	general sound resources.

	* c64/c64.c (machine_init_cmdline_options): Added initialization of
	general sound cmdline options.

	* c64/c64.c (vsync_hook): Added call to general sound code to prevent
	clk overflow.

	* vic20/vic20.c: Changed sound includes

	* vic20/vic20.c (machine_init_resources): Initialize common sound
	resources.

	* vic20/vic20.c (machine_init_cmdline_options): Initialize common
	sound cmdline options.

	* vic20/vic20.c (machine_reset): Reset sound on reset.

	* vic20/vic20.c (vsync_hook): Prevent clk overflow on common sound
	code.

	* vic20/vic.c: Changed sound includes. Renamed store_vic20sid() to
	store_sound().

	* pet/soundpet.c: New file. PET sound code.

	* pet/soundpet.h: New file. PET sound prototypes.

	* pet/viap.c, pet/pet.c: Changed sound includes.

	* arch/unix/xaw/xdebug.c: Removed sound include.

	* arch/unix/xaw/ui.c: Changed sound includes.

	* arch/unix/vsync.c, arch/msdos/ui.c, arch/msdos/vsync.c, main.c:
 	Changed sound includes.  Renamed all changed calls to common sound
 	functions.

	* arch/unix/sounduss.c: New file. USS sound device.

	* arch/unix/soundsgi.c: New file. SGI sound device.

	* arch/unix/soundsun.c: New file. SUN sound device.

	* arch/unix/soundaix.c: New file. AIX sound device.

	* arch/unix/soundhpux.c: New file. HPUX sound device.

	* arch/msdos/soundmidas.c: New file. MIDAS sound device.

	* arch/sdl/soundsdl.c: New file. SDL sound device.

	* soundfs.c: New file. Fs sound device.

	* sounddump.c: New file. Dump sound device.

	* sounddummy.c: New file. Dummy sound device.

	* soundspeed.c: New file. Speed sound device.

	* Makefile.in: Removed all references to the removed sid.c and
 	sid.h files. Added enough info about new object -files to compile.

	* configure.in: Added better checks for sound -headers that set the
	SOUND_XXX_OBJ -variables on Makefile.

	* include/warn.h (warn_free): New prototype.

	* warn.c (warn_free): New function.

	* warn.c (warn_init): Stralloc() the name instead of using the pointer
	directly.

Wed May 13 10:19:24 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.23.

	* Makefile.in: `$(XVIC_SYSPEC_OBJS)' moved from to `VIC20_OBJS'
	to `VIC20_LOBJS'.

	* sid.c (set_device_name, set_device_arg): Dynamically allocate
 	strings.
	(initsid): Handle empty device name and arg the same way as NULL.

	* arch/unix/xaw/c64ui.h: New file.

	* arch/unix/xaw/c64ui.c: New file.

	* warn.c (warn_init): Parameter `name' made const.  Allocate
	`name' dynamically.

	* arch/unix/xaw/uimenu.c: New file.

	* arch/unix/xaw/ui.c: Renamed variable and function names to
 	lower case.

	* arch/unix/xaw/uisettings.h: New file.

	* arch/unix/xaw/uisettings.c: New file.

	* arch/unix/xaw/uicommands.h: New file.

	* arch/unix/xaw/uicommands.c: New file.

Tue May 12 21:43:40 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* arch/unix/xaw/menu.h: Removed definition of `MenuEntry'.
	* arch/unix/xaw/ui.h: Moved here.

	* arch/unix/xaw/ui.c (UiBuildPopupMenu): Changed to handle a
	variable number of arguments, which are concatenated in the newly
	created menu.

Tue May 12 15:16:38 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.22.

	* true1541.c (true1541_init):  If `true1541_enabled' is nonzero,
	call `true1541_enable()'.

	* palette.c (palette_free): Do not free entry names if NULL.  Do
	not free entries if NULL.

	* true1541.c: Replaced `#ifdef 0' with `#if 0'.
	* fsdevice.c: Likewise.

Tue May 12 02:17:17 1998  Daniel Sladic  <sladic@eecg.toronto.edu>

	* mon_cli.y (rest_of_line): Removed rule that caused
        shift/reduce conflicts.

Mon May 11 23:04:40 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* c64/c64mem.c (store_io2, store_io2): Added AR banking support.
	(initialize_memory): Added ROMH memory configurations.
	(setup_action_replay): Copy AR ROM image to `romh_banks'.

Mon May 11 22:14:36 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.21.

Mon May 11 21:47:38 1998  Martin Pottendorfer  <Martin.Pottendorfer@aut.alcatel.at>

	* configure.in: Create the `arch/unix/xaw' directory.

Mon May 11 10:28:27 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* true1541.c (true1541_enable, true1541_disable): Set
	`true1541_enabled' even when ROMs have not loaded yet.

	* c64/vicii.c: New command-line option `-palette', new resource
 	`PaletteFile'.

	* arch/unix/xaw/ui.h: Removed `UiColorDef' typedef.

	* raster.c (open_output_window): Changed to use `palette_t'
	instead of `color_def_t'.
	* arch/unix/video.c (canvas_create):  Likewise.
	* arch/unix/xaw/ui.c (UiDoAllocColors, UiAllocColors): Likewise.
	(UiOpenCanvasWindow): Likewise.

	* palette.c, include/palette.h: New files.

	* resources.c (get_line): Removed.
	* utils.c (get_line): Moved here.
	(string_to_long): Handle sign and non-decimal bases correctly.

	* sysfile.c (sysfile_locate): New function.

	* configure.in: Changed `test "$foo" = "bar"' into `test x"$foo" =
	"xbar"'.

Mon May 11 03:38:24 1998  Daniel Sladic  <sladic@eecg.toronto.edu>

	* asm.c: #if'ed out 90% of the file which is no longer used.

	* mon.c, include/mon.h: Moved command names from lexer into
	an array in mon.c. Added support for recording/playback of
	commands. Added check_drive_emu_level() which determines if
	a monitor command makes sense given the current drive emulation
	level. Bunch of other small fixes/improvements.

	* mon_cli.l: All command names moved to an array in mon.c. The
	lexer looks into the array to determine what token to return.
	Correctness improvements, particularly for characters a,c and d.
        Added recording and playback commands.

	* mon_cli.y: Made the rules a bit more hierarchical. Added recording
        and playback commands. Added () support for conditional expressions.

Sun May 10 22:04:58 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* arch/msdos/ui.c (attach_disk_callback): Use
	`file_system_attach_disk' instead of `serial_select_file'.

	* arch/unix/xaw/ui.c (UiSmartAttach): Use
 	`file_system_attach_disk' instead of `serial_select_file'.

Sun May 10 19:04:46 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* main.c (main): Call `file_system_attach_disk' to attach disk
	images.

Sun May 10 19:28:46 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.20.

	* main.c (main): Fixed `printf' -> `fprintf' typo.

Sun May 10 16:34:21 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* Makefile.in: Added `fsdevice.c' and `fsdevice.h'. Removed
	special handling of drive.c.

	* menu.h: Moved file system device settings to a separate
 	`ChangeFileSystemDeviceSubmenu' menu entry.  Added entries to
 	toggle P00 and Action Replay Cartridge support

	* arch/unix/ui_xaw.c: New UI callbacks `UiToggleActionReplay'
	and `UiToggleFSDeviceConvertP00'.

	* c1541.c, include/c1541.h (attach_serial_device): Added dummy
	function.
	(attach_fsdevice): New function.

	* c64/c64mem.c (set_emu_id_enabled): Check whether other
 	extensions share the same address space.
	(set_ieee488_enabled): Changed likewise.
	(set_reu_enabled): Changed likewise.
	(set_action_replay_enabled): New function to enable AR support.
  	Increased `NUM_CONFIGS' to 32.  `struct export': New structure.
	(read_io1_watch, read_io1, store_io1_watch, store_io1): New
 	functions.
	(store_roml_watch, store_roml, read_romh, read_romh_watch): New
 	functions.
	(read_roml, read_roml_watch): New functions.
	(initialize_memory): Added 24 new memory configurations.
	(pport_changed): Renamed to `pla_config_changed'.
	(setup_action_replay, action_config_changed): New functions.

	* c64/c64mem.h: Added `read_io1', `read_roml', `store_io1' and
	`store_roml'.

	* drive.c: #include "fsdevice.h".  Moved `SET_LO_HI' macro and
 	`IPE_*' definitions to `drive.h'.
	(initialize_1541): Removed #ifdef STANDALONE_1541.
	(floppy_parse_name): Made non-static.  Moved the file system
 	device routines to `fsdevice.c'.

	* fsdevice.c, fsdevice.h: New files.  Added new resource
	`fsdevice_convert_p00_enabled'.

	* include/drive.h: `SET_LO_HI', `IPE_*' moved here.

	* main.c: #include "fsdevice.h".
	(main): Added call to `fsdevice_init_resources'.

	* true1541.c (write_track_gcr): Added creation of new tracks.

Sun May 10 11:00:17 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.19.

	* arch/unix/ui_xaw.c: Moved to `arch/unix/xaw/ui.c'.
	* arch/unix/ui_xaw.h: Moved to `arch/unix/xaw/ui.h'.
	* arch/unix/menu.h: Moved to `arch/unix/xaw/menu.h'.
	* arch/unix/xdebug.c: Moved to `arch/unix/xaw/xdebug.c'.
	* arch/unix/xdebug.h: Moved to `arch/unix/xaw/xdebug.h'.

	* arch/unix/ui_xaw.c (UiToggleTurbo): Removed.
	(UiToggleWarpMode): New function, toggles the "WarpMode" resource.
	(UiDisplaySpeed): New parameter `warp_flag'.

	* arch/unix/vsync.c: New resource "WarpMode"; new command-line
	options "-warp" and "+warp".
	(do_vsync): Handle warp mode.

	* arch/unix/ui_xaw.c (UiJamDialog): Added "Hard Reset" button.

	* sid.c (initialize_sound): Renamed to `sound_init'.

	* tapeunit.c (initialize_tape): Renamed to `tape_init'.
	(attach_tape_image): Renamed to `tape_attach_image'.
	(detach_tape_image): Renamed to `tape_detach_image'.

	* true1541.c (initialize_true1541): Renamed to `true1541_init'.

	* vic20/vic20.c, c64/c64.c [HAS_JOYSTICK] (vsync_hook): Call
 	`joystick()'.

	* arch/unix/vsync.c (do_vsync): Do not handle the joystick.

	* pet/viap.def: Removed references to `app_resources.debugFlag'.

	* serial.c (initialize_serial): Renamed to `serial_init'.
	(install_serial_traps): Renamed to `serial_install_traps'.
	(remove_serial_traps): Renamed to `serial_remove_traps'.
	(attach_serial_device): Renamed to `serial_attach_device'.
	(remove_serial): Renamed to `serial_remove'.
	(image_file_name): Renamed to `serial_get_file_name'.
	(get_serial_device): Renamed to `serial_get_device'.

	* arch/unix/ui_xaw.c: Removed all the `#ifdef AUTOSTART's.

	* autostart.c (autostart_advance): If `NoTraps' is set, autostart
 	with true 1541 emulation turned on.

	* patchrom.c (patch_rom): Return immediately if the requested
 	revision is a NULL or empty string.

	* resources.c (read_resource_item): Return the expected values.

	* arch/unix/menu.h: Added submenu for serial settings, with
 	`NoTraps' toggling.  FS-device selection moved to this menu.

	* traps.c: Added command-line options and resources.  When
 	`NoTraps' changes from zero to nonzero, the traps are removed from
 	the ROM; when it changes from nonzero to zero, the traps are
 	reinstalled.
	(set_trap): Renamed to `traps_add'.  Put `BRK' in the ROM only if
 	`NoTraps' is zero; otherwise, only add the trap to the list.
	(remove_trap): Renamed to `traps_remove'.  Physically remove the
 	trap from ROM only if `NoTraps' is zero; otherwise, just remove
 	the trap from the list.
	(trap_handler): Renamed to `traps_handler'.
	(initialize_traps): Renamed to `traps_init'.

	* c64/c64mem.c: Added missing `-emuid' and `+emuid' command-line
 	options.

	* arch/unix/ui_xaw.c: Added missing resource `DisplayDepth' and
	command-line option `-displaydepth'.

Sat May  9 11:18:36 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.18.

	* include/vicii.h: Moved to `c64/vicii.h'.
	* include/vic.h: Moved to `vic20/vic.h'.
	* include/crtc.h: Moved to `pet/crtc.h'.

	* true1541.c: New variables `pal_cycles_per_sec',
 	`ntsc_cycles_per_sec'.
	(initialize_true1541): New parameters `pal_hz', `ntsc_hz'.
	Initialize `pal_cycles_per_sec' and `ntsc_cycles_per_sec' from
	their values.

	* c64/c64.c, vic20/vic20.c (machine_init): Updated
 	`kbd_buf_init()' and `autostart_init()' calls.

	* autostart.c: New variable `min_cycles'.  Use it instead of
 	hardcoded constants.
	(autostart_init): New parameter `mincycles'.

	* kbdbuf.c: New variable `kernal_init_cycles'.
	(kbd_buf_init): New parameter `newcycles'.  Initialize
	`kernal_init_cycles' with its value.
	(kbd_buf_flush): Do not write to the Kernal keyboard buffer before
 	`kernal_init_cycles' ticks.

	* true1541.c (true1541_prevent_clk_overflow): New parameter `sub',
 	passed to `true1541_cpu_prevent_clk_overflow'.  Use the value
 	returned by `true1541_cpu_prevent_clk_overflow' instead of
 	`PREVENT_CLK_OVERFLOW_SUB'.

	* 1541cpu.c (true1541_cpu_prevent_clk_overflow): New parameter
 	`sub'; return type changed to `CLOCK'.  Return the number of
 	cycles subtracted.

	* c64/c64.c (machine_init): Call `initialize_sound'.

	* main.c (main): Do not call `initialize_sound' anymore.

	* sid.c: New variables `cycles_per_sec', `cycles_per_rfsh'.  Use
 	them instead of old `CYCLES_PER_SEC' and `CYCLES_PER_RFSH'
 	#defined constants.
 	(initialize_sound): New parameters `clock_rate',
 	`cycles_per_frame'.  Initialize `cycles_per_sec' and
	`cycles_per_rfsh' from them.

	* c64/vicii.c (vic_ii_prevent_clk_overflow): New parameter `sub'.
	Use it instead of `PREVENT_CLK_OVERFLOW_SUB'.
	* vic20/vic.c (vic_prevent_clk_overflow): Likewise.
	* pet/crtc.c (crtc_prevent_clk_overflow): Likewise.
	* cia-tmpl.c (mycia_prevent_clk_overflow): Likewise.
	* via-tmpl.c (myvia_prevent_clk_overflow): Likewise.
	* sid.c (sid_prevent_clk_overflow): Likewise.

	* vic20/vic20.c, c64/c64.c, pet/pet.c (vsync_hook): Adapted
 	accordingly.

	* include/interrupt.h: Removed `PREVENT_CLK_OVERFLOW_SUB'.
 	(prevent_clk_overflow): New parameter `baseval'.  Calculate the
 	number of cycles to subtract so that it is multiple of `baseval'.
  	Return the number of subtracted cycles instead of a boolean value.

	* include/vmachine.h: Removed timing constants.

	* c64/c64.h, vic20/vic20.h: New files.

	* patchrom.c (patch_rom): If `str' is not a number, check if its
 	value is "sx"; if so, patch to revision 67; otherwise report an
	error.  Moreover, handle revision "4064" as revision "100".

	* vic20/vic20.c (machine_init): Removed argument to
 	`autostart_init()'.

	* include/vice.h: Do not #define `AUTOSTART'.

	* include/autostart.h (autostart_reset): Removed `#ifdef
 	AUTOSTART'.

	* vic20/vic20mem.c: Command-line options.
	(vic20_mem_init_cmdline_options): New function.

	* c64/c64.c (machine_init_cmdline_options): New function.
  	Initialize the command-line options for all the C64 modules.

	* sid.c: Command-line options.
	(sid_init_cmdline_options): New function.

	* true1541.c (set_sync_factor): Added missing assignment to
 	`sync_factor' when the value is not `TRUE1541_SYNC_PAL' or
 	`TRUE1541_SYNC_NTSC'.
	(true1541_enable): Do not enable the 1541 emulation if the ROM has
	not been loaded.

	* arch/unix/video.c: Command-line options.
	(video_init_cmdline_options): New function.

	* arch/unix/vsync.c: Command-line options.
	(vsync_init_cmdline_options): New function.

	* arch/unix/ui_xaw.c: Command-line options.
	(ui_init_cmdline_options): New function.

	* include/vicii.h, include/vic.h, include/crtc.h: Removed
 	`SCREEN_SKIP_FRAMES'.

	* c64/vicii.c: Command-line options.
	(vic_ii_init_cmdline_options): New function.

	* c64/c64mem.c: Command-line options.
	(c64_mem_init_cmdline_options): New function.
	(mem_load): Display the ROM names when error happens.

	* main.c (main): Call `sysfile_init_cmdline_options()'.  Moved
 	loading of resources before the command-line parsing.  Removed
 	assignment to `app_resources.mitshm'.  Exit if there are extra
 	unneeded arguments on the command-line instead of just ignoring
 	them.

	* sysfile.c (sysfile_init_cmdline_options): New function.

	* cmdline.c (cmdline_parse): Use `resource_set_value_string()' to
	set the value of a resource from a command-line option.

	* resources.c (resources_set_value_string): New function.

Fri May  8 23:08:50 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* main.c: Updated option list with the new description fields.

	* cmdline.c (cmdline_show_help): New function.

	* include/cmdline.h: New members `param_name' and `description' in
	`cmdline_option_t'.

	* main.c (main): Fixed typo `argc > 1' -> `argc >= 1'.
	(cmdline_default): New function.  Implements new option
 	`-default'.

	* cmdline.c (lookup, cmdline_parse): Fixed handling of ambiguous
 	options.
	(cmdline_parse): `--' interrupts command-line parsing.

Fri May  8 20:00:49 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.17.

	* sysfile.c (sysfile_init): Use `FINDPATH_SEPARATOR_STRING'.

	* findpath.c: #include "findpath.h".
 	(findpath): Use `FINDPATH_SEPARATOR_CHAR'.

	* include/findpath.h: #define `FINDPATH_SEPARATOR_CHAR' and
	`FINDPATH_SEPARATOR_STRING'.  They are #defined differently on
	MS-DOS (which uses ';' to separate path elements) and Unix (which
	uses ':' instead).

	* main.c: Added command-line option handling.
	(main): Handle `-autostart'.

	* arch/msdos/kbd.c (handle_joy_emu): Handle missing `K_KP5' case
 	when key is released.

Wed May  6 18:05:16 1998  Giuliano Procida  <gpp10@cam.ac.uk>

	* Makefile.in (install.bin, install.roms): Do a `set -e' before
	anything else.

Sun May	3 16:50:50 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* drive.c (detach_floppy_image): Detach before closing the image.

	* true1541.c (read_image_gcr): Updated error messages.
	(write_track_gcr): Updated error messages and fixed a typo in the
	speed zone calculation.

Sat May  3 00:54:58 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* cmdline.c, include/cmdline.h: New files.

	* resources.c (resources_register): Fixed reallocation of
 	`resources' when going out of space.  Do not allocate `name'
	dynamically, just use the passed pointer instead.

	* autostart.c: #include "mem.h", not "c64mem.h".

	* drive.c (attach_floppy_image, detach_floppy_image): Do not call
	`attach_func' or `detach_func' if they are NULL.

Sat May  2 18:31:50 1998  Andreas Boose	 <boose@unixserv.rz.fh-hannover.de>

	* arch/unix/menu.h: New sub menu `ChangeFileSystemDeviceSubmenu'.
	Added device #11 entry to `AttachDiskImageSubmenu' and
	`DetachDiskImageSubmenu'.

	* arch/unix/ui_xaw.c: New UI callbacks
 	`UiToggleFileSystemDevice[8..11]'.
	(UiAttachDisk): Call to `file_system_attach_disk' on attach.
	(UiDetachDisk): Likewise.

	* Makefile.in: Added `attach.c' and `attach.h'.

	* attach.c, include/attach.h: New file for file system attach
	management.

	* c1541.c (main): Added `NULL' parameter to `initialize_1541'.

	* c64/c64.c, pet/pet.c, vic20/vic20.c (machine_init): Changed to
	call `initialize_drives' instead of initialising the drives
	separately.

	* drive.c (initialize_1541): Do not allocate a new drive
 	structure if an old drive structure is present.  Always clear this
 	structure.

	* drive.c, include/drive.h (initialize_1541): New parameter
 	`oldinfo'.

	* main.c (main): Call `file_system_init_resources'.

	* serial.c, include/serial.h (get_serial_device): New function to
	get a pointer to the drive info structure.

Fri May  1 22:17:08 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.16.

	* main.c (main): Removed local variable `start_addr'.  Call
 	`mainloop(0)'.

	* vic20/vic20.c (vsync_hook): Call `autostart_advance()'.

	* autostart.c: New implementation, using the kernal variables in
	page zero to check for BASIC messages.
	(check): Changed return value: `YES', `NO', `NOT_YET'.
	(autostart_advance): Updated accordingly.

	* kbdbuf.c (kbd_buf_is_empty): New function.

Tue Apr 28 22:21:41 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* include/autostart.h: `AUTOSTART_*' macros removed.
	* autostart.c: Moved here, and turned into an `enum'.

	* c64.c, vic20/vic20.c (machine_init): Call `autostart_init()'.

	* kbdbuf.c (kbd_buf_flush): Use `mem_store()' and `mem_read()'
	instead of accessing `ram' directly.

	* vic20/vic20.c, c64/c64.c (machine_init): Call `kbd_buf_init()'.

	* kbdbuf.c: Moved parameters from former `struct kernal_kbd_buf'
 	into separate variables.
	(kbd_buf_init): New parameters `location', `plocation',
 	`buffer_size'.

	* include/kbdbuf.h, c64/c64.c, vic20/vic20.c: Removed `struct
 	kernal_kbd_buf'.

	* sysfile.c (sysfile_init): `EMULATOR' replaced with `emu_id'.

	* c64/autostart.c: Moved to `autostart.c'.
	* Makefile.in: Compile it once for every emulator.

	* vic20/vic20iec.c (iec_drive_read, iec_drive_write): Do not check
	whether the 1541 is turned on anymore.

	* vic20/vic.c: Implemented new-style resource handling.

	* vic20/vic20mem.c: Implemented new-style resource handling.
	(vic_mem_enable_ram_block): New.
	(vic_mem_disable_ram_block): New.
	(initialize_memory): Always activate all the memory.

	* vic20/vic20.c (machine_init): Do not call
 	`install_serial_traps'.

	* configure.in: Compile `arch/unix/ui_xaw.c' only once.

	* Makefile.in: Compile `resources.c' only once.

Tue Apr 28 20:57:13 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.15.

	* mon.c (mon): Corrected `suspend_speed_eval()' calls.

	* utils.c (subst): Argh.  Fixed stupid bug with `s_len' update.

Tue Apr 28 01:36:01 1998  Daniel Sladic  <sladic@eecg.toronto.edu>

	* 1541cpu.c,maincpu.c: Removed #define FORCE_IMPORT. Added
	#define CALLER.

	* 6510core.c: Removed separate copies of `DO_INTERRUPT' by using
 	new #define `CALLER'.  Rearranged monitor interrupt handling.

	* mon.h: Changed some of the symbol table prototypes.
	(mon_helper): Removed.
	(mon_check_watchpoints, mon_check_icount): New.

	* mon6510.h: Removed bitfields.

	* mon_cli.l: Added some abbreviations.  Uncommented DATA_TYPEs.
  	Changed memspaces so they must have a ':'.

	* mon_cli.y: Symbol table handling cleanup.  Account for ':'
 	included in memspaces by lexer.

	* mon.c: Cleanup symbol table functions.  Unify monitor traps
 	under `IK_MONITOR'.
	(mon_helper): Removed.
        (mon_check_icount, mon_check_watchpoints): New.
        (print_registers): Use new TEST macro to turn SR flags into 0/1.
 	(remove_name_from_symbol_table, free_symbol_table): Implemented.

Tue Apr 28 00:39:07 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* c1541.c (disk_gcrformat): Changed to the new GCR disk format.

Mon Apr 27 10:21:18 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.14.

	* memutils.c (mem_load_sys_file): Use `sysfile_open()'.

	* main.c (main): Call `sysfile_init()' and
 	`sysfile_init_resources()'.

	* include/sysfile.h, sysfile.c (sysfile_open): New files, new
 	function.
	(sysfile_init, sysfile_init_resources): More new functions.

	* utils.c (subst): New function.

	* sid.c (set_playback_enabled): If playback is turned on, call
 	`vsync_disable_timer()'.

	* arch/unix/ui_xaw.c (UiToggleTurbo): Temporarily removed.
	(UiSetNumpadJoystickPort, UiSwapJoystickPorts): Temporarily
 	removed.

	* mon.c (get_reg_val, set_reg_val, set_mem_val,get_mem_val): Allow
	accessing the 1541 even when the emulation is turned off.

	* serial.c (install_serial_traps): Temporary change: always
	install traps.

	* raster.c: Use `video_cache_enabled' and `double_scan_enabled'
	instead of the values in `app_resources'.

	* c64/vicii.c: Implemented new-style resource handling.

	* c64/autostart.c (settrue1541mode): Call `true1541_enable()' and
	`true1541_disable()', instead of setting `app_resources' and
	calling `true1541_ack_switch()'.

	* c64/c64.c, vic20/vic20.c (vsync_hook): Call
 	`true1541_vsync_hook()'.

	* true1541.c (true1541_vsync_hook): New function.

	* traps.c: Removed all the `IDLE_TRAP' stuff.

	* utils.c (string_set): New function.

	* c64/c64.c (machine_init): Do not patch the ROM.

	* c64/c64mem.c: Implemented new-style resource handling.

	* arch/unix/kbd.c (kbd_event_handler, kbd_init): Do not reference
 	`app_resource.numpadJoystick' anymore.

	* main.c (main): Temporarily disabled attaching of disk/tape
	images at startup.

	* misc.c (show): Removed.

	* c64/c64.c (machine_init): Do not handle `noTraps' anymore.
  	Disabled autostart handling.

	* c64/c64iec.c (iec_drive_read, iec_drive_write): Do not check
	`app_resources.true1541' anymore.
	(iec_cpu_write, iec_cpu_read): Use `true1541_enabled' instead of
	`app_resources.true1541'.
	(parallel_cable_cpu_write): Do nothing if true 1541 is turned off.
	(parallel_cable_cpu_read): Return 0 if true 1541 is turned off.

	* memutils.c (mem_load_sys_file): Removed parameter `path'.
	Manually lookup the `Directory' resource.

	* 1541cpu.c (true1541_set_sync_factor): Renamed to
 	`true1541_cpu_set_sync_factor'.
	(true1541_cpu_init): Do not set the initial sync factor.

	* true1541.c (true1541_set_sync_factor): New.

	* include/true1541.h: Removed `TRUE1541_PAL_SYNC_FACTOR' and
	`TRUE1541_NTSC_SYNC_FACTOR'.  New constants `TRUE1541_SYNC_PAL'
	and `TRUE1541_SYNC_NTSC'.

	* true1541.c: Implemented new-style resource handling.
	(true1541_disable): Always call `install_serial_traps()' if the
	ROM has been loaded.
	(true1541_ack_switch, true1541_ack_sync_factor): Removed.

	* serial.c (install_serial_traps): Do not install any traps if
	`app_resources.noTraps' is nonzero.

	* arch/unix/video.c: Implemented new-style resource handling.

Sun Apr 26 19:12:35 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* drive.c (fs_test_pc64_name): New function to test if a file is
	P00 file format compliant.
	(fs_find_pc64_name): New function to scan a directory for valid
	P00 files.
	(open_fs): Also check for P00 files.  Commented out old P00 support.
	(read_fs): Use the right name for a directory listing if a P00 file
	is found.

Sun Apr 26 14:47:47 1998  Daniel Sladic  <sladic@eecg.toronto.edu>

	* 1541cpu.c, maincpu.c: Renamed `FORCE_INPUT' into `FORCE_IMPORT'.

	* 6510core.c: All monitor based interrupts moved to `IK_MONITOR'
 	case.  Type of interrupt determined by `mon_mask'.  Removed
 	`FORCE_INPUT' test from mainloop.

	* Makefile.in: Added `$(LIBS)' for c1541 since `-lreadline' was
 	needed.  Added `zipcode.o' to `PETCAT_DEPS'.

	* asm.h: Added `modename[]' extern.

	* interrupt.h: Removed `IK_BREAKPT'.  Added IK_MONITOR.
	(breakpoints_on): Replaced by `monitor_trap_on()'.
	(breakpoints_off): Replaced by `monitor_trap_off()'.
	(maincpu_breakpoints_on, maincpu_breakpoints_off): Removed.
	(true1541_breakpoints_on, true1541_breakpoints_off): Removed.

	* mon.h: Added `enum mon_int'.  Added symbol table types.  Removed
 	uneeded externs.  Added new externs.

	* misc.c (sprint_disassembled): Add labels to disassembled code.

	* mon_cli.l: Cleanup.  Added label support.

	* mon_cli.y: Cleanup.  Added label support and "quick assembly"
 	support.  Support specifying memspace of registers.  Minor
 	usability and correctness fixes.  All output now redirectable.

	* mon.c: Cleanup.  Added label support.  Added relative addressing
 	mode to assembler.

Sun Apr 26 11:16:00 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* arch/unix/vsync.c: Implemented new-style resource handling.
 	(do_vsync): Always call `flush_sound()', and pass it
 	`relative_speed'.

	* sid.c: Implemented new-style resource handling.
	(flush_sound): New parameter `relative_speed.  If playback is
 	disabled, return immediately.

	* reu.c: Implemented new-style resource handling.
	(close_reu, reset_reu): Removed parameter `filename'.

	* resources.c, include/resources.h: New, more flexible
 	implementation.

	* main.c (main): Do not handle the `StartAddr' resource anymore.

	* include/resources.h: Removed unused members `gamePath',
 	`module', `reusize', `biosName', `programName', `reloc',
 	`startAddr', `colors', `traceFlag', `verboseFlag', `haltFlag',
 	`printCommand', `PrinterLang', `Locale', `video40', `video80',
 	`videoCache80' and `mouse' from `app_resources'.

Sat Apr 25 22:00:00 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.13.

	* sid.c (sid_prevent_clk_overflow): Compile this even if `SID' is
	not #defined.

	* configure.in: Compile `arch/unix/kbd.c' and `arch/unix/vsync.c'
 	only once.

	* main.c (main): Do not call `vsync_init()' anymore.

	* c64/c64.c, vic20/vic20.c, pet/pet.c (vsync_hook): New (static).
	(machine_init): Call `vsync_init()' and register `vsync_hook' as
 	the vsync hook.

	* true1541.c: `true1541_rom_loaded' renamed to `rom_loaded'; all
 	occurrences updated.
 	(true1541_update_ui_status): New function, ripped from
 	`update_drive_status()' in `vsync.c'.

	* arch/unix/vsync.c: New variables `refresh_frequency',
 	`vsync_hook', `cycles_per_sec'.  Do not #include "vmachine.h",
 	"autostart.h", "true1541.h" or other machine-specific headers
 	anymore.  #include "vice.h".
	(vsync_prevent_clk_overflow): Made public.  It only subtracts
 	`PREVENT_CLK_OVERFLOW_SUB' from `speed_eval_prev_clk' now.
	(vsync_init): New parameters `hz', `cycles', `hook'.  Initialize
 	`refresh_frequency', `cycles_per_sec' and `vsync_hook' from them.
	(do_vsync): Do not handle true1541, clock overflow or autostart
 	anymore.  Only call `vsync_hook' instead.
	(set_timer_speed, do_vsync): Use `vsync_frequency' instead of
 	`RFSH_PER_SEC'.
	(display_speed): Use `cycles_per_sec' instead of `CYCLES_PER_SEC'.
	(update_drive_status): Removed.

	* arch/unix/kbd.c: `keyc_mem', `keyc_num' made static.

	* pet/petmem.c (mem_load): Do not call `set40key()' or
	`set80key()' anymore.

	* arch/unix/kbd.c: Cleaned up unused parts.  Use
 	`xmalloc()'/`xrealloc()' instead of `malloc()'/`realloc()'.  New
 	variable `default_keymap_name'.
	(kbd_init): Return type made `int'.  New parameter `keymap_name'.
	(kbd_load_keymap): If `filename' is NULL, load the file
 	`default_keymap_name'.
	(kbd_load_keymap): Do not set `app_resources.keymapFile' anymore.
	(set80key, set40key): Removed.
	(kbd_parse_keymap): Return type changed to `int'.

	* main.c (main): Do not call `kbd_init()' anymore.

Sat Apr 25 15:55:23 1998  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* serial.c: `SET_ST', `BSOUR' and `TMP_IN' reverted to the
 	original C64, VIC-20 and C128 compliant values.

Sat Apr 25 00:13:20 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.12.

	* 1541cpu.c: Static memory read/store functions prepended with
 	`true1541_' to avoid conflicts with the maincpu ones.

Fri Apr 24 21:30:05 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* 1541cpu.c: `true1541_monitor_interface'.
	(true1541_turn_watchpoints_on): Removed.
	(true1541_turn_watchpoints_off): Removed.
	(true1541_toggle_watchpoints): New.

	* c64/c64mem.c, vic20/vic20mem.c, pet/petmem.c (machine_init):
	Initialize the monitor passing the proper functions.

	* c64/c64mem.c, vic20/vic20mem.c (maincpu_turn_watchpoints_off):
 	Removed.
	(maincpu_turn_watchpoints_on): Removed.
	(mem_toggle_watchpoints): New.
	(mem_store, mem_read): New.

	* include/macro.h: Removed.

	* Makefile.in: Compile `mon.c' once.

	* c64/c64.c, vic20/vic20.c, pet/pet.c (machine_init): Initialize
	it here.

	* main.c (main): Do not initialize the monitor anymore.

	* mon.c: Access the registers the main and 1541 CPUs via
 	`monitor_interface_t'.  Removed all the `NO_DRIVE' #ifdefs.
	(init_monitor): Renamed to `monitor_init'.
	(monitor_init): New parameters `maincpu_interface_init',
 	`true1541_interface_init'.

	* include/mon.h: New typedef `monitor_interface_t'.

	* 1541cpu.c: `read_func', `store_func', `read_func_watch',
	`store_func_watch', `read_func_nowatch', `store_func_nowatch' made
	static again.
	(true1541_read, true1541_store): New functions.

	* 6510core.c (IMPORT_REGISTERS, EXPORT_REGISTERS): New macros
	using `GLOBAL_REGS'.

	* maincpu.c, 1541cpu.c: Declare registers using `mos6510_regs_t';
 	all files using CPU registers updated accordingly.  Removed
 	`IMPORT_REGISTERS()' and `EXPORT_REGISTERS()' macros.  Just
 	#define `GLOBAL_REGS' to `maincpu_regs' and `true541_cpu_regs'
 	respectively instead.

	* include/maincpu.h: Removed 6510 macros.

	* include/mos6510.h: New file; defines the `mos6510_regs_t'
	typedef for storing register status.

	* include/6510core.h: #include "types.h".

	* configure.in, Makefile.in: Compile `xdebug.c' only once and use
	the resulting object files for all the emulators.

	* Makefile.in: Compile `serial.c', `traps.c', `tapeunit.c' and
 	`misc.c' only once and use the resulting object files for all the
 	emulators.  Link `parallel.o' to all the emulators.

	* pet/petmem.c (mem_set_tape_sense): New (dummy) function.

	* c64/c64.c: Added tape trap list.
	(machine_init): Call `initialize_tape()' with the trap list.

	* include/tapeunit.h (initialize_tape): Non-system specific
 	#defines copied to `tapeunit.c'.  Other ones removed.

	* tapeunit.c (initialize_tape): Removed parameter `number'; new
 	parameter `trap_list'.  Make `tape_traps' point to `trap_list'.
	Use `xmalloc' instead of `malloc()'/`assert()'.
	(tapereceive, findheader, writeheader): Made public.

	* serial.c: Never exclude any function through `#ifdef'.

	* tapeunit.c: Completed trap lists with `resume_address'.
	(writeheader, tapereceive, findheader): Do not change `PC'
 	anymore.

	* serial.c (serialattention, serialsendbyte): Do not change `PC'
 	anymore.
	(serialreceivebyte, trap_serial_ready): Ditto.

	* c64/c64.c, vic20/vic20.c: Completed trap list with
 	`resume_address'.

	* traps.c (trap_handler): Set `PC' to `resume_address' when done
	calling the trap.

	* include/traps.h: New member `resume_address' in `trap_t'.

	* true1541.c (true1541_detach_floppy): New parameter `floppy'.
	Do a little sanity check.

	* serial.c (serial_select_file): Do not try initialize a new
 	device if necessary anymore: just return -1.

	* drive.c (initialize_1541): New parameters `attach_func' and
 	`detach_func'.
	(attach_floppy_image): Call `floppy->attach_func()' if successful.
	(detach_floppy_image): Call `floppy->detach_func()' if successful.

	* include/drive.h: New members `attach_func' and `detatch_func' in
	`DRIVE'.

Fri Apr 24 11:00:00 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* serial.c: Removed any true 1541 references.

	* c64/c64.c, vic20/vic20.c: Moved serial trap initialization array
 	here.

	* serial.c (serialattention, serialsendbyte, serialreceivebyte):
	Made public.
 	(trap_serial_ready): Made public.

	* traps.c (set_trap, remove_trap): Made const-safe.

	* serial.c (initialize_serial): New parameter `trap_list'; removed
 	parameter `notraps'; set the list of traps to `trap_list'.  Remove
 	existing traps.  Return type changed to `int' (zero for success,
 	nonzero for failure).
	(install_serial_traps, remove_serial_traps): Remove all the traps
 	in `trap_list'; the first element whose callback function is NULL
 	marks the end of the list.

	* c64/c64.c, vic20/vic20.c, pet/pet.c (machine_shutdown): New
	function.

	* c64/c64.c, vic20/vic20.c, pet/pet.c (machine_init): Return type
 	changed to `int', and moved machine-specific initialization here.

	* main.c (main): Removed machine-specific initialization.

Wed Apr 22 18:22:43 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.11.

Wed Apr 22 17:33:29 1998   Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* Makefile.in: Added `gcr.o' to `COMMON_OBJS' and `C1541_DEPS'.
	Added `gcr.h' to `VICEHDR'.

	* c1541.c: #include "gcr.h".

	* gcr.c (convert_4bytes_to_GCR): Moved here from `true1541.c'.
	(convert_GCR_to_4bytes, convert_sector_to_GCR): Likewise.
	(convert_GCR_to_sector): Likewise.

	* gcr.h: New file.

	* true1541.c: Updated TODO list.  Added #include "gcr.h".
	Moved low-level GCR functions to `gcr.c'.

Wed Apr 22 11:19:28 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.10.

	* true1541.c (true1541_read_disk_byte): Rotate disk correctly.

	* 6510core.c: Removed `TRUE1541_ROTATE' #ifdefs.
	* viad2.c: Likewise.
	* viad1.c: Likewise.

	* vic20/via2.def (INCLUDES): #include "vic20iec.h"
	* vic20/via1.def (INCLUDES): #include "vic20iec.h"

	* viad1.def (INCLUDES): #include "iecdrive.h".

	* c64/cia2.def (INCLUDES): #include "c64iec.h".

	* c64/c64iec.h, vic20/vic20iec.h: New files.

Wed Apr 22 10:11:05 1998 André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* arch/unix/kbdef.h (shift_type): Changed SHIFT defines to enum
 	again.  Outcommented default and both PET keyconvmaps.
	* arch/unix/kbd.c (numpad_status, joy1pad_status, joy2pad_status):
 	`joy*pad_status' replace `numpad_status'.
	(joypad_bits): Array to hold the bits used in `joy[]' depending on
 	numpad key (0-9).
	(joyreleaseval): New function to handle diagonal joystick
 	keyrelease events.
	(kbd_event_handler): If `app_resources.numpadJoystick' is set,
 	then negative-row keyconvtable are used to emulate joysticks.  The
 	column gives the numpad key "0-9" as you have them on a PC
 	keyboard and they emulate the direction belonging to that
 	'virtual' numpad.  So keymap file maps keysyms to virtual numpad.
  	On a `LeaveNotify' event the joysticks are reset as well.  Also
 	the virtual numpad "5" can be used to reset the joysticks.
	(kbd_init): Clear virtual numpads, and set
 	`app_resources.numpadJoystick' to one.
	(kbd_parse_entry): Sanity checks to allow only valid entries in
 	the keymap table.
	(kbd_load_keymap): Now sets the `app_resources.keymapFile'
 	appropriately each time a new keymap is loaded.

Wed Apr 22 01:59:04 1998  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* arch/unix/kbd.c (handle_joy_emu): Removed.
	(kbd_event_handler): Check if row less than zero, if so than
 	handle joystick arrays instead of keyboard.
	(kbd_init): If `keymapFile' is not set, set to `vice.vkm'.  Load
 	keymap file.
	(set80key, set40key): If keymapFile resource not set, set to
 	`busi_uk.vkm' or `graphics.vkm' resp.
	(kbd_load_keymap): If no default keymap, alloc an empty one with
 	150 entries.

Wed Apr 22 02:53:48 1998  Daniel Sladic  <sladic@eecg.toronto.edu>

	* asm.c: Made `modename' array globally accessible.

	* mem.h: Declare `store_zero()'.

	* mon.c/mon.h (mon_assemble_instr): New function.
	(assemble_line): Removed function.

	* mon_cli.l: Assembly support.  Fixed datatype detection.

	* mon_cli.y: Assembly support.

	* pet/pet.c: Changed `machdesc.h' to `machspec.h'.

	* pet/petmem.c: Fixed bad comment.

Tue Apr 21 23:18:36 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* include/machspec.h: Prototype for `machine_init()'.

	* include/mem.h: Prototypes for `read_zero()', `read_rom()' and
 	`store_zero()', `store_rom()'.
	* c64/c64mem.h, vic20/vic20mem.h: Removed from here.

Tue Apr 21 13:17:58 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.9.

	* include/true1541.h: Removed machine-dependent function
 	declarations.

	* arch/unix/ui_xaw.c: Compile everything even when `HAVE_TRUE1541'
	is not #defined.

	* vic20/vic20iec.c (parallel_cable_drive_write): Dummy.
	(parallel_cable_drive_read): Another dummy.

	* c64/c64iec.c (parallel_cable_cpu_write): Moved here from
 	`true1541.c'.
	(parallel_cable_drive_read): Likewise.
	(parallel_cable_cpu_read, parallel_cable_cpu_write): Likewise.

	* true1541.c (serial_bus_drive_read, serial_bus_drive_write):
	Removed.
	(serial_bus_cpu_write, serial_bus_cpu_read): Removed.
	(serial_bus_pa_read, serial_bus_pa_write): Removed.
	(serial_bus_pcr): Removed.

	* c64/c64iec.c (iec_drive_write, iec_drive_read): New file, new
	functions.
	(iec_cpu_read, iec_cpu_write): More new functions.

	* vic20/vic20iec.c (iec_drive_write, iec_drive_read): New file,
	new functions.
	(iec_pa_read, iec_pa_write, iec_pcr_write): More new function.

	* c64/c64.c, vic20/vic20.c, pet/pet.c (machine_init): New
 	files, new function.

	* main.c (main): Use `machdesc.machine_name' instead of
 	`EMULATOR'.
	(main, exit64): Removed all `NO_SERIAL' #ifdefs (always enable the
 	fast serial emulation).

	* Makefile.in: Added `zipcode.o' to `C1541_OBJS'.

	* include/true1541.h, true1541.c: Removed `TRUE1541_ROTATE' and
 	`TRUE_GCR_WRITE' #defines and related #ifdefs.  It always uses
 	true GCR emulation now.

	* pet/petmem.c: Added `_mem_read_base_tab_ptr' as on the C64.
	Added `ram_size'.  Added `_mem_read_tab_ptr' and
	`_mem_write_tab_ptr'.
	(initialize_memory): Initialize these variables.

	* kbdbuf.c: Removed `kernal_kbd_buf'.
	* include/kbdbuf.h: Moved here.

	* main.c (main): Removed C128-specific stuff.

	* c64/c64mem.h, vic20/vic20mem.h, pet/petmem.h: All memory
 	constants prepended with `C64_', `VIC20_' and `PET_' respectively.
  	All occurences in the machine-specific files updated.

	* include/mem.h: New variable `ram_size'.

	* vic20/vic20mem.c: Added `_mem_read_tab_ptr' and
	`_mem_write_tab_ptr' as on the C64.
	(maincpu_turn_watchpoints_on, maincpu_turn_watchpoints_off): use
	`_mem_read_tab_ptr' and `_mem_write_tab_ptr' instead of updating
	the memory arrays.
	(maincpu_
	(initialize_memory): Call `maincpu_turn_watchpoints_off()'.

	* c64/c64mem.h, vic20/vic20mem.h: Removed machine-dependent stuff.
	* include/mem.h: Moved here.

	* Makefile.in: `maincpu.o' moved to `COMMON_OBJS'.

	* maincpu.c: #include "machspec.h".  Removed machine-specific
 	includes.
	(reset): Removed machine-specific initialization.  Call
 	`true1541_reset' only if the feature is present, according to
 	`machdesc'.

	* vic20/vic20.c (machine_reset, rom_trap_allowed): New file, new
 	functions.

	* c64/c64.c (machine_reset, rom_trap_allowed): New file, new
 	functionS.

	* include/machdesc.h: New file.

Tue Apr 21 03:12:35 1998  Daniel Sladic  <sladic@eecg.toronto.edu>

	* 1541cpu.c,include/1541cpu.h: 1541 watchpoint support: Added
        watchpoint functions, watchpoint functions array and functions
        to turn watchpoints on/off. Define FORCE_IMPORT.

	* 6510core.c: Moved breakpoint checking to `DO_INTERRUPT'.
  	`DO_INTERRUPT' split into 2 separate macros.  Check for forced
 	imports - cases where the monitor changes registers of a processor
 	different from the one that called it.

	* Makefile.in: Removed `-v' flag from bison.  Was for debugging
 	only.

	* c64/c64mem.c,c64/c64mem.h: Change names of watchpoint control
 	functions.

	* include/interrupt.h: Interrupt based breakpoint support.

	* mon.c,include/mon.h: Added force_import support, 1541 watchpoint
 	handling, better PET support and other minor fixes.

	* maincpu.c: Defined `FORCE_IMPORT'.

	* vic20/vic20mem.c,vic20/vic20mem.h: Vic20 watchpoint support:
 	Added watchpoint functions, watchpoint functions array and
 	functions to turn watchpoints on/off. (Note: zero page not
 	included)

Mon Apr 20 15:45:33 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.8.

	* include/findpath.h: #include <unistd.h> to make sure `X_OK',
	`R_OK' and `W_OK' are defined.

	* main.c (set_boot_path) [!__MSDOS__]: Remove trailing '/' from
	`boot_path' if present.

	* resources.c (resources_set_defaults) [!__MSDOS__]: Set
 	`Directory' to a list of two colon-separated paths, so that system
 	files are first searched into the `LIBDIR' and then into the
 	`boot_path'.

	* main.c [__MSDOS__]: `boot_path' is now dynamically allocated.

	* main.c (set_boot_path) [!__MSDOS__]: New function.
	(main) [!__MSDOS__]: Call `set_boot_path()'.

	* arch/unix/kbd.c (kbd_parse_keymap): Locate the keymap file using
 	`findpath'.

	* memutils.c (create_name): Removed.

	* include/memutils.h (open_sys_file): Removed prototype.

	* memutils.c (open_sys_file): Removed.
	(mem_load_sys_file): Use `findpath' to locate the file.

	* include/findpath.c (findpath): Updated prototype.

	* findpath.c (findpath): `cmd' and `syspath' parameters made
	const.  New parameter `mode'.

	* mon.c: #include "vice.h" before anything else.

	* mon.c (debugger): Add the command line to the history if
	nonempty.
	(hunt_memory): Removed unused variable `i'.

	* configure.in: Allow the user to inhibit usage of the system's
 	readline (`--without-readline').  Fixed the `--with-xaw3d' option
	so that it does work as expected.

	* Makefile.in ($(READLINE)): Replaced with
 	`$(READLINEODIR)/readline.a'.  `$(READLINE)' is now defined from
 	`@READLINE@' and is empty if we want to use the system's readline.

	* configure.in: Check for `-lreadline'; if present, set
 	`@READLINE@' to empty, otherwise set it to
 	`$(READLINEODIR)/readline.a'.

	* configure.in: Check for `-lICE' and explicitly add it to `LIBS'
 	if present.

Mon Apr 20 01:11:38 1998  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* true1541.c: (write_track_gcr): New function that writes back a
 	track to the GCR disk image.
	(read_image_d64): Set speed zones to standard speeds as the D64
 	disk image format does not provide speed zone information.
	(read_image_gcr): Changed to also import speed zones.  New array
 	`GCR_speed_zone'.
	(GCR_data_writeback): Call `write_track_gcr' if a GCR disk image
 	is attached.

Sun Apr 19 21:52:46 1998  Teemu Rantanen  <tvr@cs.hut.fi>

	* include/resources.h: New resource `soundOversample'.

	* arch/unix/menu.h: New menuitem `ChangeSoundOversampleSubmenu'.

	* arch/unix/ui_xaw.c: New UI callback `UiSetSoundOversample' to set
	sound oversample values.

	* sid.c (sound_t): new items for sound oversample calculations
 	`oversampleval', `oversamplecnt', `oversamplenr' and
 	`oversampleshift'.

	* sid.c (update_sid): Oversample calculation.

	* sid.c (init_sid, initsid): Oversample calculation initialization.

	* resources.c (resources). New resourcefile -entry 'SoundOversample'.

	* resources.c (resources_set_defaults, resources_fix): Handle
	sound oversample value setting.

Sun Apr 19 17:28:05 1998  Andreas Boose  <boose@linux.rz.fh-hannover.de>

	* c1541.c (disk_gcrformat): Set the track length field and the
 	zone speed to the correct values.

	* true1541.c: `speed_map' is now in `drive.c'.  Renamed
 	`GCR_track_size' to `GCR_current_track_size'.  `GCR_track_size'
 	now holds the track size for each track.
	(read_image_d64): Use standard track lengths.  Call
 	`true1541_set_half_track' to update `GCR_current_track_size'.
	(read_image_gcr): Use track lengths provided by the GCR disk
 	image.
	(initialize_true1541): Initialise track lengths.
	(GCR_data_writeback): Clear `GCR_dirty_track' when a GCR disk
 	image is attached.

	* drive.c: Moved `speed_map' to this file.

Sun Apr 19 15:22:55 1998  Daniel Sladic  <sladic@eecg.toronto.edu>

	* 1541cpu.c, 1541cpu.h: Moved memory function typedefs to header.

	* 6510core.c: Set variable before mon is called to signal which
 	cpu is the caller.  IMPORT registers after returning from the
 	monitor to recognize changes by the monitor.

	* c64mem.c, include/c64mem.h: Watchpoint support.

	* mon.c, include/mon.h: Watchpoint support.  Stepping support.
  	Better handling of 1541 registers.  Allow assembly after address
 	for `a' command.  Bit better datatype handling.  Other minor
 	fixes.

	* main.c (main): Move monitor init before possible mon() call.

	* maincpu.c (JAM): Setting caller variable before mon() call.

	* mon_cli.l: Changed some syntax for better usability.  Allow
 	assembly to start on same line as 'a' command.  Better guessing of
 	datatype based on default type.

	* mon_cli.y: New commands.  Removed compiler warnings.  Allow
 	assembly to start on same line as 'a' command.

Sun Apr 19 21:19:50 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.7.

	* zfile.c (read_zipped_sector): Removed.
	(try_uncompress_zipcode): Use `zipcode_read_sector()' instead.

	* c1541.c (read_zipped_sector): Removed.
	(disk_import_zipfile): Use `zipcode_read_sector()' instead.

	* zipcode.c (zipcode_read_sector): New file, new function (ripped
 	from the Daniel's `read_zipped_sector()' in `c1541.c').
	* include/zipcode.h: Prototype here.

	* findpath.c (findpath): Check for read permission (instead of
	execution permission).  Return the path to the file, instead of
	just the directory.

	* Makefile.in: Updated to compile `findpath.o'.

	* include/findpath.h (findpath): New file; prototype for
 	`findpath()'.

	* findpath.c: #include "misc.h", "vice.h".
	 (findpath): New parameter `syspath', used instead of `PATH'.  Use
 	`stralloc()' instead of `strdup()'.  Declare `buf' using
 	`PATH_VAR'.

Sun Apr 19 18:03:23 1998  Tomi Ollila  <Tomi.Ollila@tfi.net>

	* findpath.c (findpath): New file, new function.

Sun Apr 19 17:56:01 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* arch/unix/ui_xaw.c: #include <errno.h>.

Fri Apr 19 17:35:21 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* c1541.c (disk_gcrformat): New function to create GCR encoded
	disk images.

	* drive.c (attach_floppy_image): Call `import_GCR_image' after
	the check for d64 disk image failed.  Only read BAM and set disk
	geometry if a d64 disk image is attached.
	(import_GCR_image): New function.  Checks for a valid GCR disk
	image and sets the drive constants.

	* include/drive.h (DRIVE): New member `GCR_Header'.

	* include/fs_cbm.h (hdrinfo): New member `gcr'.

	* true1541.c (read_image_GCR): Renamed to `read_image_d64'.
	(read_image_gcr): New function.  Imports the a GCR disk image and
	converts it to the internal track layout.
	(true1541_attach_floppy): Call `read_image_gcr' if a GCR disk image
	is attached.
	(GCR_data_writeback): Do not write back track data if a GCR disk
	image is attached.  This will change soon.

Sun Apr 19 01:50:50 1998  André Fachat <a.fachat@physik.tu-chemnitz.de>

	* Makefile.in: Added vice keyboard maps (*.vkm) to appropriate
 	definitions, to have them copied when installing.

	* bin/C64/vice.vkm: New file, C64 keyboard mapping.

	* bin/VIC20/vice.vkm: New file, VIC20 keyboard mapping.

	* bin/PET/busi_uk.vkm: New file, UK (50 Hz) PET business keyboard
 	map.

	* bin/PET/graphics.vkm: New file, PET graphics keyboard map.

	* bin/PET/posg_de.vkm: PET graphics keyboard positional map for
 	german keyboards.

	* arch/unix/kbd.c: New keymap handling.
	(kbd_init): Set keyconvmap to default, if not PET.  If PET it is
 	done in set40key/set80key.  If given load keymapfile from the
 	resources.
	(kbd_parse_keyword): New function: Parse and execute keywords in
 	keymap files
	(kdb_parse_entry): New function: Parse mapping entry in string and
 	enter entry into the mapping table. Dynamically increase table
 	size if necessary.
	(kbd_parse_keymap): New function: Open filename given and read
 	line by line. Give relevant lines to kbd_parse_keyword and
 	kbd_parse_entry.
	(kbd_load_keymap): New function: dynmicallizes the keymap table
	(if still static) and calls parser.
	(kdb_dump_keymap): Dump current keymap table to file given.

	* arch/unix/kbd.h: Prototypes for `kbd_load_keymap' and
 	`kbd_dump_keymap'.

	* arch/unix/kbdef.h: Removed `shift_type' enum definition, is now
 	only int to be able to use "atoi" when parsing a mapping file.
  	Changed enum entries to cpp defines.  Renamed `keyconvmap' to
 	`default_keyconvmap'.  Made keyconvmap a pointer for all models.
  	Removed `CONV_KEYS'.

	* arch/unix/menu.h: New submenu `KeyboardSubmenu' for keyboard
 	handling.  The vice keymap filenames are defined here as
 	`client_data'.

	* arch/unix/ui_xaw.c (UiSetKeymap): New function to set a default
	keymap.
	(UiLoadKeymap): New function to set load a known keymap table.
	(UiLoadUserKeymap): New function to load a user-specified keymap
	table.
	(UiDumpKeymap): New function to dump the current keymap table.

	* include/memutils.h: New prototype for `open_sys_file()'.

	* include/resources.h: New resource `keymapFile'.

	* memutils.c (open_sys_file): New function to open a file either
	in the current directory, a given path or the emulator directory,
	ripped from `mem_load_sys_file'.
	(mem_load_sys_file): Just call `open_sys_file()'.

	* resources.c (resources): New `KeymapFile' resource.
	(options): `-keymapfile' option.
	(resources_set_defaults): Set default for keymapfile resource.

Fri Apr 17 14:22:08 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.6.

	* c1541.c (disk_unlynx): Replaced `strtol()' calls with calls to
	`string_to_int()'.  Do not complain if `lbsize' is zero.

	* utils.c (string_to_int): New function.

	* arch/unix/ui_xaw.c (UiTogglePause): Call `UiDisplayPaused()'
 	correctly.
	* arch/unix/xdebug.c (StopTrap): Likewise.
	(xdebug_disable): Call `UiDisplayPaused(0)'.
	(RunCb): Likewise.

	* arch/unix/ui_xaw.c (UiDisplayPaused): New parameter `flag'.  If
 	nonzero, display the "(paused)" string.  Otherwise, remove it.
	* arch/unix/ui_xaw.h (UiDisplayPaused): Updated prototype.

Fri Apr 17 00:14:29 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.5.

	* sid.c: `#ifdef NetBSD' -> `#ifdef __NetBSD__'.

Wed Apr 15 11:48:45 1998  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* viad1.def, viad2.def: READ_PRB does not immediately return, but
 	only sets the variable "byte"
	* pet/viap.def, vic20/via1.def, vic20/via2.def: Likewise.

	* via-tmpl.c (update_myviatal): Timer underflow now sets portbit
 	PB7 state.
	(myviapb7, myviapb7x): PB7 state, and invert flag for one special
 	cycle in the timing diagram...
	(store_myvia): T1CH: clear pb7 state, ACR: pb7 handling
	(read_myvia): PRB: macro returns "byte" variable, if pb7 output is
 	set then replace bit 7 with pb7 state.

Tue Apr 15 04:00:00 1998  Daniel Sladic  <sladic@eecg.toronto.edu>

	* mon.c: New monitor!

	* mon_cli.l, mon_cli.y: Flex and bison files to handle monitor
        command line.

	* Makefile.in: Added newfiles mon_cli.y and mon_cli.l and related
        files.

	* asm.c, include/asm.h: Made function `interpret_instr' global.

	* 6510core.c: Added breakpoint checks.

	* 1541cpu.c: Added #include "mon.h".  Made read and store function
 	arrays global.

	* main.c (main): Added `init_monitor()' call.

	* include/mon.h: Added a whole bunch of new variable and function
        declarations for the new monitor.

Tue Apr 14 19:40:29 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.4.

Tue Apr 14 23:48:47 1998  André Fachat <a.fachat@physik.tu-chemnitz.de>

	* via*.def: Introduced "myrmwf" definitions for either `rmwf_flag'
 	of `true1541_rmw_flag'.

	* via-tmpl.c: New timer handling:
	(update_myviata, update_myviatb): Removed functions.
	(myviata, myviatb): New cpp macros to compute the current counter
 	value
	(update_myviatal, update_myviatbl): New cpp macros to update timer
 	information before changing the timer latches.
	(myviata, myviatb): Removed variables for the counter values.
	(myviatal, myviatbl): New variables for the latch values.
	(reset_myvia): Clear latch values.
	(store_myvia, read_myvia): New timer handling
	(myvia_prevent_clk_overflow): New timer handling.

Tue Apr 14 19:00:10 1998  Teemu Rantanen  <tvr@cs.hut.fi>

	* sid.c (sun_bufferstatus) [NetBSD]: Fixed return value.

Tue Apr 14 12:53:04 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* drive.c (read_fs): When returning `SERIAL_EOF', put a 0xc7 into
	the buffer.

Tue Apr 14 12:49:27 1998  Petschy  <petschy@derceto.sch.bme.hu>

	* drive.c (read_1541): When returning `SERIAL_EOF', put a 0xc7
	into the buffer.

	* serial.c (serialreceivebyte): Set the N and Z flags according to
	the value of `data'.

Tue Apr 14 12:29:48 1998  Krister Walfridsson  <cato@df.lth.se>

	* Makefile.in: Replaced `@LINUXJOYSTICK@' with `@JOYSTICK@' in
	`DEFS'.  Use `$(RM)' instead of `rm' consistently.

	* configure.in: Replaced `@LINUXJOYSTICK@' with `@JOYSTICK@'. If
 	the `linux/joystick.h' include exists, add both `-DHAS_JOYSTICK
 	-DLINUX_JOYSTICK' to it.  If the `machine/joystick.h' include
 	exists, add `-DHAS_JOYSTICK -DBSD_JOYSTICK'.

	* arch/unix/joystick.c: Added support for NetBSD.
	[BSD_JOYSTICK] #include <machine/joystick.h>
	(joyini) [BSD_JOYSTICK]: Open `/dev/joy0' instead of `/dev/js0'.
	[!HAS_DIGITAL_JOYSTICK]: Do not open the `/dev/djs[01]' devices.
	(joystick): Handle Linux and BSD buttons differently.

	* sid.c: Added support for NetBSD (derived from the code for
 	Solaris).

Fri Apr 10 19:12:55 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* arch/unix/menu.h (Change1541ExtendImageSubmenu): New menu for
 	extended disk handling.

	* arch/unix/ui_xaw.c, arch/unix/ui_xaw.h (UiExtendImageDialog):
 	New dialog to confirm disk image extension.
	(UiSet1541ExtendImage): New function.

	* drive.c (get_std64_header): Do not hardcode track constants.

	* include/fs_cbm.h: Define `EXT_TRACKS_1541' and
 	`EXT_BLOCKS_1541'.

	* resources.c, resources.h: New resource `true1541ExtendImage'.

	* true1541.c (GCR_data_writeback): If data is written to track
 	36..40 extend disk if it complies with the user settings.
	(true1541_extend_disk_image): Clear tracks 36..40 and promote the
 	drive constants to 40 tracks.  New flag `ask_extend_disk_image'
 	that is cleared once the user disallowed extension of the disk
 	image.
	(true1541_attach_floppy): Set `ask_extend_disk_image' on attach.

Fri Apr 10 00:16:11 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.3.

Wed Apr  8 21:36:38 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* arch/msdos/tui_backend.c (tui_beep): New function.  Former
 	callers of `beep' call this one instead.

	* arch/msdos/tui.h (beep): Removed.

	* arch/msdos/tui.c (tui_error, tui_input_string, tui_message): Use
 	`tui_num_cols()' instead of using `text_mode_info' directly.

	* arch/msdos/kbd.c (kbd_init): Lock `queue_command' correctly.

	* configure.in: Add `$(ARCHODIR)/tui_backend.o' to `SYSPEC_OBJS'
	when configuring for MS-DOS.

	* arch/msdos/tui.c: Splitted into `arch/msdos/tui.c' and
 	`arch/msdos/tui_backend.c'.
	* arch/msdos/tui.h: Likewise splitted into
	`arch/msdos/tui.h' and `arch/msdos/tui_backend.h'.

	* arch/msdos/tui_backend.c, arch/msdos/tui_backend.h: New files.

Wed Apr  8 20:27:30 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* true1541.c: New variable `detach_clk'.
	(true1541_detach_floppy): Set `detack_clk' to the value of
 	`true1541_clk'.
	(true1541_write_protect_sense): Toggle write protection bit if the
 	disk is attached or detached.
	(true1541_prevent_clk_overflow): Subtract
 	`PREVENT_CLK_OVERFLOW_SUB' from `detach_clk' to prevent counter
 	overflows.

	* true1541.h: New constant `TRUE1541_DETACH_DELAY'.

	* true1541.c (GCR_data_writeback): Removed bogus line left
	over from the last patch.

Wed Apr  8 11:52:57 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.2.

	* resources.c (parse_cmd_line): Do not handle arguments beginning
	with `+' as orphans anymore.  Fixed typo `argv[1]' -> `argv[i]'.

Wed Apr  8 01:06:41 1998  Teemu Rantanen  <tvr@cs.hut.fi>

	* c64/autostart.c: Added include "kbdbuf.h".

	* kbdbuf.c: Added include "charsets.h"

	* main.c: Removed include "charsets.h" and removed call to
 	petconvstring().  Autostart handles the conversion now.

	* c1541.c (disk_import_zipfile): Added support for extracting
 	zipcodes that are on one file.  There are no standards for this,
 	but this makes life a lot easier when we try to extract zipcodes
 	from archive.

	* c1541.c (disk_import_zipfile): Changed to accept the zipcode
 	-name with the `[1-4]!' -prefix.

	* c1541.c (main): Fixed `-zcreate' parameter when used from the
 	command -line.

	* zfile.c (compression_type): New types COMPR_ZIPCODE and
 	COMPR_LYNX.

	* zfile.c (extensions): New extension '.lnx' to be searched from
 	inside the archive.

	* zfile.c (is_zipcode_name): New function.  Checks the `[1-4]!'
 	prefix.

	* zfile.c (is_valid_extension): Added check for zipcode -names.

	* zfile.c (try_uncompress_archive): When zipcode -filename is found
	inside the archive, the whole zipcode (4 files) is extracted into
	temporary file.

	* zfile.c (read_zipped_sector): Read one zipcode -sector from the
 	image.  NOTE! This was directly copied from c1541.c and it should be
	shared someplace.

	* zfile.c (try_uncompress_zipcode): New function.  Tries to uncompress
	zipcode into image using c1541 -utility.

	* zfile.c (try_uncompress_lynx): New function.  Tries to uncompress
	lynx file into image using c1541 -utility.

	* zfile.c (valid_archives): New extension .lha to be extracted using
	external lha -program.

	* zfile.c (try_uncompress): Try to uncompress zipcode and lynx -image
	if other decompression attempts fail.

	* zfile.c (compress): Warnings if zipcodes or lynx -images are being
	compressed (should not happen as they are read-only).

	* zfile.c (zopen): Support for recursive decompression.

Tue Apr  7 15:33:40 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2.1.

	* c64/autostart.c (feed): Removed; all callers use
 	`kbd_buf_feed()' instead.

	* arch/msdos/vsync.c, arch/unix/vsync.c (do_vsync): Call
 	`kbd_buf_flush'.

	* kbdbuf.c, include/kbdbuf.h (kbd_buf_flush, kbd_buf_feed): New
 	file, new functions.

	* c64/vicii.c (draw_ext_text_foreground): Rewritten to handle
	changes to the registers within the line correctly.
	(draw_ext_text_foreground_2x): Likewise.

	* main.c (main): Do not try to use the `autostartName' resource if
	NULL.

	* resources.c (parse_cmd_line): An argument without an option goes
	into `autostartName'.

Tue Apr  7 15:23:57 1998  Teemu Rantanen  <tvr@cs.hut.fi>

	* include/autostart.h: Added optional parameter `program_name' to
 	functions `autostart_tape()', `autostart_disk()' and
 	`autostart_autodetect()'.

	* arch/unix/ui_xaw.c (UiAttachDisk, UiAttachTape, UiSmartAttach):
 	Added NULL paramater to changed autostart calls (to be changed
 	later when UI supports this feature).

	* main.c (main): Changed autostart to support `image:prgname'
 	-format to start a named program on image.  Checks that image
 	exists.

	* main.c: Added needed includes for autostart.

	* c64/autostart.c: Added new include "utils.h"

	* c64/autostart.c (autostart_program_name): New variable.

	* c64/autostart.c (deallocate_program_name): New function.  Frees
 	autostart_program_name if it exists.  Added calls to this function
 	to every place where autostarting is stopped.

	* c64/autostart.c (feed): Feed the data into next column compared
 	to the cursor.  This is a temporary fix before full keyboard feed
 	is implemented.

	* c64/autostart.c (autostart_advance): Changed loads to include
	the program name if we have one.

	* c64/autostart.c (reboot_for_autostart): Set the program name
	here which we are going to autostart.

	* c64/autostart.c (autostart_advance): Check that we receive
 	"LOADING" -message when loading from disk.  If not, interrupt
 	autostart.

Wed Apr 7 14:26:13 1998  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* include/crtc.h (crtc_screen_enable): New prototype.

	* pet/crtc.c (crtc_screen_enable): New function to immediately
 	disable screen output.

	* pet/petmem.c (initialize_memory): Fix the video RAM size setting
 	to 2k, not 4.  Make $8800-$9000 appear unused (except for CBM
 	8296)
	(patch_2001): Copy string behind the ROM patch to identify what
 	has been done.

	* pet/pets.c: Fix 8096 I/O size to $800 (same as 8032, as the 8096
	is just a 8032 with expansion board).

	* pet/pia.c (reset_pia1): Call `crtc_screen_enable()'.
	(store_pia1): Call `crtc_screen_enable()' when EOI line is handled
 	and we have a PET 2001.

Mon Apr  6 12:02:59 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* tapeunit.c (attach_tape_image): Removed unused variable
 	`realtype'.
	(findheader): Removed unused variable `buf'.

Mon Apr 6  11:58:34 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* drive.c (floppy_free_block_count, do_validate): Changed to use
 	extended BAM if a disk with 40 tracks is attached.
	(allocate_sector, free_sector): Changed likewise.

	* include/fs_cbm.h: Added new SpeedDOS compatible extended BAM
 	offset.  Increased MAX drive constants to 42 tracks.

	* true1541.c (read_image_GCR, true1541_set_half_track): Changed to
 	handle 40 tracks.  Expanded `speed_map' to 42 tracks.
	(GCR_data_writeback): Write back valid tracks only.

	* true1541.c (read_image_GCR): Commented out disk ID hack.

Sun Apr  5 01:11:29 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.2 released.

	* arch/unix/menu.h [HAVE_TRUE1541 && !CBM64]: Disable "Enable
 	parallel cable" menu entry.

	* arch/msdos/kbd.c (my_kbd_interrupt_handler): Ignore release of
 	`K_ESC'.

	* arch/msdos/ui.c (quit_callback): Call
 	`true1541_detach_floppy()'.

	* true1541.c (true1541_enable): If `true1541_floppy' is not NULL,
 	call `true1541_attach_floppy()' to update the GCR image.

	* main.c (exit64) [!NO_SERIAL]: Detach the serial devices even if
 	the `noTraps' resource is set.

	* c64/c64mem.c [EMULATOR_ID]: Updated version and copyright in the
 	emulator ID.

Sat Apr  4 21:30:50 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* arch/msdos/ui.c (mon_trap): Enable on-file logging before
	(instead of after) entering graphics mode.

Fri Apr  3 13:39:29 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.1.8.

	* arch/msdos/ui.c (UiDisplayDriveTrack, UiDisplayDriveLed): New
 	(dummy) functions.
	(UiToggleDriveStatus): Likewise.
	* arch/msdos/ui.h: Prototypes here.

	* resources.c (resources_set_defaults) [HAVE_TRUE1541 && CBM64]:
	Set `app_resources.true1541ParallelCable' to 0.

Thu Apr  2 16:01:18 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.1.7.

	* resources.c [CBM64]: Removed `TapeName' resource.

	* true1541.c (true1541_enable): Do not initialize the true1541.

	* resources.c [CBM64 && HAVE_TRUE1541]: New options `-parallel',
 	`+parallel'.

	* via-tmpl.c (update_myviata, update_myviatb): Delay `A_MYVIAT1'
	and `A_MYVIAT2' alarms by one cycle.  At least, this makes sure
	the emulator does not hang when the latch is set to zero.

Wed Apr  1 12:22:13 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.1.6.

	* arch/msdos/ui.c [CBM64 && HAVE_TRUE1541]
 	(toggle_true1541_parallel_cable_callback): New function.
	(UiInitFinish): new item for toggling the parallel cable
 	emulation.

	* true1541.c (serial_bus_drive_read, serial_bus_drive_write)
	[!FAST_BUS]:  Inverted polarities.

Tue Mar 31 13:06:25 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.1.5.

	* resources.c [!CBM64]: Removed `True1541ParallelCable' resource.

	* resources.c [!__MSDOS__] (wait_user): Removed.

	* true1541.c (initialize_true1541): Position the R/W head on track
	18.

	* vic20/vic20mem.c, vic20/vic20mem.h: Removed variables
 	`kernal_rom' and `basic_rom'.  New variable `rom' which includes
 	both Kernal and Basic.  New macros `kernal_rom' and `basic_rom' to
 	access the two parts.

	* arch/unix/ui_xaw.c (UiToggleDriveStatus, UiDisplayDriveLed):
	Removed when true1541 emulation is not available.
 	(UiDisplayDriveTrack): Likewise.

	* raster.c (refresh_all): Fixed behavior with windows bigger than
	the screen image.

	* arch/unix/ui_xaw.c: Do not #include <X11/IntrinsicP.h> anymore.

	* arch/unix/ui_xaw.c: Removed member `widget' and added members
	`shell' and `canvas' to `AppShells'.
	(UiDisplayPaused, UiPopup, UiCloseAction): Updated accordingly.
	(UiResizeCanvasWindow): Resize the canvas widget in the UiWindow.

	* raster.c (refresh_all) [RASTER_DEBUG_PUTIMAGE_CALLS]: Updated
 	debugging message.
	(resize): Calculate `window_last_line' correctly when the window
	is higher than the screen.

	* serial.c (serial_select_file): Call `true1541_detach_floppy()'
	only if attaching to drive 8.

	* c64/autostart.c (autostart_advance): Do not turn true1541 off if
 	the `noTraps' resource is set.  In case `AUTOSTART_HASDISK', do
 	not load the program before 1 virtual second.

	* arch/unix/ui_xaw.c (UiDisplayDriveLed, UiDisplayDriveTrack): If
	the widget is not realized, realize it automagically.

	* arch/unix/vsync.c (update_drive_led): Renamed to
 	`update_drive_status'.
	(update_drive_status): Display the current track too.  If true
 	1541 is disabled, remove the drive status widget.

	* true1541.c: Removed variable `cur_ht', replaced with an extern
 	one `true1541_current_half_track'.

Mon Mar 30 22:47:30 1998  Michael Schwendt  <sidplay@geocities.com>

	* sid.c: Changed filter parameters to depend on the sample
 	frequency.

Mon Mar 30 22:40:29  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* 6510core.c (LOCAL_SET_OVERFLOW) [__1541__ && TRUE1541_ROTATE]:
 	Removed redundant call to `true1541_rotate_disk()'.  Only clear
 	the byte ready line if VFLAG is actually cleared.

Mon Mar 30 22:27:28 1998  Teemu Rantanen  <tvr@cs.hut.fi>

	* sid.c (update_sid): Removed volume check optimization.

	* sid.c (reset_sid): Changed to use `store_sid()' instead of
 	clearing register -values directly.

	* sid.c (flush_sound): When click happens, send buffer advancing
 	from zero level to next sample.

	* include/sid.h: New protos: `suspend_sound()' and
 	`resume_sound()'.

	* sid.c (sid_device_t): New fields suspend and resume.

	* sid.c (suspend_sound, resume_sound): New functions.

	* sid.c (uss_suspend): Implemented suspend -feature for	the USS
	-device.

	* arch/unix/vsync.c (suspend_speed_eval): Call `suspend_sound()'.

	* sid.c (flush_sound): `Call resume_sound()'.

Mon Mar 30 11:01:41 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.1.4.

	* maincpu.c [AUTOSTART]: #include "autostart.h".

	* true1541.c: #include "ui.h".
	(true1541_disable, true1541_enable): Call `UiToggleDriveStatus' to
 	update the status line.
	(true1541_update_zone_bits): Removed debugging message.
	(true1541_move_head): Display the current position of the head
 	with `UiDisplayDriveTrack()'
	(parallel_cable_drive_write, parallel_cable_drive_read) [!CBM64]:
 	Dummy functions to make the 1541 happy.

	* ui_xaw.h: New prototypes for `UiDisplayDriveTrack',
 	`UiToggleDriveStatus', `UiDisplayDriveLed'.

	* arch/unix/ui_xaw.c: Added member `speed_label' to `AppShells'.
	[HAVE_TRUE1541] Added members `drive_track_label' and `drive_led'
 	to `AppShells'.  New variables `drive_led_on_pixel',
 	`drive_led_off_pixel'.  Added new fallback resources to
 	`fallback_resources'.
	(UiOpenCanvasWindow): Create the speed `speedStatus' label.
	[HAVE_TRUE1541] Create the `driveTrack' and `driveLed' widgets.
	(UiDoAllocColors) [HAVE_TRUE1541]: Allocate colors for the
 	`driveLed'.
	(UiDisplaySpeed): Use `speedStatus' instead of the title bar.
	(UiToggleDriveStatus, UiDisplayDriveTrack, UiDisplayDriveLed): New
 	functions.
	(UiResizeCanvasWindow): (Temporarily?) do nothing.

	* resources.c [HAVE_TRUE1541]: Fixed name of the
 	`True1541ParallelCable' resource.

	* cia-tmpl.c (read_mycia): `A_CIA2TA' -> `A_MYCIATA', `A_CIA2TB'
	-> `A_MYCIATB'.

Sun Mar 29 21:08:49 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.1.3.

	* Makefile.in: Updated `DOCS' according to André's documentation
	changes.

Sat Mar 28 17:35:49 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* arch/unix/ui_xaw.c (UiToggleParallelCable): New function to
 	toggle parallel cable emulation.

	* include/menu.h: Added new entry to toggle parallel cable
 	emulation.

	* resources.c: New resource `true1541ParallelCable'.

	* cia-tmpl.c (read_mycia): New macro `READ_CIAICR'.
	(mycia_set_flag): New function to set the flag bit.

	* cia2.def (READ_CIAICR): Call `true1541_cpu_execute()' whenever
 	the ICR is read to update the flag bit.
	(STORE_CIAPB, READ_CIAPB): Changed to new parallel cable handling.

	* viad1.def: (STORE_PRA, READ_PRA): Changed likewise.

	* true1541.c: New variables `parallel_cable_cpu_value' and
 	`parallel_cable_drive_value'.
 	(parallel_cable_cpu_read, parallel_cable_cpu_write): New function
 	for parallel cable handling.
	(parallel_cable_drive_read, parallel_cable_drive_write): More new
 	functions.

	* cia.h: Updated prototypes.
	* true1541.h: Likewise.

Sun Mar 29 15:05:56 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* raster.c (resize): Use the same resizing policy for MS-DOS and
 	Unix.

	* c64/vicii.c (store_vic): When writing to $D017, removed special
 	hack for cycle 54.

	* c64/vicii.c (store_vic): If CSEL changes from 0 to 1 at cycle
	17, set `blank_this_line' to 1.

	* raster.c (emulate_line): If `blank_this_line' is nonzero, draw
 	this line as a blank one.  Set `blank_this_line' to zero before
	returning.

	* include/raster.h: New variable `blank_this_line'.

	* c64/vicii.c: New variables `idle_data', `idle_data_location'.
  	Removed old variables `vbank_39ff', `vbank_3fff', `idle_data_ptr'.
	(int_rasterdraw): Update `idle_data_location' and `idle_data'
 	according to the current values of $D011 and `idle_state'.
	(store_d011): When changing `draw_idle_state', set
 	`idle_data_location' accordingly.
	(store_vbank_39xx, store_vbank_3fxx): New method, use
 	`idle_data_location' and `idle_data'.
	(get_idle): Use `idle_data'.
	(_draw_idle, draw_idle_foreground, draw_idle_foreground_2x):
 	Likewise.
	(set_video_mode): When setting a new video mode, add changes for
 	`idle_data' according to bit 6 in $D011 if needed.
	(set_memory_ptrs): If necessary, update `idle_data' when changing
	video bank.

Sat Mar 28 11:53:51 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* c64/vicii.c (store_vic): Cycle for 38/40 column mode switch in
 	the right border decremented by 1.

	* c64/vicii.c (store_d011): The color memory buffer fetches the 4
 	lowmost bits from `ram[reg_pc]'.

	* 6510core.c: `ASL', `DCP', `DCP_IND_Y', `ISB', `RLA',
 	`RLA_IND_Y', `ROL', ROR `SHA_ABS_Y', `SHA_IND_Y', `SHX_ABS_Y',
 	`SHY_ABS_X', `SHS_ABS_Y', `SLO', `SLO_IND_Y', `SRE', `SRE_IND_Y',
 	`STA', `STA_ZERO', `STA_IND_Y', `STX', `STX_ZERO', `STY',
 	`STY_ZERO' increment PC before doing the write access.

	* maincpu.c: Avoid #undefining or #defining `EXTERN_PC' if already
 	#defined.

	* include/maincpu.h [CBM64]: #define `EXTERN_PC' and declare
 	`reg_pc'.

	* arch/unix/ui_xaw.c (UiChangeWorkingDir): The default value in
 	the text widget is now the path of the current working directory.

	* 6510core.c (STORE_ABS_X, STORE_ABS_Y): Fixed increments of
 	`CLK'.

Fri Mar 27 17:35:02 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* arch/unix/xdebug.c (RegisterBar): XtNeditType of `registers'
 	changed into `XawtextRead' so that they cannot be changed
	(changing them had no effect anyway, so it could just confuse
 	users).

Wed Mar 25 21:40:01 1998  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* Makefile.in: Added `$(JOY_OBJS)' to `PET_DEPS'.

Wed Mar 25 00:25:03 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.1.2.

	* c64/vicii.c (int_rasterfetch): Set `sprite_fetch_clk' using
 	`LINE_START_CLK' and `SPRITE_FETCH_CYCLE' instead of
 	`vic_ii_fetch_clk'.

Tue Mar 24 21:18:18 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* arch/msdos/kbd.c (handle_joy_emu): `K_KP5' moves the joystick
 	down.

	* arch/unix/kbd.c (handle_joy_emu): `XK_KP_5' moves the joystick
 	down.

Mon Mar 23 21:30:49 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* true1541.c (GCR_data_writeback): Convert all sectors from GCR to
 	the D64 image even if there are invalid sectors.
	(serial_bus_drive_write): Added #ifdef to make the compiler quiet.

Mon Mar 23 11:29:01 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* Version 0.14.1.1.

	* c64/vicii.c (store_vic): Changing a bit in to $D017 from 1 to 0
 	at cycle 54 causes the sprite memory pointer to be incremented by
 	3.  (I am not sure that this is really right, though!)

	* c64/vicii.c: #include "sprcrunch.h".
	(store_vic): When a bit in $D017 changes from 1 to 0 and the
 	`exp_flag' of the sprite was zero, set its `memptr_inc' according
 	to `sprite_crunch_table'.

	* include/sprcrunch.h: New file.  New variable
 	`sprite_crunch_table'.

Sun Mar 22 17:46:12 1998  Ettore Perazzoli  <ettore@comm2000.it>

	* c64/vicii.c (RASTER_CHAR): Incremented by 2.  All the occurences
 	updated so that the behavior remains the same.

	* c64/c64mem.c (initialize_memory): Install `store_vbank_3fxx()'
	and `store_vbank_39xx()' as the hooks for $39xx and $3Fxx
	addresses in the video bank.

	* c64/vicii.c: New variables `vbank_39ff', `vbank_3fff',
 	`idle_data_ptr'.
	(_draw_idle, get_idle): Use `idle_data_ptr'.
	(draw_idle_foreground_2x, draw_idle_foreground): Likewise.
	(store_vbank): Made inline.
	(store_vbank_3fxx, store_vbank_39xx): New functions.
	(set_memory_ptrs): Update `vbank_39ff' and `vbank_3fff' when the
 	video bank is changed.  Dispatch the `int_rasterdraw()' alarm if
 	pending.
	(set_video_mode): Update `idle_data_ptr'.

	* c64/vicii.c (int_rasterfetch): New, cleaner algorithm.  It also
 	couple of bugs in the old one.

Sun Mar 22 17:19:01 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* true1541.c (GCR_find_sector_header): If the header is not the
 	one we look for try again instead of aborting the search.
	(convert_sector_to_GCR): Added gap between sectors.

	* true1541.c: New constants `speed_map', `raw_track_size'.
	(set_half_track): Calculate the value of `GCR_track_size' using
 	them.

Sat Mar 21 20:56:00 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* true1541.c: Updated TODO list.
	(true1541_sync_found): Do not change `bits_moved' as the current
	code cannot cope with non byte aligned writes.
	(GCR_find_sector_header): Handle killer tracks more gracefully.

Fri Mar 20 17:03:00 1998  Andreas Boose  <boose@unixserv.rz.fh-hannover.de>

	* true1541.c (read_image_GCR): Enlarged tracks to 7693 bytes.
  	This is not 100% correct, but sufficient for the moment.  Raw
 	track filled with 0xff to avoid `20, READ ERROR'.
	(convert_GCR_to_sector, true1541_set_half_track): Changed to
 	handle non-fixed sector layout.
	(GCR_find_sector_header, GCR_find_sector_data): New functions to
 	find a sector in a track.
	(true1541_move_head): Write back current track before moving the
 	head!
	(GCR_data_writeback): Call the new functions to find a sector.
  	Print error messages whenever non-standard GCR data cannot be
 	written back to the disk image.

Tue Mar 17 12:44:55 1998  André Fachat  <a.fachat@physik.tu-chemnitz.de>

	* arch/unix/kbd.c: Changed some joystick-related `#ifdef PET's to
 	include PET joystick emulation.
	(kbd_event_handler) [PET]: Call `handle_joy_emu()' only when the
 	`numpadJoystick' resource is set.

	* arch/unix/menu.h: Change some joystick-related `#ifdef PET's to
        include PET joystick emulation.
	(JoystickSubmenu) [PET]: Add "Enable Numpad Joystick" entry.
	(PetUserportSubmenu): Add "Joystick Settings" menu entry.

	* arch/unix/ui_xaw.c: Change some joystick-related `#ifdef PET's
 	to include PET joystick emulation, esp. the prototypes.
	(UiToggleNumpadJoystick): New function: toggles the
 	`numpadJoystick' resource.

	* arch/unix/vsync.c, main.c: Changed some joystick-related `#ifdef
 	PET's to include PET joystick emulation.

	* include/resources.h: New resource `numpadJoystick'.

	* pet/viap.def (read_viap): Reading VIA PA now reads the joystick
 	values from the userport.

	* resources.c: Changed some joystick-related `#ifdef PET's to
 	include PET joystick emulation.  New `NumpadJoystick' resource and
 	`+/-npjoystick' option for the PET.

Sat Jan 24 21:32:00 1998  Daniel Sladic  <sladic@eecg.toronto.edu>

	* true1541.c: Changed track formats so that each track has about
 	the same # of bits as a real track.  Changed header gap to 9 (from
 	8) bytes.  Added support for non-fixed sector placement inside
 	tracks (find_GCR_sector).



See `ChangeLog.1' for earlier changes.
